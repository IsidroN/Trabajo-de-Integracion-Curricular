
TESIS_P1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  000029f6  00002a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000358  00800236  00800236  00002ac0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002af0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000748  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a3a7  00000000  00000000  00003278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004021  00000000  00000000  0000d61f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000df10  00000000  00000000  00011640  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001804  00000000  00000000  0001f550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001f5e4  00000000  00000000  00020d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000061b9  00000000  00000000  00040338  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000698  00000000  00000000  000464f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b8c0  00000000  00000000  00046b89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	c5 c0       	rjmp	.+394    	; 0x1b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c3 c0       	rjmp	.+390    	; 0x1b4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__vector_17>
      48:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__vector_18>
      4c:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__vector_19>
      50:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__vector_20>
      54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ab c0       	rjmp	.+342    	; 0x1b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	a7 c0       	rjmp	.+334    	; 0x1b4 <__bad_interrupt>
      66:	00 00       	nop
      68:	a5 c0       	rjmp	.+330    	; 0x1b4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	9f c0       	rjmp	.+318    	; 0x1b4 <__bad_interrupt>
      76:	00 00       	nop
      78:	9d c0       	rjmp	.+314    	; 0x1b4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9b c0       	rjmp	.+310    	; 0x1b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <__vector_32>
      84:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__vector_33>
      88:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__vector_34>
      8c:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__vector_35>
      90:	91 c0       	rjmp	.+290    	; 0x1b4 <__bad_interrupt>
      92:	00 00       	nop
      94:	8f c0       	rjmp	.+286    	; 0x1b4 <__bad_interrupt>
      96:	00 00       	nop
      98:	8d c0       	rjmp	.+282    	; 0x1b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8b c0       	rjmp	.+278    	; 0x1b4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	89 c0       	rjmp	.+274    	; 0x1b4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	87 c0       	rjmp	.+270    	; 0x1b4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__vector_42>
      ac:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__vector_43>
      b0:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__vector_44>
      b4:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__vector_45>
      b8:	7d c0       	rjmp	.+250    	; 0x1b4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__vector_47>
      c0:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__vector_48>
      c4:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__vector_49>
      c8:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__vector_50>
      cc:	73 c0       	rjmp	.+230    	; 0x1b4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	71 c0       	rjmp	.+226    	; 0x1b4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	6f c0       	rjmp	.+222    	; 0x1b4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	6d c0       	rjmp	.+218    	; 0x1b4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	6b c0       	rjmp	.+214    	; 0x1b4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	69 c0       	rjmp	.+210    	; 0x1b4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__vector_57>
      e8:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <__vector_58>
      ec:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__vector_59>
      f0:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__vector_60>
      f4:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__vector_61>
      f8:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__vector_62>
      fc:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__vector_63>
     100:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__vector_64>
     104:	57 c0       	rjmp	.+174    	; 0x1b4 <__bad_interrupt>
     106:	00 00       	nop
     108:	55 c0       	rjmp	.+170    	; 0x1b4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	53 c0       	rjmp	.+166    	; 0x1b4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	51 c0       	rjmp	.+162    	; 0x1b4 <__bad_interrupt>
     112:	00 00       	nop
     114:	4f c0       	rjmp	.+158    	; 0x1b4 <__bad_interrupt>
     116:	00 00       	nop
     118:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__vector_70>
     11c:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__vector_71>
     120:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__vector_72>
     124:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__vector_73>
     128:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__vector_74>
     12c:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_75>
     130:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__vector_76>
     134:	3c 07       	cpc	r19, r28
     136:	63 07       	cpc	r22, r19
     138:	57 07       	cpc	r21, r23
     13a:	70 07       	cpc	r23, r16
     13c:	57 07       	cpc	r21, r23
     13e:	2f 07       	cpc	r18, r31
     140:	49 07       	cpc	r20, r25
     142:	57 07       	cpc	r21, r23
     144:	57 07       	cpc	r21, r23
     146:	57 07       	cpc	r21, r23
     148:	57 07       	cpc	r21, r23
     14a:	57 07       	cpc	r21, r23
     14c:	03 07       	cpc	r16, r19
     14e:	57 07       	cpc	r21, r23
     150:	57 07       	cpc	r21, r23
     152:	57 07       	cpc	r21, r23
     154:	57 07       	cpc	r21, r23
     156:	57 07       	cpc	r21, r23
     158:	57 07       	cpc	r21, r23
     15a:	8f 07       	cpc	r24, r31
     15c:	57 07       	cpc	r21, r23
     15e:	57 07       	cpc	r21, r23
     160:	c8 07       	cpc	r28, r24

00000162 <__trampolines_end>:
     162:	04 03       	mulsu	r16, r20
     164:	03 02       	muls	r16, r19
     166:	02 01       	movw	r0, r4
     168:	00 ff       	sbrs	r16, 0
     16a:	fe fd       	.word	0xfdfe	; ????
     16c:	fc fb       	.word	0xfbfc	; ????
     16e:	f9 f7       	brne	.-2      	; 0x16e <__trampolines_end+0xc>
     170:	f4 ef       	ldi	r31, 0xF4	; 244

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d1 e8       	ldi	r29, 0x81	; 129
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0c bf       	out	0x3c, r16	; 60

00000182 <__do_copy_data>:
     182:	12 e0       	ldi	r17, 0x02	; 2
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b2 e0       	ldi	r27, 0x02	; 2
     188:	e6 ef       	ldi	r30, 0xF6	; 246
     18a:	f9 e2       	ldi	r31, 0x29	; 41
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	0b bf       	out	0x3b, r16	; 59
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x14>
     192:	07 90       	elpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	a6 33       	cpi	r26, 0x36	; 54
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0x10>

0000019c <__do_clear_bss>:
     19c:	25 e0       	ldi	r18, 0x05	; 5
     19e:	a6 e3       	ldi	r26, 0x36	; 54
     1a0:	b2 e0       	ldi	r27, 0x02	; 2
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	ae 38       	cpi	r26, 0x8E	; 142
     1a8:	b2 07       	cpc	r27, r18
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
     1ac:	0e 94 c0 13 	call	0x2780	; 0x2780 <main>
     1b0:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <common_tc_read_count>:
     1b6:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <tmr_read_count>
     1ba:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <timer_mul_var>
     1be:	22 23       	and	r18, r18
     1c0:	d9 f0       	breq	.+54     	; 0x1f8 <common_tc_read_count+0x42>
     1c2:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <timer_multiplier>
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <timer_mul_var>
     1cc:	64 2f       	mov	r22, r20
     1ce:	73 2f       	mov	r23, r19
     1d0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__udivmodhi4>
     1d4:	fb 01       	movw	r30, r22
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	9f ef       	ldi	r25, 0xFF	; 255
     1da:	64 2f       	mov	r22, r20
     1dc:	73 2f       	mov	r23, r19
     1de:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__udivmodhi4>
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	62 9f       	mul	r22, r18
     1e6:	c0 01       	movw	r24, r0
     1e8:	63 9f       	mul	r22, r19
     1ea:	90 0d       	add	r25, r0
     1ec:	72 9f       	mul	r23, r18
     1ee:	90 0d       	add	r25, r0
     1f0:	11 24       	eor	r1, r1
     1f2:	8e 0f       	add	r24, r30
     1f4:	9f 1f       	adc	r25, r31
     1f6:	08 95       	ret
     1f8:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <timer_multiplier>
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__udivmodhi4>
     202:	cb 01       	movw	r24, r22
     204:	08 95       	ret

00000206 <common_tc_compare_stop>:
     206:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <tmr_disable_cc_interrupt>
     20a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <save_cpu_interrupt>
     20e:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <__data_end>
     212:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <__data_end+0x1>
     216:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <__data_end+0x2>
     21a:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <__data_end+0x3>
     21e:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <compare_value+0x1>
     222:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <compare_value>
     226:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <restore_cpu_interrupt>

0000022a <common_tc_overflow_stop>:
     22a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <tmr_disable_ovf_interrupt>
     22e:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <timer_mul_var>
     232:	08 95       	ret

00000234 <common_tc_stop>:
     234:	e8 df       	rcall	.-48     	; 0x206 <common_tc_compare_stop>
     236:	f9 df       	rcall	.-14     	; 0x22a <common_tc_overflow_stop>
     238:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <tmr_stop>

0000023c <common_tc_delay>:
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	ec 01       	movw	r28, r24
     246:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <tmr_read_count>
     24a:	8c 01       	movw	r16, r24
     24c:	be 01       	movw	r22, r28
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <timer_multiplier>
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__mulsi3>
     260:	dc 01       	movw	r26, r24
     262:	cb 01       	movw	r24, r22
     264:	a8 01       	movw	r20, r16
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	48 0f       	add	r20, r24
     26c:	59 1f       	adc	r21, r25
     26e:	6a 1f       	adc	r22, r26
     270:	7b 1f       	adc	r23, r27
     272:	40 93 36 02 	sts	0x0236, r20	; 0x800236 <__data_end>
     276:	50 93 37 02 	sts	0x0237, r21	; 0x800237 <__data_end+0x1>
     27a:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <__data_end+0x2>
     27e:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <__data_end+0x3>
     282:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <__data_end>
     286:	50 91 37 02 	lds	r21, 0x0237	; 0x800237 <__data_end+0x1>
     28a:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <__data_end+0x2>
     28e:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <__data_end+0x3>
     292:	ab 01       	movw	r20, r22
     294:	66 27       	eor	r22, r22
     296:	77 27       	eor	r23, r23
     298:	40 93 36 02 	sts	0x0236, r20	; 0x800236 <__data_end>
     29c:	50 93 37 02 	sts	0x0237, r21	; 0x800237 <__data_end+0x1>
     2a0:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <__data_end+0x2>
     2a4:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <__data_end+0x3>
     2a8:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <__data_end>
     2ac:	50 91 37 02 	lds	r21, 0x0237	; 0x800237 <__data_end+0x1>
     2b0:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <__data_end+0x2>
     2b4:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <__data_end+0x3>
     2b8:	41 15       	cp	r20, r1
     2ba:	51 05       	cpc	r21, r1
     2bc:	61 05       	cpc	r22, r1
     2be:	71 05       	cpc	r23, r1
     2c0:	91 f0       	breq	.+36     	; 0x2e6 <common_tc_delay+0xaa>
     2c2:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <__data_end>
     2c6:	50 91 37 02 	lds	r21, 0x0237	; 0x800237 <__data_end+0x1>
     2ca:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <__data_end+0x2>
     2ce:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <__data_end+0x3>
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	08 0f       	add	r16, r24
     2d6:	19 1f       	adc	r17, r25
     2d8:	10 93 3c 02 	sts	0x023C, r17	; 0x80023c <compare_value+0x1>
     2dc:	00 93 3b 02 	sts	0x023B, r16	; 0x80023b <compare_value>
     2e0:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <tmr_disable_cc_interrupt>
     2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <common_tc_delay+0xba>
     2e6:	08 0f       	add	r16, r24
     2e8:	19 1f       	adc	r17, r25
     2ea:	10 93 3c 02 	sts	0x023C, r17	; 0x80023c <compare_value+0x1>
     2ee:	00 93 3b 02 	sts	0x023B, r16	; 0x80023b <compare_value>
     2f2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <tmr_enable_cc_interrupt>
     2f6:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <compare_value>
     2fa:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <compare_value+0x1>
     2fe:	84 36       	cpi	r24, 0x64	; 100
     300:	91 05       	cpc	r25, r1
     302:	30 f4       	brcc	.+12     	; 0x310 <common_tc_delay+0xd4>
     304:	8c 59       	subi	r24, 0x9C	; 156
     306:	9f 4f       	sbci	r25, 0xFF	; 255
     308:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <compare_value+0x1>
     30c:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <compare_value>
     310:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <compare_value>
     314:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <compare_value+0x1>
     318:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <tmr_write_cmpreg>
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	08 95       	ret

00000326 <common_tc_init>:
     326:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <timer_mul_var>
     32a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <tmr_init>
     32e:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <timer_multiplier>
     332:	08 95       	ret

00000334 <tmr_ovf_callback>:
     334:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
     338:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <__data_end+0x1>
     33c:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <__data_end+0x2>
     340:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <__data_end+0x3>
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	a1 05       	cpc	r26, r1
     348:	b1 05       	cpc	r27, r1
     34a:	c9 f0       	breq	.+50     	; 0x37e <tmr_ovf_callback+0x4a>
     34c:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
     350:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <__data_end+0x1>
     354:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <__data_end+0x2>
     358:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <__data_end+0x3>
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	a1 09       	sbc	r26, r1
     360:	b1 09       	sbc	r27, r1
     362:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <__data_end>
     366:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <__data_end+0x1>
     36a:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <__data_end+0x2>
     36e:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <__data_end+0x3>
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	a1 05       	cpc	r26, r1
     376:	b1 05       	cpc	r27, r1
     378:	11 f4       	brne	.+4      	; 0x37e <tmr_ovf_callback+0x4a>
     37a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <tmr_enable_cc_interrupt>
     37e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <timer_mul_var>
     382:	8f 5f       	subi	r24, 0xFF	; 255
     384:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <timer_mul_var>
     388:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <timer_multiplier>
     38c:	89 17       	cp	r24, r25
     38e:	48 f0       	brcs	.+18     	; 0x3a2 <tmr_ovf_callback+0x6e>
     390:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <timer_mul_var>
     394:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <common_tc_ovf_callback>
     398:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <common_tc_ovf_callback+0x1>
     39c:	30 97       	sbiw	r30, 0x00	; 0
     39e:	09 f0       	breq	.+2      	; 0x3a2 <tmr_ovf_callback+0x6e>
     3a0:	19 95       	eicall
     3a2:	08 95       	ret

000003a4 <tmr_cca_callback>:
     3a4:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <tmr_disable_cc_interrupt>
     3a8:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <common_tc_cca_callback>
     3ac:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <common_tc_cca_callback+0x1>
     3b0:	30 97       	sbiw	r30, 0x00	; 0
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <tmr_cca_callback+0x12>
     3b4:	19 95       	eicall
     3b6:	08 95       	ret

000003b8 <set_common_tc_overflow_callback>:
     3b8:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <common_tc_ovf_callback+0x1>
     3bc:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <common_tc_ovf_callback>
     3c0:	08 95       	ret

000003c2 <set_common_tc_expiry_callback>:
     3c2:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <common_tc_cca_callback+0x1>
     3c6:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <common_tc_cca_callback>
     3ca:	08 95       	ret

000003cc <usr_wireless_app_task>:
int transmit=0;
char RupturaOrigen[16]="Ruptura S 0x000n";
char sensado ='F';
void usr_wireless_app_task(void)
{
if (transmit == 1){
     3cc:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <transmit>
     3d0:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <transmit+0x1>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	91 05       	cpc	r25, r1
     3d8:	29 f4       	brne	.+10     	; 0x3e4 <usr_wireless_app_task+0x18>
	transmit_sample_frame((uint8_t*)RupturaOrigen, 16);
     3da:	60 e1       	ldi	r22, 0x10	; 16
     3dc:	85 e0       	ldi	r24, 0x05	; 5
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	47 d1       	rcall	.+654    	; 0x670 <transmit_sample_frame>
     3e2:	11 c0       	rjmp	.+34     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

	}else if (transmit == 2){
     3e4:	82 30       	cpi	r24, 0x02	; 2
     3e6:	91 05       	cpc	r25, r1
     3e8:	41 f4       	brne	.+16     	; 0x3fa <usr_wireless_app_task+0x2e>
		trama_recibida.payload[8]='F';
     3ea:	86 e4       	ldi	r24, 0x46	; 70
     3ec:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <trama_recibida+0x12>
		transmit_sample_frame(trama_recibida.payload,16);
     3f0:	60 e1       	ldi	r22, 0x10	; 16
     3f2:	8d eb       	ldi	r24, 0xBD	; 189
     3f4:	94 e0       	ldi	r25, 0x04	; 4
     3f6:	3c d1       	rcall	.+632    	; 0x670 <transmit_sample_frame>
     3f8:	06 c0       	rjmp	.+12     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		
		}else if (transmit == 3){
     3fa:	03 97       	sbiw	r24, 0x03	; 3
     3fc:	21 f4       	brne	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		transmit_sample_frame(trama_recibida.payload,16);
     3fe:	60 e1       	ldi	r22, 0x10	; 16
     400:	8d eb       	ldi	r24, 0xBD	; 189
     402:	94 e0       	ldi	r25, 0x04	; 4
     404:	35 d1       	rcall	.+618    	; 0x670 <transmit_sample_frame>
		
	}
     transmit=0;
     406:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <transmit+0x1>
     40a:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <transmit>
     40e:	08 95       	ret

00000410 <usr_frame_received_cb>:
}

// Funcion de recepcion //
void usr_frame_received_cb(frame_info_t *frame)
{
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
	memset(&trama_recibida,0,sizeof(trama_recibida));// Reserva el espacio de memoria
     414:	c3 eb       	ldi	r28, 0xB3	; 179
     416:	d4 e0       	ldi	r29, 0x04	; 4
     418:	21 e7       	ldi	r18, 0x71	; 113
     41a:	de 01       	movw	r26, r28
     41c:	1d 92       	st	X+, r1
     41e:	2a 95       	dec	r18
     420:	e9 f7       	brne	.-6      	; 0x41c <usr_frame_received_cb+0xc>
	memcpy(&trama_recibida,frame->mpdu,sizeof(trama_recibida));// Copia la informacion de la memoria fuente(buffer) al detino
     422:	dc 01       	movw	r26, r24
     424:	17 96       	adiw	r26, 0x07	; 7
     426:	ed 91       	ld	r30, X+
     428:	fc 91       	ld	r31, X
     42a:	18 97       	sbiw	r26, 0x08	; 8
     42c:	21 e7       	ldi	r18, 0x71	; 113
     42e:	de 01       	movw	r26, r28
     430:	01 90       	ld	r0, Z+
     432:	0d 92       	st	X+, r0
     434:	2a 95       	dec	r18
     436:	e1 f7       	brne	.-8      	; 0x430 <usr_frame_received_cb+0x20>
	bmm_buffer_free(frame->buffer_header);//Elimina los datos del buffer, evita superpocicion.
     438:	fc 01       	movw	r30, r24
     43a:	81 81       	ldd	r24, Z+1	; 0x01
     43c:	92 81       	ldd	r25, Z+2	; 0x02
     43e:	ba d3       	rcall	.+1908   	; 0xbb4 <bmm_buffer_free>
	
	uint16_t dirOrigen;//Direccion del mensaje Recibido
	//uint8_t msgTypeMQTT_SN;//Tipo de mensaje
	//uint8_t longitudMQTT_SN;//Longitud del mensaje 
	
	dirOrigen=trama_recibida.d_orgn;
     440:	08 84       	ldd	r0, Y+8	; 0x08
     442:	d9 85       	ldd	r29, Y+9	; 0x09
     444:	c0 2d       	mov	r28, r0
	//longitudMQTT_SN= trama_recibida.payload[0];
	//msgTypeMQTT_SN= trama_recibida.payload[1];

if (dirOrigen==0x1000 && strncmp((const char *) trama_recibida.payload, "Ruptura", 7) == 0){ // Recibe la direccion origen del nodo
     446:	c1 15       	cp	r28, r1
     448:	f0 e1       	ldi	r31, 0x10	; 16
     44a:	df 07       	cpc	r29, r31
     44c:	c9 f4       	brne	.+50     	; 0x480 <usr_frame_received_cb+0x70>
     44e:	47 e0       	ldi	r20, 0x07	; 7
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	6d e2       	ldi	r22, 0x2D	; 45
     454:	72 e0       	ldi	r23, 0x02	; 2
     456:	8d eb       	ldi	r24, 0xBD	; 189
     458:	94 e0       	ldi	r25, 0x04	; 4
     45a:	0e 94 ad 14 	call	0x295a	; 0x295a <strncmp>
     45e:	89 2b       	or	r24, r25
     460:	79 f4       	brne	.+30     	; 0x480 <usr_frame_received_cb+0x70>
	//  &&  Mediante la variable msgTypeMQTT_SN se procede a comprobar el tipo de mensaje recido.

	RupturaOrigen [8] = 'T'; // variable que determina si este nodo recibio la alerta
     462:	e5 e0       	ldi	r30, 0x05	; 5
     464:	f2 e0       	ldi	r31, 0x02	; 2
     466:	84 e5       	ldi	r24, 0x54	; 84
     468:	80 87       	std	Z+8, r24	; 0x08
	RupturaOrigen [15] =  SRC_ADDR + '0'; //agrega su direccion al mensaje
     46a:	96 e3       	ldi	r25, 0x36	; 54
     46c:	97 87       	std	Z+15, r25	; 0x0f
	//delay_ms(tiempo*SRC_ADDR);
	transmit=1;
     46e:	21 e0       	ldi	r18, 0x01	; 1
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	30 93 42 02 	sts	0x0242, r19	; 0x800242 <transmit+0x1>
     476:	20 93 41 02 	sts	0x0241, r18	; 0x800241 <transmit>
	//transmit_sample_frame((uint8_t*)RupturaOrigen, 16);	//transmite el mensaje
	sensado ='T';	//variable que determina si este nodo senso
     47a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sensado>
     47e:	4c c0       	rjmp	.+152    	; 0x518 <usr_frame_received_cb+0x108>

	//en el caso de que reciba mensaje de ruptura de un nodo a su alcance, se realiza las siguientes comprobaciones:
	
	//1.-si llega de un nodo que ya senso, no he sensado y es el anterior nodo, transmito
	
	}else if(strncmp((const char *) trama_recibida.payload, "Ruptura T", 9)==0  && sensado =='F' && dirOrigen == SRC_ADDR - 1){
     480:	49 e0       	ldi	r20, 0x09	; 9
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	65 e1       	ldi	r22, 0x15	; 21
     486:	72 e0       	ldi	r23, 0x02	; 2
     488:	8d eb       	ldi	r24, 0xBD	; 189
     48a:	94 e0       	ldi	r25, 0x04	; 4
     48c:	0e 94 ad 14 	call	0x295a	; 0x295a <strncmp>
     490:	89 2b       	or	r24, r25
     492:	71 f4       	brne	.+28     	; 0x4b0 <usr_frame_received_cb+0xa0>
     494:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sensado>
     498:	86 34       	cpi	r24, 0x46	; 70
     49a:	11 f5       	brne	.+68     	; 0x4e0 <usr_frame_received_cb+0xd0>
     49c:	c5 30       	cpi	r28, 0x05	; 5
     49e:	d1 05       	cpc	r29, r1
     4a0:	81 f5       	brne	.+96     	; 0x502 <usr_frame_received_cb+0xf2>
	
	//trama_recibida.payload[8]='F'; //Modifico el mesnaje para decir que no he sensado
	// delay_ms(tiempo*SRC_ADDR);
	transmit=2;
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <transmit+0x1>
     4aa:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <transmit>
     4ae:	34 c0       	rjmp	.+104    	; 0x518 <usr_frame_received_cb+0x108>
	//transmit_sample_frame(trama_recibida.payload,16);
	// bmm_buffer_free(frame->buffer_header);
	
	}else if(strncmp((const char *) trama_recibida.payload, "Ruptura F", 9)==0 && sensado =='F'  &&  dirOrigen == SRC_ADDR - 2){
     4b0:	49 e0       	ldi	r20, 0x09	; 9
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	6f e1       	ldi	r22, 0x1F	; 31
     4b6:	72 e0       	ldi	r23, 0x02	; 2
     4b8:	8d eb       	ldi	r24, 0xBD	; 189
     4ba:	94 e0       	ldi	r25, 0x04	; 4
     4bc:	0e 94 ad 14 	call	0x295a	; 0x295a <strncmp>
     4c0:	89 2b       	or	r24, r25
     4c2:	71 f4       	brne	.+28     	; 0x4e0 <usr_frame_received_cb+0xd0>
     4c4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sensado>
     4c8:	86 34       	cpi	r24, 0x46	; 70
     4ca:	51 f4       	brne	.+20     	; 0x4e0 <usr_frame_received_cb+0xd0>
     4cc:	c4 30       	cpi	r28, 0x04	; 4
     4ce:	d1 05       	cpc	r29, r1
     4d0:	39 f4       	brne	.+14     	; 0x4e0 <usr_frame_received_cb+0xd0>
	//si llega de un nodo que no senso, no he transmitido, y es el nodo anterior anterior, transmito y transmitir es TRUE
	//		 delay_ms(tiempo*SRC_ADDR);
	transmit=3;
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <transmit+0x1>
     4da:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <transmit>
     4de:	1c c0       	rjmp	.+56     	; 0x518 <usr_frame_received_cb+0x108>
	//transmit_sample_frame(trama_recibida.payload,16);
	//		 bmm_buffer_free(frame->buffer_header);

	}else if (dirOrigen==0x1000 && strncmp((const char *) trama_recibida.payload, "Fin Ruptura", 11) == 0){
     4e0:	c1 15       	cp	r28, r1
     4e2:	d0 41       	sbci	r29, 0x10	; 16
     4e4:	c9 f4       	brne	.+50     	; 0x518 <usr_frame_received_cb+0x108>
     4e6:	4b e0       	ldi	r20, 0x0B	; 11
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	69 e2       	ldi	r22, 0x29	; 41
     4ec:	72 e0       	ldi	r23, 0x02	; 2
     4ee:	8d eb       	ldi	r24, 0xBD	; 189
     4f0:	94 e0       	ldi	r25, 0x04	; 4
     4f2:	0e 94 ad 14 	call	0x295a	; 0x295a <strncmp>
     4f6:	89 2b       	or	r24, r25
     4f8:	79 f4       	brne	.+30     	; 0x518 <usr_frame_received_cb+0x108>

	sensado ='F';
     4fa:	86 e4       	ldi	r24, 0x46	; 70
     4fc:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sensado>
	//bmm_buffer_free(frame->buffer_header);
	
}

}
     500:	0b c0       	rjmp	.+22     	; 0x518 <usr_frame_received_cb+0x108>
	// delay_ms(tiempo*SRC_ADDR);
	transmit=2;
	//transmit_sample_frame(trama_recibida.payload,16);
	// bmm_buffer_free(frame->buffer_header);
	
	}else if(strncmp((const char *) trama_recibida.payload, "Ruptura F", 9)==0 && sensado =='F'  &&  dirOrigen == SRC_ADDR - 2){
     502:	49 e0       	ldi	r20, 0x09	; 9
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	6f e1       	ldi	r22, 0x1F	; 31
     508:	72 e0       	ldi	r23, 0x02	; 2
     50a:	8d eb       	ldi	r24, 0xBD	; 189
     50c:	94 e0       	ldi	r25, 0x04	; 4
     50e:	0e 94 ad 14 	call	0x295a	; 0x295a <strncmp>
     512:	89 2b       	or	r24, r25
     514:	d9 f2       	breq	.-74     	; 0x4cc <usr_frame_received_cb+0xbc>
     516:	e4 cf       	rjmp	.-56     	; 0x4e0 <usr_frame_received_cb+0xd0>
	sensado ='F';
	//bmm_buffer_free(frame->buffer_header);
	
}

}
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <usr_frame_transmitted_cb>:


void usr_frame_transmitted_cb(retval_t status, frame_info_t *frame)
{
     51e:	08 95       	ret

00000520 <app_timers_init>:
 * \brief This function initializes the App timers
 * (T_APP_TIMER1 is the only timer added by the project wizard,add extra timers based on the application requirement)
 */
void app_timers_init(void)
{
	if (STATUS_OK != sw_timer_get_id(&T_APP_TIMER1)) {
     520:	88 e2       	ldi	r24, 0x28	; 40
     522:	95 e0       	ldi	r25, 0x05	; 5
     524:	95 d2       	rcall	.+1322   	; 0xa50 <sw_timer_get_id>
     526:	81 11       	cpse	r24, r1
		app_alert();
     528:	18 c1       	rjmp	.+560    	; 0x75a <app_alert>
     52a:	08 95       	ret

0000052c <transmit_frame>:
     52c:	4f 92       	push	r4
		uint8_t src_addr_mode,
		uint8_t msdu_handle,
		uint8_t *payload,
		uint8_t payload_length,
		bool ack_req,csma_mode_t csma_mode ,bool frame_retry)
{
     52e:	5f 92       	push	r5
     530:	6f 92       	push	r6
     532:	7f 92       	push	r7
     534:	8f 92       	push	r8
     536:	af 92       	push	r10
     538:	cf 92       	push	r12
     53a:	ef 92       	push	r14
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 

	/* Set payload pointer. */     
	frame_ptr = temp_frame_ptr = (uint8_t *)tx_frame_info +
     548:	a9 e8       	ldi	r26, 0x89	; 137
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	ae 19       	sub	r26, r14
     54e:	b1 09       	sbc	r27, r1
     550:	fd 01       	movw	r30, r26
     552:	eb 5b       	subi	r30, 0xBB	; 187
     554:	fd 4f       	sbci	r31, 0xFD	; 253
     556:	3f 01       	movw	r6, r30

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     558:	ee 20       	and	r14, r14
     55a:	79 f0       	breq	.+30     	; 0x57a <transmit_frame+0x4e>
     55c:	d8 01       	movw	r26, r16
     55e:	44 24       	eor	r4, r4
     560:	4a 94       	dec	r4
     562:	4e 0c       	add	r4, r14
     564:	51 2c       	mov	r5, r1
     566:	9f ef       	ldi	r25, 0xFF	; 255
     568:	49 1a       	sub	r4, r25
     56a:	59 0a       	sbc	r5, r25
     56c:	04 0d       	add	r16, r4
     56e:	15 1d       	adc	r17, r5
	*temp_frame_ptr++ = *(payload + i);
     570:	9d 91       	ld	r25, X+
     572:	91 93       	st	Z+, r25

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     574:	a0 17       	cp	r26, r16
     576:	b1 07       	cpc	r27, r17
     578:	d9 f7       	brne	.-10     	; 0x570 <transmit_frame+0x44>
	*temp_frame_ptr++ = *(payload + i);
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
     57a:	42 30       	cpi	r20, 0x02	; 2
     57c:	61 f4       	brne	.+24     	; 0x596 <transmit_frame+0x6a>
	uint16_t temp_value,fcf = 0;
	/* Get length of current frame. */

	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 
     57e:	3b e0       	ldi	r19, 0x0B	; 11
     580:	3e 0d       	add	r19, r14
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
	frame_ptr -= SHORT_ADDR_LEN;
     582:	d3 01       	movw	r26, r6
	convert_16_bit_to_byte_array(tal_pib.ShortAddress, frame_ptr);
     584:	40 91 74 05 	lds	r20, 0x0574	; 0x800574 <tal_pib+0xc>
     588:	50 91 75 05 	lds	r21, 0x0575	; 0x800575 <tal_pib+0xd>
     58c:	5e 93       	st	-X, r21
     58e:	4e 93       	st	-X, r20

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_SHORT_ADDR);
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	50 e8       	ldi	r21, 0x80	; 128
     594:	26 c0       	rjmp	.+76     	; 0x5e2 <transmit_frame+0xb6>
	} else {
	frame_ptr -= EXT_ADDR_LEN;
     596:	d3 01       	movw	r26, r6
     598:	18 97       	sbiw	r26, 0x08	; 8
	frame_length += FCF_2_SOURCE_ADDR_OFFSET;
     59a:	31 e1       	ldi	r19, 0x11	; 17
     59c:	3e 0d       	add	r19, r14

	convert_64_bit_to_byte_array(tal_pib.IeeeAddress, frame_ptr);
     59e:	e8 e6       	ldi	r30, 0x68	; 104
     5a0:	f5 e0       	ldi	r31, 0x05	; 5
     5a2:	90 81       	ld	r25, Z
     5a4:	9c 93       	st	X, r25
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	11 96       	adiw	r26, 0x01	; 1
     5aa:	9c 93       	st	X, r25
     5ac:	11 97       	sbiw	r26, 0x01	; 1
     5ae:	92 81       	ldd	r25, Z+2	; 0x02
     5b0:	12 96       	adiw	r26, 0x02	; 2
     5b2:	9c 93       	st	X, r25
     5b4:	12 97       	sbiw	r26, 0x02	; 2
     5b6:	93 81       	ldd	r25, Z+3	; 0x03
     5b8:	13 96       	adiw	r26, 0x03	; 3
     5ba:	9c 93       	st	X, r25
     5bc:	13 97       	sbiw	r26, 0x03	; 3
     5be:	94 81       	ldd	r25, Z+4	; 0x04
     5c0:	14 96       	adiw	r26, 0x04	; 4
     5c2:	9c 93       	st	X, r25
     5c4:	14 97       	sbiw	r26, 0x04	; 4
     5c6:	95 81       	ldd	r25, Z+5	; 0x05
     5c8:	15 96       	adiw	r26, 0x05	; 5
     5ca:	9c 93       	st	X, r25
     5cc:	15 97       	sbiw	r26, 0x05	; 5
     5ce:	96 81       	ldd	r25, Z+6	; 0x06
     5d0:	16 96       	adiw	r26, 0x06	; 6
     5d2:	9c 93       	st	X, r25
     5d4:	16 97       	sbiw	r26, 0x06	; 6
     5d6:	97 81       	ldd	r25, Z+7	; 0x07
     5d8:	17 96       	adiw	r26, 0x07	; 7
     5da:	9c 93       	st	X, r25
     5dc:	17 97       	sbiw	r26, 0x07	; 7

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR);
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	50 ec       	ldi	r21, 0xC0	; 192
		temp_value = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
		convert_16_bit_to_byte_array(temp_value, frame_ptr);
		#endif

	/* Destination address */
	if (FCF_SHORT_ADDR == dst_addr_mode) {
     5e2:	82 30       	cpi	r24, 0x02	; 2
     5e4:	59 f4       	brne	.+22     	; 0x5fc <transmit_frame+0xd0>
		frame_ptr -= SHORT_ADDR_LEN;
		convert_16_bit_to_byte_array(*((uint16_t *)dst_addr),
     5e6:	fb 01       	movw	r30, r22
     5e8:	80 81       	ld	r24, Z
     5ea:	91 81       	ldd	r25, Z+1	; 0x01
     5ec:	fd 01       	movw	r30, r26
     5ee:	92 93       	st	-Z, r25
     5f0:	82 93       	st	-Z, r24
     5f2:	3f 01       	movw	r6, r30
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR);
     5f4:	ca 01       	movw	r24, r20
     5f6:	80 64       	ori	r24, 0x40	; 64
     5f8:	98 60       	ori	r25, 0x08	; 8
     5fa:	0f c0       	rjmp	.+30     	; 0x61a <transmit_frame+0xee>
	} else {
		frame_ptr -= EXT_ADDR_LEN;
     5fc:	3d 01       	movw	r6, r26
     5fe:	f8 e0       	ldi	r31, 0x08	; 8
     600:	6f 1a       	sub	r6, r31
     602:	71 08       	sbc	r7, r1
		frame_length += PL_POS_DST_ADDR_START;
     604:	3a 5f       	subi	r19, 0xFA	; 250

		convert_64_bit_to_byte_array(*((uint64_t *)dst_addr),
     606:	88 e0       	ldi	r24, 0x08	; 8
     608:	fb 01       	movw	r30, r22
     60a:	d3 01       	movw	r26, r6
     60c:	01 90       	ld	r0, Z+
     60e:	0d 92       	st	X+, r0
     610:	8a 95       	dec	r24
     612:	e1 f7       	brne	.-8      	; 0x60c <transmit_frame+0xe0>
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR);
     614:	ca 01       	movw	r24, r20
     616:	80 64       	ori	r24, 0x40	; 64
     618:	9c 60       	ori	r25, 0x0C	; 12


	/* Destination PAN-Id */
	temp_value = CCPU_ENDIAN_TO_LE16(DST_PAN_ID);
	frame_ptr -= PAN_ID_LEN;
	convert_16_bit_to_byte_array(temp_value, frame_ptr);
     61a:	4e ef       	ldi	r20, 0xFE	; 254
     61c:	5a ec       	ldi	r21, 0xCA	; 202
     61e:	f3 01       	movw	r30, r6
     620:	32 97       	sbiw	r30, 0x02	; 2
     622:	51 83       	std	Z+1, r21	; 0x01
     624:	40 83       	st	Z, r20

	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	20 83       	st	Z, r18

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
	if (ack_req) {
     62a:	c1 10       	cpse	r12, r1
     62c:	02 c0       	rjmp	.+4      	; 0x632 <transmit_frame+0x106>
	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
     62e:	81 60       	ori	r24, 0x01	; 1
     630:	01 c0       	rjmp	.+2      	; 0x634 <transmit_frame+0x108>
	if (ack_req) {
	fcf |= FCF_ACK_REQUEST;
     632:	81 62       	ori	r24, 0x21	; 33
	}

	frame_ptr -= FCF_LEN;
	convert_16_bit_to_byte_array(CCPU_ENDIAN_TO_LE16(fcf), frame_ptr);
     634:	f3 01       	movw	r30, r6
     636:	35 97       	sbiw	r30, 0x05	; 5
     638:	91 83       	std	Z+1, r25	; 0x01
     63a:	80 83       	st	Z, r24

	/* First element shall be length of PHY frame. */
	frame_ptr--;
	*frame_ptr = frame_length;
     63c:	d3 01       	movw	r26, r6
     63e:	16 97       	sbiw	r26, 0x06	; 6
     640:	3c 93       	st	X, r19

	/* Finished building of frame. */
	tx_frame_info->mpdu = frame_ptr;
     642:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <storage_buffer+0x8>
     646:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <storage_buffer+0x7>

	return(tal_tx_frame(tx_frame_info, csma_mode, frame_retry));
     64a:	48 2d       	mov	r20, r8
     64c:	6a 2d       	mov	r22, r10
     64e:	85 e4       	ldi	r24, 0x45	; 69
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0e 94 76 0e 	call	0x1cec	; 0x1cec <tal_tx_frame>
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ef 90       	pop	r14
     660:	cf 90       	pop	r12
     662:	af 90       	pop	r10
     664:	8f 90       	pop	r8
     666:	7f 90       	pop	r7
     668:	6f 90       	pop	r6
     66a:	5f 90       	pop	r5
     66c:	4f 90       	pop	r4
     66e:	08 95       	ret

00000670 <transmit_sample_frame>:
 * \brief This function transmits a sample data frame 
 * \param payload address of the payload to be transmitted
 * \payload_length Length of the payload to be trasnmitted *
 */
void transmit_sample_frame(uint8_t* payload,uint8_t payload_length) 
{
     670:	8f 92       	push	r8
     672:	af 92       	push	r10
     674:	cf 92       	push	r12
     676:	ef 92       	push	r14
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	1f 92       	push	r1
     682:	1f 92       	push	r1
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
	static uint16_t seq_num = 0;   
	bool ack_req = ACK_REQ;
	bool frame_retry = FRAME_RETRY;
	csma_mode_t csma_mode = CSMA_MODE;
	uint16_t dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)DST_ADDR);
     688:	2f ef       	ldi	r18, 0xFF	; 255
     68a:	3f ef       	ldi	r19, 0xFF	; 255
     68c:	3a 83       	std	Y+2, r19	; 0x02
     68e:	29 83       	std	Y+1, r18	; 0x01

	transmit_frame(
		FCF_SHORT_ADDR,
		(uint8_t*)&dst_addr,
		FCF_SHORT_ADDR,
		seq_num++,
     690:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <seq_num.3027>
     694:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <seq_num.3027+0x1>
     698:	a9 01       	movw	r20, r18
     69a:	4f 5f       	subi	r20, 0xFF	; 255
     69c:	5f 4f       	sbci	r21, 0xFF	; 255
     69e:	50 93 44 02 	sts	0x0244, r21	; 0x800244 <seq_num.3027+0x1>
     6a2:	40 93 43 02 	sts	0x0243, r20	; 0x800243 <seq_num.3027>
	bool ack_req = ACK_REQ;
	bool frame_retry = FRAME_RETRY;
	csma_mode_t csma_mode = CSMA_MODE;
	uint16_t dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)DST_ADDR);

	transmit_frame(
     6a6:	81 2c       	mov	r8, r1
     6a8:	68 94       	set
     6aa:	aa 24       	eor	r10, r10
     6ac:	a1 f8       	bld	r10, 1
     6ae:	c1 2c       	mov	r12, r1
     6b0:	e6 2e       	mov	r14, r22
     6b2:	8c 01       	movw	r16, r24
     6b4:	42 e0       	ldi	r20, 0x02	; 2
     6b6:	be 01       	movw	r22, r28
     6b8:	6f 5f       	subi	r22, 0xFF	; 255
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	36 df       	rcall	.-404    	; 0x52c <transmit_frame>
		payload_length,
		ack_req,
		csma_mode,
		frame_retry);

}
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ef 90       	pop	r14
     6ce:	cf 90       	pop	r12
     6d0:	af 90       	pop	r10
     6d2:	8f 90       	pop	r8
     6d4:	08 95       	ret

000006d6 <init_data_reception>:
		   bool mode = true;
		   tal_rxaack_prom_mode_ctrl(true);
		   tal_pib_set(macPromiscuousMode, (pib_value_t *)&mode);
       #endif
       /*RX_AACK_ON Mode is enabled if Promiscuous Mode is not used,else RX is switched on in RX_ON Mode*/
       tal_rx_enable(PHY_RX_ON); 
     6d6:	86 e0       	ldi	r24, 0x06	; 6
     6d8:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <tal_rx_enable>
     6dc:	08 95       	ret

000006de <wireless_init>:

/**
 * \brief This Function initializes the Wireless Module and board components i.e clock,irq etc
 */
void wireless_init(void)
{
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <wireless_init+0x6>
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <wireless_init+0x8>
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
	/*Initialize IRQ*/
	irq_initialize_vectors();

  sysclk_init();
     6ea:	3b d0       	rcall	.+118    	; 0x762 <sysclk_init>

	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     6ec:	37 d0       	rcall	.+110    	; 0x75c <board_init>


	/*Initialize the Stack SW Timer*/
	sw_timer_init();
     6ee:	bd d1       	rcall	.+890    	; 0xa6a <sw_timer_init>
     6f0:	8e d5       	rcall	.+2844   	; 0x120e <tal_init>
	
	/*Initialize the TAL Layer*/
	if(tal_init()!= MAC_SUCCESS)
     6f2:	81 11       	cpse	r24, r1
     6f4:	ff cf       	rjmp	.-2      	; 0x6f4 <wireless_init+0x16>
     6f6:	78 94       	sei
     6f8:	86 e0       	ldi	r24, 0x06	; 6
	{
	//Error in Initializing the TAL Layer
	app_alert();	
	}
	cpu_irq_enable();
     6fa:	90 e0       	ldi	r25, 0x00	; 0
	//tal_pib_set(macShortAddress, (pib_value_t *)&var); asignar nombre
	
	
	
	
	uint16_t src_addr = CCPU_ENDIAN_TO_LE16(SRC_ADDR);
     6fc:	9a 83       	std	Y+2, r25	; 0x02
     6fe:	89 83       	std	Y+1, r24	; 0x01
     700:	8e ef       	ldi	r24, 0xFE	; 254
     702:	9a ec       	ldi	r25, 0xCA	; 202
	uint16_t pan_id = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	8b 83       	std	Y+3, r24	; 0x03
     708:	8b e0       	ldi	r24, 0x0B	; 11
     70a:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t channel = CHANNEL_TRANSMIT_RECEIVE;
     70c:	1e 82       	std	Y+6, r1	; 0x06
     70e:	be 01       	movw	r22, r28
	uint8_t channel_page = CHANNEL_PAGE_TRANSMIT_RECEIVE;
     710:	6f 5f       	subi	r22, 0xFF	; 255
	
	/* Set Default address. */
	tal_pib_set(macShortAddress, (pib_value_t *)&src_addr);
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	83 e5       	ldi	r24, 0x53	; 83
     716:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <tal_pib_set>
     71a:	be 01       	movw	r22, r28
     71c:	6d 5f       	subi	r22, 0xFD	; 253

	/* Set PAN ID. */
	tal_pib_set(macPANId, (pib_value_t *)&pan_id);
     71e:	7f 4f       	sbci	r23, 0xFF	; 255
     720:	80 e5       	ldi	r24, 0x50	; 80
     722:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <tal_pib_set>
     726:	be 01       	movw	r22, r28
     728:	6b 5f       	subi	r22, 0xFB	; 251

	/* Set channel. */ /* Channel 11  is set as default in tal_init() */
	tal_pib_set(phyCurrentChannel, (pib_value_t *)&channel);
     72a:	7f 4f       	sbci	r23, 0xFF	; 255
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <tal_pib_set>
     732:	be 01       	movw	r22, r28
     734:	6a 5f       	subi	r22, 0xFA	; 250
	
	/* Set Channel Page */ /* Channel Page 0  is set as default in tal_init() */
	tal_pib_set(phyCurrentPage,(pib_value_t *)&channel_page);
     736:	7f 4f       	sbci	r23, 0xFF	; 255
     738:	84 e0       	ldi	r24, 0x04	; 4
     73a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <tal_pib_set>
     73e:	62 e0       	ldi	r22, 0x02	; 2
     740:	80 e0       	ldi	r24, 0x00	; 0
    {
	    tal_ant_div_config(ANT_DIVERSITY_ENABLE,ANTENNA_DEFAULT);
    }
    else
    {
	    tal_ant_div_config(ANT_DIVERSITY_DISABLE,ANT_SELECT); 
     742:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <tal_ant_div_config>
     746:	c7 df       	rcall	.-114    	; 0x6d6 <init_data_reception>
    }
    #endif


	init_data_reception();
     748:	26 96       	adiw	r28, 0x06	; 6
     74a:	0f b6       	in	r0, 0x3f	; 63

}
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <app_alert>:
     75a:	ff cf       	rjmp	.-2      	; 0x75a <app_alert>

0000075c <board_init>:

/**
 * \brief Initializes the board components
 */
void board_init(void)
{
     75c:	08 95       	ret

0000075e <modules_init>:
/**
 * \brief Initializes the modules added by the Project Wizard
 */
void modules_init(void)
{
	    app_timers_init();
     75e:	e0 ce       	rjmp	.-576    	; 0x520 <app_timers_init>
     760:	08 95       	ret

00000762 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	1f 92       	push	r1
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     76c:	8f ef       	ldi	r24, 0xFF	; 255
     76e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7c0064>
     772:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7c0065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     776:	8f b7       	in	r24, 0x3f	; 63
     778:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     77a:	f8 94       	cli
	return flags;
     77c:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     77e:	5f 93       	push	r21
     780:	50 e8       	ldi	r21, 0x80	; 128
     782:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     78c:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     78e:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     790:	0f 90       	pop	r0
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	1f 92       	push	r1
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7a2:	9f b7       	in	r25, 0x3f	; 63
     7a4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     7a6:	f8 94       	cli
	return flags;
     7a8:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     7aa:	82 30       	cpi	r24, 0x02	; 2
     7ac:	40 f4       	brcc	.+16     	; 0x7be <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     7ae:	e8 2f       	mov	r30, r24
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ec 59       	subi	r30, 0x9C	; 156
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	60 95       	com	r22
     7b8:	80 81       	ld	r24, Z
     7ba:	68 23       	and	r22, r24
     7bc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7be:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	1f 92       	push	r1
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7d2:	9f b7       	in	r25, 0x3f	; 63
     7d4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     7d6:	f8 94       	cli
	return flags;
     7d8:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	38 f4       	brcc	.+14     	; 0x7ec <sysclk_disable_module+0x24>
		*(reg + port) |= id;
     7de:	e8 2f       	mov	r30, r24
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	ec 59       	subi	r30, 0x9C	; 156
     7e4:	ff 4f       	sbci	r31, 0xFF	; 255
     7e6:	80 81       	ld	r24, Z
     7e8:	68 2b       	or	r22, r24
     7ea:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7ec:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     7ee:	0f 90       	pop	r0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <hw_expiry_cb>:
uint32_t sw_timer_next_timer_expiry_duration(void)
{
	return ((NO_TIMER ==
	       running_timer_queue_head) ? false : (sw_timer_get_residual_time(
	       running_timer_queue_head)));
}
     7f6:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <running_timers>
     7fa:	88 23       	and	r24, r24
     7fc:	19 f0       	breq	.+6      	; 0x804 <hw_expiry_cb+0xe>
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <timer_trigger>
     804:	08 95       	ret

00000806 <hw_overflow_cb>:
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	1f 92       	push	r1
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <sys_time>
     816:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <sys_time+0x1>
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	90 93 2c 05 	sts	0x052C, r25	; 0x80052c <sys_time+0x1>
     820:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <sys_time>
     824:	8f b7       	in	r24, 0x3f	; 63
     826:	89 83       	std	Y+1, r24	; 0x01
     828:	f8 94       	cli
     82a:	19 81       	ldd	r17, Y+1	; 0x01
     82c:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <running_timer_queue_head>
     830:	8f 3f       	cpi	r24, 0xFF	; 255
     832:	e9 f1       	breq	.+122    	; 0x8ae <hw_overflow_cb+0xa8>
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	fc 01       	movw	r30, r24
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	9c 01       	movw	r18, r24
     83e:	22 0f       	add	r18, r18
     840:	33 1f       	adc	r19, r19
     842:	22 0f       	add	r18, r18
     844:	33 1f       	adc	r19, r19
     846:	22 0f       	add	r18, r18
     848:	33 1f       	adc	r19, r19
     84a:	e2 0f       	add	r30, r18
     84c:	f3 1f       	adc	r31, r19
     84e:	e3 5d       	subi	r30, 0xD3	; 211
     850:	fa 4f       	sbci	r31, 0xFA	; 250
     852:	21 85       	ldd	r18, Z+9	; 0x09
     854:	21 11       	cpse	r18, r1
     856:	2b c0       	rjmp	.+86     	; 0x8ae <hw_overflow_cb+0xa8>
     858:	fc 01       	movw	r30, r24
     85a:	ee 0f       	add	r30, r30
     85c:	ff 1f       	adc	r31, r31
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	e8 0f       	add	r30, r24
     86c:	f9 1f       	adc	r31, r25
     86e:	e3 5d       	subi	r30, 0xD3	; 211
     870:	fa 4f       	sbci	r31, 0xFA	; 250
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	a2 81       	ldd	r26, Z+2	; 0x02
     878:	b3 81       	ldd	r27, Z+3	; 0x03
     87a:	20 91 2b 05 	lds	r18, 0x052B	; 0x80052b <sys_time>
     87e:	30 91 2c 05 	lds	r19, 0x052C	; 0x80052c <sys_time+0x1>
     882:	2a 17       	cp	r18, r26
     884:	3b 07       	cpc	r19, r27
     886:	99 f4       	brne	.+38     	; 0x8ae <hw_overflow_cb+0xa8>
     888:	d9 dc       	rcall	.-1614   	; 0x23c <common_tc_delay>
     88a:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <running_timer_queue_head>
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	fc 01       	movw	r30, r24
     892:	ee 0f       	add	r30, r30
     894:	ff 1f       	adc	r31, r31
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	e8 0f       	add	r30, r24
     8a4:	f9 1f       	adc	r31, r25
     8a6:	e3 5d       	subi	r30, 0xD3	; 211
     8a8:	fa 4f       	sbci	r31, 0xFA	; 250
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	81 87       	std	Z+9, r24	; 0x09
     8ae:	1f bf       	out	0x3f, r17	; 63
     8b0:	0f 90       	pop	r0
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	08 95       	ret

000008ba <load_hw_timer>:
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	c8 2f       	mov	r28, r24
     8c4:	8f 3f       	cpi	r24, 0xFF	; 255
     8c6:	09 f4       	brne	.+2      	; 0x8ca <load_hw_timer+0x10>
     8c8:	60 c0       	rjmp	.+192    	; 0x98a <load_hw_timer+0xd0>
     8ca:	00 91 2b 05 	lds	r16, 0x052B	; 0x80052b <sys_time>
     8ce:	10 91 2c 05 	lds	r17, 0x052C	; 0x80052c <sys_time+0x1>
     8d2:	71 dc       	rcall	.-1822   	; 0x1b6 <common_tc_read_count>
     8d4:	40 91 2b 05 	lds	r20, 0x052B	; 0x80052b <sys_time>
     8d8:	50 91 2c 05 	lds	r21, 0x052C	; 0x80052c <sys_time+0x1>
     8dc:	04 17       	cp	r16, r20
     8de:	15 07       	cpc	r17, r21
     8e0:	a1 f7       	brne	.-24     	; 0x8ca <load_hw_timer+0x10>
     8e2:	d0 e0       	ldi	r29, 0x00	; 0
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	fe 01       	movw	r30, r28
     8ea:	ee 0f       	add	r30, r30
     8ec:	ff 1f       	adc	r31, r31
     8ee:	9e 01       	movw	r18, r28
     8f0:	22 0f       	add	r18, r18
     8f2:	33 1f       	adc	r19, r19
     8f4:	22 0f       	add	r18, r18
     8f6:	33 1f       	adc	r19, r19
     8f8:	22 0f       	add	r18, r18
     8fa:	33 1f       	adc	r19, r19
     8fc:	e2 0f       	add	r30, r18
     8fe:	f3 1f       	adc	r31, r19
     900:	e3 5d       	subi	r30, 0xD3	; 211
     902:	fa 4f       	sbci	r31, 0xFA	; 250
     904:	ba 01       	movw	r22, r20
     906:	55 27       	eor	r21, r21
     908:	44 27       	eor	r20, r20
     90a:	a0 e0       	ldi	r26, 0x00	; 0
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	48 2b       	or	r20, r24
     910:	59 2b       	or	r21, r25
     912:	6a 2b       	or	r22, r26
     914:	7b 2b       	or	r23, r27
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	a2 81       	ldd	r26, Z+2	; 0x02
     91c:	b3 81       	ldd	r27, Z+3	; 0x03
     91e:	84 1b       	sub	r24, r20
     920:	95 0b       	sbc	r25, r21
     922:	a6 0b       	sbc	r26, r22
     924:	b7 0b       	sbc	r27, r23
     926:	8f 3f       	cpi	r24, 0xFF	; 255
     928:	2f ef       	ldi	r18, 0xFF	; 255
     92a:	92 07       	cpc	r25, r18
     92c:	a2 07       	cpc	r26, r18
     92e:	2f e7       	ldi	r18, 0x7F	; 127
     930:	b2 07       	cpc	r27, r18
     932:	38 f5       	brcc	.+78     	; 0x982 <load_hw_timer+0xc8>
     934:	9e 01       	movw	r18, r28
     936:	22 0f       	add	r18, r18
     938:	33 1f       	adc	r19, r19
     93a:	22 0f       	add	r18, r18
     93c:	33 1f       	adc	r19, r19
     93e:	22 0f       	add	r18, r18
     940:	33 1f       	adc	r19, r19
     942:	fe 01       	movw	r30, r28
     944:	ee 0f       	add	r30, r30
     946:	ff 1f       	adc	r31, r31
     948:	e2 0f       	add	r30, r18
     94a:	f3 1f       	adc	r31, r19
     94c:	e3 5d       	subi	r30, 0xD3	; 211
     94e:	fa 4f       	sbci	r31, 0xFA	; 250
     950:	21 85       	ldd	r18, Z+9	; 0x09
     952:	21 11       	cpse	r18, r1
     954:	1b c0       	rjmp	.+54     	; 0x98c <load_hw_timer+0xd2>
     956:	00 97       	sbiw	r24, 0x00	; 0
     958:	21 e0       	ldi	r18, 0x01	; 1
     95a:	a2 07       	cpc	r26, r18
     95c:	b1 05       	cpc	r27, r1
     95e:	b0 f4       	brcc	.+44     	; 0x98c <load_hw_timer+0xd2>
     960:	6d dc       	rcall	.-1830   	; 0x23c <common_tc_delay>
     962:	ce 01       	movw	r24, r28
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	cc 0f       	add	r28, r28
     96a:	dd 1f       	adc	r29, r29
     96c:	cc 0f       	add	r28, r28
     96e:	dd 1f       	adc	r29, r29
     970:	cc 0f       	add	r28, r28
     972:	dd 1f       	adc	r29, r29
     974:	c8 0f       	add	r28, r24
     976:	d9 1f       	adc	r29, r25
     978:	c3 5d       	subi	r28, 0xD3	; 211
     97a:	da 4f       	sbci	r29, 0xFA	; 250
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	89 87       	std	Y+9, r24	; 0x09
     980:	05 c0       	rjmp	.+10     	; 0x98c <load_hw_timer+0xd2>
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <timer_trigger>
     988:	01 c0       	rjmp	.+2      	; 0x98c <load_hw_timer+0xd2>
     98a:	3d dc       	rcall	.-1926   	; 0x206 <common_tc_compare_stop>
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <internal_timer_handler>:
     996:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <timer_trigger>
     99a:	88 23       	and	r24, r24
     99c:	09 f4       	brne	.+2      	; 0x9a0 <internal_timer_handler+0xa>
     99e:	57 c0       	rjmp	.+174    	; 0xa4e <internal_timer_handler+0xb8>
     9a0:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <timer_trigger>
     9a4:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <running_timers>
     9a8:	88 23       	and	r24, r24
     9aa:	09 f4       	brne	.+2      	; 0x9ae <internal_timer_handler+0x18>
     9ac:	50 c0       	rjmp	.+160    	; 0xa4e <internal_timer_handler+0xb8>
     9ae:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <expired_timer_queue_head>
     9b2:	8f 3f       	cpi	r24, 0xFF	; 255
     9b4:	59 f4       	brne	.+22     	; 0x9cc <internal_timer_handler+0x36>
     9b6:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <expired_timer_queue_tail>
     9ba:	8f 3f       	cpi	r24, 0xFF	; 255
     9bc:	39 f4       	brne	.+14     	; 0x9cc <internal_timer_handler+0x36>
     9be:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <running_timer_queue_head>
     9c2:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <expired_timer_queue_tail>
     9c6:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <expired_timer_queue_head>
     9ca:	15 c0       	rjmp	.+42     	; 0x9f6 <internal_timer_handler+0x60>
     9cc:	20 91 d3 02 	lds	r18, 0x02D3	; 0x8002d3 <running_timer_queue_head>
     9d0:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <expired_timer_queue_tail>
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	fc 01       	movw	r30, r24
     9d8:	ee 0f       	add	r30, r30
     9da:	ff 1f       	adc	r31, r31
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	e8 0f       	add	r30, r24
     9ea:	f9 1f       	adc	r31, r25
     9ec:	e3 5d       	subi	r30, 0xD3	; 211
     9ee:	fa 4f       	sbci	r31, 0xFA	; 250
     9f0:	20 87       	std	Z+8, r18	; 0x08
     9f2:	20 93 d1 02 	sts	0x02D1, r18	; 0x8002d1 <expired_timer_queue_tail>
     9f6:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <running_timer_queue_head>
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	fc 01       	movw	r30, r24
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	e8 0f       	add	r30, r24
     a10:	f9 1f       	adc	r31, r25
     a12:	e3 5d       	subi	r30, 0xD3	; 211
     a14:	fa 4f       	sbci	r31, 0xFA	; 250
     a16:	80 85       	ldd	r24, Z+8	; 0x08
     a18:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <running_timer_queue_head>
     a1c:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <expired_timer_queue_tail>
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	f9 01       	movw	r30, r18
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	22 0f       	add	r18, r18
     a2a:	33 1f       	adc	r19, r19
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	22 0f       	add	r18, r18
     a32:	33 1f       	adc	r19, r19
     a34:	e2 0f       	add	r30, r18
     a36:	f3 1f       	adc	r31, r19
     a38:	e3 5d       	subi	r30, 0xD3	; 211
     a3a:	fa 4f       	sbci	r31, 0xFA	; 250
     a3c:	9f ef       	ldi	r25, 0xFF	; 255
     a3e:	90 87       	std	Z+8, r25	; 0x08
     a40:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <running_timers>
     a44:	91 50       	subi	r25, 0x01	; 1
     a46:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <running_timers>
     a4a:	91 11       	cpse	r25, r1
     a4c:	36 cf       	rjmp	.-404    	; 0x8ba <load_hw_timer>
     a4e:	08 95       	ret

00000a50 <sw_timer_get_id>:
     a50:	fc 01       	movw	r30, r24
     a52:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <alloc_timer_id>
     a56:	95 30       	cpi	r25, 0x05	; 5
     a58:	30 f4       	brcc	.+12     	; 0xa66 <sw_timer_get_id+0x16>
     a5a:	90 83       	st	Z, r25
     a5c:	9f 5f       	subi	r25, 0xFF	; 255
     a5e:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <alloc_timer_id>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	08 95       	ret
     a66:	84 ef       	ldi	r24, 0xF4	; 244
     a68:	08 95       	ret

00000a6a <sw_timer_init>:
	 * Initialize the timer resources like timer arrays
	 * queues, timer registers
	 */
	uint8_t index;

	running_timers = 0;
     a6a:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <running_timers>
	timer_trigger = false;
     a6e:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <timer_trigger>
	sys_time = 0;
     a72:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <sys_time+0x1>
     a76:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <sys_time>

	running_timer_queue_head = NO_TIMER;
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <running_timer_queue_head>
	expired_timer_queue_head = NO_TIMER;
     a80:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <expired_timer_queue_head>
	expired_timer_queue_tail = NO_TIMER;
     a84:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <expired_timer_queue_tail>
     a88:	ed e2       	ldi	r30, 0x2D	; 45
     a8a:	f5 e0       	ldi	r31, 0x05	; 5
     a8c:	2f e5       	ldi	r18, 0x5F	; 95
     a8e:	35 e0       	ldi	r19, 0x05	; 5

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
		timer_array[index].next_timer_in_queue = NO_TIMER;
     a90:	80 87       	std	Z+8, r24	; 0x08
		timer_array[index].timer_cb = NULL;
     a92:	15 82       	std	Z+5, r1	; 0x05
     a94:	14 82       	std	Z+4, r1	; 0x04
     a96:	3a 96       	adiw	r30, 0x0a	; 10

	running_timer_queue_head = NO_TIMER;
	expired_timer_queue_head = NO_TIMER;
	expired_timer_queue_tail = NO_TIMER;

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
     a98:	e2 17       	cp	r30, r18
     a9a:	f3 07       	cpc	r31, r19
     a9c:	c9 f7       	brne	.-14     	; 0xa90 <sw_timer_init+0x26>
		timer_array[index].next_timer_in_queue = NO_TIMER;
		timer_array[index].timer_cb = NULL;
	}

	alloc_timer_id = 0;
     a9e:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <alloc_timer_id>
	set_common_tc_overflow_callback(hw_overflow_cb);
     aa2:	83 e0       	ldi	r24, 0x03	; 3
     aa4:	94 e0       	ldi	r25, 0x04	; 4
     aa6:	88 dc       	rcall	.-1776   	; 0x3b8 <set_common_tc_overflow_callback>
	set_common_tc_expiry_callback(hw_expiry_cb);
     aa8:	8b ef       	ldi	r24, 0xFB	; 251
     aaa:	93 e0       	ldi	r25, 0x03	; 3
	common_tc_init();
     aac:	8a dc       	rcall	.-1772   	; 0x3c2 <set_common_tc_expiry_callback>
     aae:	3b cc       	rjmp	.-1930   	; 0x326 <common_tc_init>
     ab0:	08 95       	ret

00000ab2 <sw_timer_service>:
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}

void sw_timer_service(void)
{
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	1f 92       	push	r1
     abc:	1f 92       	push	r1
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ac2:	8f b7       	in	r24, 0x3f	; 63
     ac4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     ac6:	f8 94       	cli
	return flags;
     ac8:	1a 81       	ldd	r17, Y+2	; 0x02
#if (TOTAL_NUMBER_OF_SW_TIMERS > 0)
	uint8_t flags = cpu_irq_save();
	internal_timer_handler();
     aca:	65 df       	rcall	.-310    	; 0x996 <internal_timer_handler>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     acc:	1f bf       	out	0x3f, r17	; 63
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
     ace:	1f ef       	ldi	r17, 0xFF	; 255
     ad0:	01 2f       	mov	r16, r17
     ad2:	37 c0       	rjmp	.+110    	; 0xb42 <sw_timer_service+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ad4:	8f b7       	in	r24, 0x3f	; 63
     ad6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     ad8:	f8 94       	cli
	return flags;
     ada:	29 81       	ldd	r18, Y+1	; 0x01
		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
			flags = cpu_irq_save();

			next_expired_timer
				= timer_array[expired_timer_queue_head].
     adc:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <expired_timer_queue_head>
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	dc 01       	movw	r26, r24
     ae4:	aa 0f       	add	r26, r26
     ae6:	bb 1f       	adc	r27, r27
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	a8 0f       	add	r26, r24
     af6:	b9 1f       	adc	r27, r25
     af8:	a3 5d       	subi	r26, 0xD3	; 211
     afa:	ba 4f       	sbci	r27, 0xFA	; 250
     afc:	18 96       	adiw	r26, 0x08	; 8
     afe:	9c 91       	ld	r25, X
     b00:	18 97       	sbiw	r26, 0x08	; 8
					next_timer_in_queue;

			/* Callback is stored */
			callback
				= (timer_expiry_cb_t)timer_array[
     b02:	14 96       	adiw	r26, 0x04	; 4
     b04:	ed 91       	ld	r30, X+
     b06:	fc 91       	ld	r31, X
     b08:	15 97       	sbiw	r26, 0x05	; 5
				expired_timer_queue_head
					].timer_cb;

			/* Callback parameter is stored */
			callback_param
				= timer_array[expired_timer_queue_head].param_cb;
     b0a:	16 96       	adiw	r26, 0x06	; 6
     b0c:	4d 91       	ld	r20, X+
     b0e:	5c 91       	ld	r21, X
     b10:	17 97       	sbiw	r26, 0x07	; 7
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
     b12:	18 96       	adiw	r26, 0x08	; 8
     b14:	1c 93       	st	X, r17
     b16:	18 97       	sbiw	r26, 0x08	; 8
			timer_array[expired_timer_queue_head].timer_cb = NULL;
     b18:	15 96       	adiw	r26, 0x05	; 5
     b1a:	1c 92       	st	X, r1
     b1c:	1e 92       	st	-X, r1
     b1e:	14 97       	sbiw	r26, 0x04	; 4
			timer_array[expired_timer_queue_head].param_cb = NULL;
     b20:	17 96       	adiw	r26, 0x07	; 7
     b22:	1c 92       	st	X, r1
     b24:	1e 92       	st	-X, r1
     b26:	16 97       	sbiw	r26, 0x06	; 6
			timer_array[expired_timer_queue_head].loaded = false;
     b28:	19 96       	adiw	r26, 0x09	; 9
     b2a:	1c 92       	st	X, r1
			/*
			 * The expired timer queue head is updated with the next
			 * timer in the
			 * expired timer queue.
			 */
			expired_timer_queue_head = next_expired_timer;
     b2c:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <expired_timer_queue_head>

			if (NO_TIMER == expired_timer_queue_head) {
     b30:	9f 3f       	cpi	r25, 0xFF	; 255
     b32:	11 f4       	brne	.+4      	; 0xb38 <sw_timer_service+0x86>
				expired_timer_queue_tail = NO_TIMER;
     b34:	00 93 d1 02 	sts	0x02D1, r16	; 0x8002d1 <expired_timer_queue_tail>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b38:	2f bf       	out	0x3f, r18	; 63
			}

			cpu_irq_restore(flags);

			if (NULL != callback) {
     b3a:	30 97       	sbiw	r30, 0x00	; 0
     b3c:	11 f0       	breq	.+4      	; 0xb42 <sw_timer_service+0x90>
				/* Callback function is called */
				callback(callback_param);
     b3e:	ca 01       	movw	r24, r20
     b40:	19 95       	eicall
		timer_expiry_cb_t callback;
		void *callback_param;
		uint8_t next_expired_timer;

		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
     b42:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <expired_timer_queue_head>
     b46:	8f 3f       	cpi	r24, 0xFF	; 255
     b48:	29 f6       	brne	.-118    	; 0xad4 <sw_timer_service+0x22>
				callback(callback_param);
			}
		}
	}
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	08 95       	ret

00000b58 <pal_init>:
}

bool pal_is_timer_running(uint8_t timer_id)
{
	return sw_timer_is_running(timer_id);
}
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	08 95       	ret

00000b5c <pal_task>:
 *
 * This function calls sio & timer handling functions.
 */
void pal_task(void)
{
	sw_timer_service();
     b5c:	aa cf       	rjmp	.-172    	; 0xab2 <sw_timer_service>
     b5e:	08 95       	ret

00000b60 <bmm_buffer_init>:
 * This function initializes the buffer module.
 * This function should be called before using any other functionality
 * of buffer module.
 */
void bmm_buffer_init(void)
{
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
	/* Initialize free buffer queue for large buffers */
#if (TOTAL_NUMBER_OF_LARGE_BUFS > 0)
    #ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&free_large_buffer_q, TOTAL_NUMBER_OF_LARGE_BUFS);
    #else
	qmm_queue_init(&free_large_buffer_q);
     b64:	85 ed       	ldi	r24, 0xD5	; 213
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	b0 d0       	rcall	.+352    	; 0xcca <qmm_queue_init>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
     b6a:	ca ed       	ldi	r28, 0xDA	; 218
     b6c:	d2 e0       	ldi	r29, 0x02	; 2
     b6e:	86 ee       	ldi	r24, 0xE6	; 230
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	99 83       	std	Y+1, r25	; 0x01
     b74:	88 83       	st	Y, r24

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
     b76:	be 01       	movw	r22, r28
     b78:	85 ed       	ldi	r24, 0xD5	; 213
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	ad d0       	rcall	.+346    	; 0xcd8 <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
     b7e:	81 e7       	ldi	r24, 0x71	; 113
     b80:	93 e0       	ldi	r25, 0x03	; 3
     b82:	9d 83       	std	Y+5, r25	; 0x05
     b84:	8c 83       	std	Y+4, r24	; 0x04

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
     b86:	6e ed       	ldi	r22, 0xDE	; 222
     b88:	72 e0       	ldi	r23, 0x02	; 2
     b8a:	85 ed       	ldi	r24, 0xD5	; 213
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	a4 d0       	rcall	.+328    	; 0xcd8 <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
     b90:	8c ef       	ldi	r24, 0xFC	; 252
     b92:	93 e0       	ldi	r25, 0x03	; 3
     b94:	99 87       	std	Y+9, r25	; 0x09
     b96:	88 87       	std	Y+8, r24	; 0x08

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
     b98:	62 ee       	ldi	r22, 0xE2	; 226
     b9a:	72 e0       	ldi	r23, 0x02	; 2
     b9c:	85 ed       	ldi	r24, 0xD5	; 213
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	9b d0       	rcall	.+310    	; 0xcd8 <qmm_queue_append>
		/* Append the buffer to free small buffer queue */
		qmm_queue_append(&free_small_buffer_q, &buf_header[index + \
				TOTAL_NUMBER_OF_LARGE_BUFS]);
	}
#endif
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <bmm_buffer_alloc>:
			}
		}

#else /* no small buffers available at all */
	/* Allocate buffer from free large buffer queue */
	pfree_buffer = qmm_queue_remove(&free_large_buffer_q, NULL);
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	85 ed       	ldi	r24, 0xD5	; 213
     bae:	92 e0       	ldi	r25, 0x02	; 2
     bb0:	b8 c0       	rjmp	.+368    	; 0xd22 <qmm_queue_remove>

	size = size; /* Keep compiler happy. */
#endif

		return pfree_buffer;
	}
     bb2:	08 95       	ret

00000bb4 <bmm_buffer_free>:
	 *
	 * @param pbuffer Pointer to buffer that has to be freed.
	 */
	void bmm_buffer_free(buffer_t *pbuffer)
	{
		if (NULL == pbuffer) {
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	21 f0       	breq	.+8      	; 0xbc0 <bmm_buffer_free+0xc>
     bb8:	bc 01       	movw	r22, r24
			qmm_queue_append(&free_large_buffer_q, pbuffer);
		}

#else /* no small buffers available at all */
		/* Append the buffer into free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, pbuffer);
     bba:	85 ed       	ldi	r24, 0xD5	; 213
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	8c c0       	rjmp	.+280    	; 0xcd8 <qmm_queue_append>
     bc0:	08 95       	ret

00000bc2 <queue_read_or_remove>:
 * \ingroup group_qmm
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
     bc2:	8f 92       	push	r8
     bc4:	9f 92       	push	r9
     bc6:	af 92       	push	r10
     bc8:	bf 92       	push	r11
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	1f 92       	push	r1
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     be0:	2f b7       	in	r18, 0x3f	; 63
     be2:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     be4:	f8 94       	cli
	return flags;
     be6:	89 80       	ldd	r8, Y+1	; 0x01
	buffer_t *buffer_current = NULL;
	buffer_t *buffer_previous;

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
     be8:	dc 01       	movw	r26, r24
     bea:	14 96       	adiw	r26, 0x04	; 4
     bec:	2c 91       	ld	r18, X
     bee:	22 23       	and	r18, r18
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <queue_read_or_remove+0x32>
     bf2:	56 c0       	rjmp	.+172    	; 0xca0 <queue_read_or_remove+0xde>
     bf4:	7a 01       	movw	r14, r20
     bf6:	96 2e       	mov	r9, r22
     bf8:	5c 01       	movw	r10, r24
		buffer_current = q->head;
     bfa:	fc 01       	movw	r30, r24
     bfc:	00 81       	ld	r16, Z
     bfe:	11 81       	ldd	r17, Z+1	; 0x01
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
     c00:	45 2b       	or	r20, r21
     c02:	e1 f0       	breq	.+56     	; 0xc3c <queue_read_or_remove+0x7a>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
     c04:	01 15       	cp	r16, r1
     c06:	11 05       	cpc	r17, r1
     c08:	09 f4       	brne	.+2      	; 0xc0c <queue_read_or_remove+0x4a>
     c0a:	4d c0       	rjmp	.+154    	; 0xca6 <queue_read_or_remove+0xe4>
     c0c:	68 01       	movw	r12, r16
     c0e:	01 c0       	rjmp	.+2      	; 0xc12 <queue_read_or_remove+0x50>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
     c10:	89 01       	movw	r16, r18
		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
				match = search->criteria_func(
     c12:	d7 01       	movw	r26, r14
     c14:	12 96       	adiw	r26, 0x02	; 2
     c16:	6d 91       	ld	r22, X+
     c18:	7c 91       	ld	r23, X
     c1a:	13 97       	sbiw	r26, 0x03	; 3
     c1c:	ed 91       	ld	r30, X+
     c1e:	fc 91       	ld	r31, X
     c20:	d8 01       	movw	r26, r16
     c22:	8d 91       	ld	r24, X+
     c24:	9c 91       	ld	r25, X
     c26:	19 95       	eicall
						(void *)buffer_current->body,
						search->handle);

				if (match) {
     c28:	81 11       	cpse	r24, r1
     c2a:	09 c0       	rjmp	.+18     	; 0xc3e <queue_read_or_remove+0x7c>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
     c2c:	f8 01       	movw	r30, r16
     c2e:	22 81       	ldd	r18, Z+2	; 0x02
     c30:	33 81       	ldd	r19, Z+3	; 0x03
     c32:	68 01       	movw	r12, r16

		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
     c34:	21 15       	cp	r18, r1
     c36:	31 05       	cpc	r19, r1
     c38:	59 f7       	brne	.-42     	; 0xc10 <queue_read_or_remove+0x4e>
     c3a:	35 c0       	rjmp	.+106    	; 0xca6 <queue_read_or_remove+0xe4>

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
		buffer_current = q->head;
		buffer_previous = q->head;
     c3c:	68 01       	movw	r12, r16
				buffer_current = buffer_current->next;
			}
		}

		/* Buffer matching with search criteria found */
		if (NULL != buffer_current) {
     c3e:	01 15       	cp	r16, r1
     c40:	11 05       	cpc	r17, r1
     c42:	99 f1       	breq	.+102    	; 0xcaa <queue_read_or_remove+0xe8>
			/* Remove buffer from the queue */
			if (REMOVE_MODE == mode) {
     c44:	91 10       	cpse	r9, r1
     c46:	31 c0       	rjmp	.+98     	; 0xcaa <queue_read_or_remove+0xe8>
				/* Update head if buffer removed is first node
				**/
				if (buffer_current == q->head) {
     c48:	d5 01       	movw	r26, r10
     c4a:	8d 91       	ld	r24, X+
     c4c:	9c 91       	ld	r25, X
     c4e:	11 97       	sbiw	r26, 0x01	; 1
     c50:	08 17       	cp	r16, r24
     c52:	19 07       	cpc	r17, r25
     c54:	31 f4       	brne	.+12     	; 0xc62 <queue_read_or_remove+0xa0>
					q->head = buffer_current->next;
     c56:	f8 01       	movw	r30, r16
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	93 81       	ldd	r25, Z+3	; 0x03
     c5c:	8d 93       	st	X+, r24
     c5e:	9c 93       	st	X, r25
     c60:	08 c0       	rjmp	.+16     	; 0xc72 <queue_read_or_remove+0xb0>
				} else {
					/* Update the link by removing the
					 * buffer */
					buffer_previous->next
						= buffer_current->next;
     c62:	d8 01       	movw	r26, r16
     c64:	12 96       	adiw	r26, 0x02	; 2
     c66:	8d 91       	ld	r24, X+
     c68:	9c 91       	ld	r25, X
     c6a:	13 97       	sbiw	r26, 0x03	; 3
     c6c:	f6 01       	movw	r30, r12
     c6e:	93 83       	std	Z+3, r25	; 0x03
     c70:	82 83       	std	Z+2, r24	; 0x02
				}

				/* Update tail if buffer removed is last node */
				if (buffer_current == q->tail) {
     c72:	d5 01       	movw	r26, r10
     c74:	12 96       	adiw	r26, 0x02	; 2
     c76:	8d 91       	ld	r24, X+
     c78:	9c 91       	ld	r25, X
     c7a:	13 97       	sbiw	r26, 0x03	; 3
     c7c:	08 17       	cp	r16, r24
     c7e:	19 07       	cpc	r17, r25
     c80:	21 f4       	brne	.+8      	; 0xc8a <queue_read_or_remove+0xc8>
					q->tail = buffer_previous;
     c82:	13 96       	adiw	r26, 0x03	; 3
     c84:	dc 92       	st	X, r13
     c86:	ce 92       	st	-X, r12
     c88:	12 97       	sbiw	r26, 0x02	; 2
				}

				/* Update size */
				q->size--;
     c8a:	f5 01       	movw	r30, r10
     c8c:	84 81       	ldd	r24, Z+4	; 0x04
     c8e:	81 50       	subi	r24, 0x01	; 1
     c90:	84 83       	std	Z+4, r24	; 0x04

				if (NULL == q->head) {
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	89 2b       	or	r24, r25
     c98:	41 f4       	brne	.+16     	; 0xcaa <queue_read_or_remove+0xe8>
					q->tail = NULL;
     c9a:	13 82       	std	Z+3, r1	; 0x03
     c9c:	12 82       	std	Z+2, r1	; 0x02
     c9e:	05 c0       	rjmp	.+10     	; 0xcaa <queue_read_or_remove+0xe8>
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
	buffer_t *buffer_current = NULL;
     ca0:	00 e0       	ldi	r16, 0x00	; 0
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <queue_read_or_remove+0xe8>
     ca6:	00 e0       	ldi	r16, 0x00	; 0
     ca8:	10 e0       	ldi	r17, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     caa:	8f be       	out	0x3f, r8	; 63
	LEAVE_CRITICAL_REGION();

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
     cac:	c8 01       	movw	r24, r16
     cae:	0f 90       	pop	r0
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	bf 90       	pop	r11
     cc2:	af 90       	pop	r10
     cc4:	9f 90       	pop	r9
     cc6:	8f 90       	pop	r8
     cc8:	08 95       	ret

00000cca <qmm_queue_init>:
#ifdef ENABLE_QUEUE_CAPACITY
void qmm_queue_init(queue_t *q, uint8_t capacity)
#else
void qmm_queue_init(queue_t *q)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
     cca:	fc 01       	movw	r30, r24
	q->head = NULL;
     ccc:	11 82       	std	Z+1, r1	; 0x01
     cce:	10 82       	st	Z, r1
	q->tail = NULL;
     cd0:	13 82       	std	Z+3, r1	; 0x03
     cd2:	12 82       	std	Z+2, r1	; 0x02
	q->size = 0;
     cd4:	14 82       	std	Z+4, r1	; 0x04
     cd6:	08 95       	ret

00000cd8 <qmm_queue_append>:
#ifdef ENABLE_QUEUE_CAPACITY
retval_t qmm_queue_append(queue_t *q, buffer_t *buf)
#else
void qmm_queue_append(queue_t *q, buffer_t *buf)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	1f 92       	push	r1
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ce4:	8f b7       	in	r24, 0x3f	; 63
     ce6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     ce8:	f8 94       	cli
	return flags;
     cea:	99 81       	ldd	r25, Y+1	; 0x01
		status = QUEUE_FULL;
	} else
#endif  /* ENABLE_QUEUE_CAPACITY */
	{
		/* Check whether queue is empty */
		if (q->size == 0) {
     cec:	84 81       	ldd	r24, Z+4	; 0x04
     cee:	81 11       	cpse	r24, r1
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <qmm_queue_append+0x20>
			/* Add the buffer at the head */
			q->head = buf;
     cf2:	71 83       	std	Z+1, r23	; 0x01
     cf4:	60 83       	st	Z, r22
     cf6:	06 c0       	rjmp	.+12     	; 0xd04 <qmm_queue_append+0x2c>
		} else {
			/* Add the buffer at the end */
			q->tail->next = buf;
     cf8:	a2 81       	ldd	r26, Z+2	; 0x02
     cfa:	b3 81       	ldd	r27, Z+3	; 0x03
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	7c 93       	st	X, r23
     d00:	6e 93       	st	-X, r22
     d02:	12 97       	sbiw	r26, 0x02	; 2
		}

		/* Update the list */
		q->tail = buf;
     d04:	73 83       	std	Z+3, r23	; 0x03
     d06:	62 83       	std	Z+2, r22	; 0x02

		/* Terminate the list */
		buf->next = NULL;
     d08:	db 01       	movw	r26, r22
     d0a:	13 96       	adiw	r26, 0x03	; 3
     d0c:	1c 92       	st	X, r1
     d0e:	1e 92       	st	-X, r1
     d10:	12 97       	sbiw	r26, 0x02	; 2

		/* Update size */
		q->size++;
     d12:	84 81       	ldd	r24, Z+4	; 0x04
     d14:	8f 5f       	subi	r24, 0xFF	; 255
     d16:	84 83       	std	Z+4, r24	; 0x04
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d18:	9f bf       	out	0x3f, r25	; 63
	LEAVE_CRITICAL_REGION();

#ifdef ENABLE_QUEUE_CAPACITY
	return (status);
#endif
} /* qmm_queue_append */
     d1a:	0f 90       	pop	r0
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <qmm_queue_remove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
buffer_t *qmm_queue_remove(queue_t *q, search_t *search)
{
     d22:	ab 01       	movw	r20, r22
	return (queue_read_or_remove(q, REMOVE_MODE, search));
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	4d cf       	rjmp	.-358    	; 0xbc2 <queue_read_or_remove>
}
     d28:	08 95       	ret

00000d2a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     d2c:	61 50       	subi	r22, 0x01	; 1
     d2e:	71 09       	sbc	r23, r1
     d30:	81 09       	sbc	r24, r1
     d32:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     d34:	61 15       	cp	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	81 05       	cpc	r24, r1
     d3a:	91 05       	cpc	r25, r1
     d3c:	b9 f7       	brne	.-18     	; 0xd2c <__portable_avr_delay_cycles+0x2>
     d3e:	08 95       	ret

00000d40 <switch_pll_on>:
/**
 * \brief Switches the PLL on
 * \ingroup group_tal_state_machine_rfr2
 */
static void switch_pll_on(void)
{
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
	trx_irq_reason_t irq_status;
	uint8_t poll_counter = 0;

	/* Check if trx is in TRX_OFF; only from PLL_ON the following procedure
	 * is applicable */
	if (trx_bit_read(SR_TRX_STATUS) != TRX_OFF) {
     d46:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
     d4a:	8f 71       	andi	r24, 0x1F	; 31
     d4c:	88 30       	cpi	r24, 0x08	; 8
     d4e:	a1 f4       	brne	.+40     	; 0xd78 <switch_pll_on+0x38>
				"Switch PLL_ON failed, because trx is not in TRX_OFF" ==
				0);
		return;
	}

	IRQ_STATUS = _BV(PLL_LOCK); /* clear PLL lock bit */
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	/* Switch PLL on */
	trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
     d56:	89 e0       	ldi	r24, 0x09	; 9
     d58:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
     d5c:	c3 e0       	ldi	r28, 0x03	; 3

	/* Check if PLL has been locked. */
	do {
		irq_status = (trx_irq_reason_t)trx_reg_read(RG_IRQ_STATUS);
     d5e:	0f e4       	ldi	r16, 0x4F	; 79
     d60:	11 e0       	ldi	r17, 0x01	; 1
     d62:	f8 01       	movw	r30, r16
     d64:	80 81       	ld	r24, Z

		if (irq_status & TRX_IRQ_PLL_LOCK) {
     d66:	80 fd       	sbrc	r24, 0
     d68:	07 c0       	rjmp	.+14     	; 0xd78 <switch_pll_on+0x38>
			return; /* PLL is locked now */
		}

		/* Wait a time interval of typical value for timer TR4. */
		pal_timer_delay(TRX_OFF_TO_PLL_ON_TIME_US);
     d6a:	63 e9       	ldi	r22, 0x93	; 147
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	db df       	rcall	.-74     	; 0xd2a <__portable_avr_delay_cycles>
     d74:	c1 50       	subi	r28, 0x01	; 1

		poll_counter++;
	} while (poll_counter < PLL_LOCK_ATTEMPTS);
     d76:	a9 f7       	brne	.-22     	; 0xd62 <switch_pll_on+0x22>

#if (_DEBUG_ > 0)
	Assert("PLL switch failed" == 0);
#endif
}
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	08 95       	ret

00000d80 <set_trx_state>:
 * \param trx_cmd needs to be one of the trx commands
 *
 * \return current trx state
 */
tal_trx_status_t set_trx_state(trx_cmd_t trx_cmd)
{
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	1f 92       	push	r1
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	18 2f       	mov	r17, r24
	if (tal_trx_status == TRX_SLEEP) {
     d8e:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <tal_trx_status>
     d92:	8f 30       	cpi	r24, 0x0F	; 15
     d94:	51 f5       	brne	.+84     	; 0xdea <set_trx_state+0x6a>
		 * Once the TRX is awake, the original state of the global
		 * interrupts
		 * will be restored.
		 */
		/* Reset wake-up interrupt flag. */
		if (CMD_SLEEP == trx_cmd) {
     d96:	1f 30       	cpi	r17, 0x0F	; 15
     d98:	09 f4       	brne	.+2      	; 0xd9c <set_trx_state+0x1c>
     d9a:	38 c1       	rjmp	.+624    	; 0x100c <set_trx_state+0x28c>
			return TRX_SLEEP;
		}

		tal_awake_end_flag = false;
     d9c:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <tal_awake_end_flag>
		/* Set callback function for the awake interrupt. */
		pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
     da0:	85 ef       	ldi	r24, 0xF5	; 245
     da2:	9a e0       	ldi	r25, 0x0A	; 10
     da4:	e1 d2       	rcall	.+1474   	; 0x1368 <pal_trx_irq_init_awake>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     da6:	8f b7       	in	r24, 0x3f	; 63
     da8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     daa:	f8 94       	cli
	return flags;
     dac:	99 81       	ldd	r25, Y+1	; 0x01
		/* Save current state of global interrupts. */
		ENTER_CRITICAL_REGION();
		/* Force enabling of global interrupts. */
		ENABLE_GLOBAL_IRQ();
     dae:	78 94       	sei
		/* Leave trx sleep mode. */
		TRX_SLP_TR_LOW();
     db0:	e9 e3       	ldi	r30, 0x39	; 57
     db2:	f1 e0       	ldi	r31, 0x01	; 1
     db4:	80 81       	ld	r24, Z
     db6:	8d 7f       	andi	r24, 0xFD	; 253
     db8:	80 83       	st	Z, r24
		/* Poll wake-up interrupt flag until set within ISR. */
		while (!tal_awake_end_flag) {
     dba:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <tal_awake_end_flag>
     dbe:	88 23       	and	r24, r24
     dc0:	e1 f3       	breq	.-8      	; 0xdba <set_trx_state+0x3a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     dc2:	9f bf       	out	0x3f, r25	; 63
		}
		/* Restore original state of global interrupts. */
		LEAVE_CRITICAL_REGION();
		/* Clear existing interrupts */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
		/* Re-enable TRX_END interrupt */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
     dca:	88 e4       	ldi	r24, 0x48	; 72
     dcc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

#if (ANTENNA_DIVERSITY == 1)
		/* Enable antenna diversity. */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
     dd0:	ed e4       	ldi	r30, 0x4D	; 77
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
     dd4:	80 81       	ld	r24, Z
     dd6:	84 60       	ori	r24, 0x04	; 4
     dd8:	80 83       	st	Z, r24
#endif

		if ((trx_cmd == CMD_TRX_OFF) ||
     dda:	18 30       	cpi	r17, 0x08	; 8
     ddc:	11 f0       	breq	.+4      	; 0xde2 <set_trx_state+0x62>
     dde:	13 30       	cpi	r17, 0x03	; 3
     de0:	21 f4       	brne	.+8      	; 0xdea <set_trx_state+0x6a>
				(trx_cmd == CMD_FORCE_TRX_OFF)) {
			tal_trx_status = TRX_OFF;
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <tal_trx_status>
			return TRX_OFF;
     de8:	11 c1       	rjmp	.+546    	; 0x100c <set_trx_state+0x28c>
		}
	}

	switch (trx_cmd) { /* requested state */
     dea:	81 2f       	mov	r24, r17
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	fc 01       	movw	r30, r24
     df0:	33 97       	sbiw	r30, 0x03	; 3
     df2:	e7 31       	cpi	r30, 0x17	; 23
     df4:	f1 05       	cpc	r31, r1
     df6:	08 f0       	brcs	.+2      	; 0xdfa <set_trx_state+0x7a>
     df8:	5a c0       	rjmp	.+180    	; 0xeae <set_trx_state+0x12e>
     dfa:	88 27       	eor	r24, r24
     dfc:	e6 56       	subi	r30, 0x66	; 102
     dfe:	ff 4f       	sbci	r31, 0xFF	; 255
     e00:	8f 4f       	sbci	r24, 0xFF	; 255
     e02:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__tablejump2__>
	case CMD_SLEEP:
		trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
#if (ANTENNA_DIVERSITY == 1)
		/* Disable antenna diversity: sets pulls */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_DISABLE);
     e0c:	ed e4       	ldi	r30, 0x4D	; 77
     e0e:	f1 e0       	ldi	r31, 0x01	; 1
     e10:	80 81       	ld	r24, Z
     e12:	8b 7f       	andi	r24, 0xFB	; 251
     e14:	80 83       	st	Z, r24
			uint16_t rand_value;

			/*
			 * Init the SEED value of the CSMA backoff algorithm.
			 */
			rand_value = (uint16_t)rand();
     e16:	0e 94 96 14 	call	0x292c	; 0x292c <rand>
			trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
     e1a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
			trx_bit_write(SR_CSMA_SEED_1,
     e1e:	ee e6       	ldi	r30, 0x6E	; 110
     e20:	f1 e0       	ldi	r31, 0x01	; 1
     e22:	80 81       	ld	r24, Z
     e24:	97 70       	andi	r25, 0x07	; 7
     e26:	88 7f       	andi	r24, 0xF8	; 248
     e28:	89 2b       	or	r24, r25
     e2a:	80 83       	st	Z, r24

		/*
		 * Clear existing interrupts to have clear interrupt flags
		 * during wake-up.
		 */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

		/*
		 * Enable Awake_end interrupt.
		 * This is used for save wake-up from sleep later.
		 */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_AWAKE_ONLY);
     e32:	80 e8       	ldi	r24, 0x80	; 128
     e34:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

		PAL_WAIT_1_US();
     e38:	62 e0       	ldi	r22, 0x02	; 2
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	74 df       	rcall	.-280    	; 0xd2a <__portable_avr_delay_cycles>
		TRX_SLP_TR_HIGH();
     e42:	e9 e3       	ldi	r30, 0x39	; 57
     e44:	f1 e0       	ldi	r31, 0x01	; 1
     e46:	80 81       	ld	r24, Z
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	80 83       	st	Z, r24
		pal_timer_delay(TRX_OFF_TO_SLEEP_TIME_CLKM_CYCLES);
     e4c:	6f e2       	ldi	r22, 0x2F	; 47
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	6a df       	rcall	.-300    	; 0xd2a <__portable_avr_delay_cycles>
		tal_trx_status = TRX_SLEEP;
     e56:	8f e0       	ldi	r24, 0x0F	; 15
     e58:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <tal_trx_status>
		return TRX_SLEEP; /* transceiver register cannot be read during
     e5c:	d7 c0       	rjmp	.+430    	; 0x100c <set_trx_state+0x28c>
		                   * TRX_SLEEP */

	case CMD_TRX_OFF:
		switch (tal_trx_status) {
     e5e:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <tal_trx_status>
     e62:	88 30       	cpi	r24, 0x08	; 8
     e64:	21 f1       	breq	.+72     	; 0xeae <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_TRX_OFF);
     e66:	88 e0       	ldi	r24, 0x08	; 8
     e68:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     e6c:	62 e0       	ldi	r22, 0x02	; 2
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	5a df       	rcall	.-332    	; 0xd2a <__portable_avr_delay_cycles>
			break;
     e76:	1b c0       	rjmp	.+54     	; 0xeae <set_trx_state+0x12e>
		}
		break;

	case CMD_FORCE_TRX_OFF:
		switch (tal_trx_status) {
     e78:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <tal_trx_status>
     e7c:	88 30       	cpi	r24, 0x08	; 8
     e7e:	b9 f0       	breq	.+46     	; 0xeae <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
     e80:	83 e0       	ldi	r24, 0x03	; 3
     e82:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     e86:	62 e0       	ldi	r22, 0x02	; 2
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	4d df       	rcall	.-358    	; 0xd2a <__portable_avr_delay_cycles>
			break;
     e90:	0e c0       	rjmp	.+28     	; 0xeae <set_trx_state+0x12e>
		}
		break;

	case CMD_PLL_ON:
		switch (tal_trx_status) {
     e92:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <tal_trx_status>
     e96:	88 30       	cpi	r24, 0x08	; 8
     e98:	49 f0       	breq	.+18     	; 0xeac <set_trx_state+0x12c>
     e9a:	18 f4       	brcc	.+6      	; 0xea2 <set_trx_state+0x122>
     e9c:	86 30       	cpi	r24, 0x06	; 6
     e9e:	39 f4       	brne	.+14     	; 0xeae <set_trx_state+0x12e>
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <set_trx_state+0x134>
     ea2:	86 31       	cpi	r24, 0x16	; 22
     ea4:	39 f0       	breq	.+14     	; 0xeb4 <set_trx_state+0x134>
     ea6:	89 31       	cpi	r24, 0x19	; 25
     ea8:	11 f4       	brne	.+4      	; 0xeae <set_trx_state+0x12e>
		case PLL_ON:
			break;

		case TRX_OFF:
			switch_pll_on();
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <set_trx_state+0x134>
     eac:	49 df       	rcall	.-366    	; 0xd40 <switch_pll_on>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
     eae:	e1 e4       	ldi	r30, 0x41	; 65
     eb0:	f1 e0       	ldi	r31, 0x01	; 1
     eb2:	a6 c0       	rjmp	.+332    	; 0x1000 <set_trx_state+0x280>
			break;

		case RX_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
     eb4:	89 e0       	ldi	r24, 0x09	; 9
     eb6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     eba:	62 e0       	ldi	r22, 0x02	; 2
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	33 df       	rcall	.-410    	; 0xd2a <__portable_avr_delay_cycles>
			break;
     ec4:	f4 cf       	rjmp	.-24     	; 0xeae <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_FORCE_PLL_ON:
		switch (tal_trx_status) {
     ec6:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <tal_trx_status>
     eca:	88 30       	cpi	r24, 0x08	; 8
     ecc:	19 f0       	breq	.+6      	; 0xed4 <set_trx_state+0x154>
     ece:	89 30       	cpi	r24, 0x09	; 9
     ed0:	71 f3       	breq	.-36     	; 0xeae <set_trx_state+0x12e>
		case TRX_OFF:
			switch_pll_on();
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <set_trx_state+0x158>
     ed4:	35 df       	rcall	.-406    	; 0xd40 <switch_pll_on>
			break;
     ed6:	eb cf       	rjmp	.-42     	; 0xeae <set_trx_state+0x12e>

		case PLL_ON:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);
     ed8:	84 e0       	ldi	r24, 0x04	; 4
     eda:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			break;
     ede:	e7 cf       	rjmp	.-50     	; 0xeae <set_trx_state+0x12e>
		}
		break;

	case CMD_RX_ON:
		switch (tal_trx_status) {
     ee0:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <tal_trx_status>
     ee4:	89 30       	cpi	r24, 0x09	; 9
     ee6:	41 f0       	breq	.+16     	; 0xef8 <set_trx_state+0x178>
     ee8:	18 f4       	brcc	.+6      	; 0xef0 <set_trx_state+0x170>
     eea:	88 30       	cpi	r24, 0x08	; 8
     eec:	71 f0       	breq	.+28     	; 0xf0a <set_trx_state+0x18a>
     eee:	df cf       	rjmp	.-66     	; 0xeae <set_trx_state+0x12e>
     ef0:	86 31       	cpi	r24, 0x16	; 22
     ef2:	11 f0       	breq	.+4      	; 0xef8 <set_trx_state+0x178>
     ef4:	89 31       	cpi	r24, 0x19	; 25
			break;

		case PLL_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
     ef6:	d9 f6       	brne	.-74     	; 0xeae <set_trx_state+0x12e>
     ef8:	86 e0       	ldi	r24, 0x06	; 6
			PAL_WAIT_1_US();
     efa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
     efe:	62 e0       	ldi	r22, 0x02	; 2
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
			break;

		case TRX_OFF:
			switch_pll_on();
     f06:	11 df       	rcall	.-478    	; 0xd2a <__portable_avr_delay_cycles>
     f08:	d2 cf       	rjmp	.-92     	; 0xeae <set_trx_state+0x12e>
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
     f0a:	1a df       	rcall	.-460    	; 0xd40 <switch_pll_on>
     f0c:	86 e0       	ldi	r24, 0x06	; 6
     f0e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     f12:	62 e0       	ldi	r22, 0x02	; 2
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	07 df       	rcall	.-498    	; 0xd2a <__portable_avr_delay_cycles>
			break;
     f1c:	c8 cf       	rjmp	.-112    	; 0xeae <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_RX_AACK_ON:
		switch (tal_trx_status) {
     f1e:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <tal_trx_status>
     f22:	88 30       	cpi	r24, 0x08	; 8
     f24:	91 f0       	breq	.+36     	; 0xf4a <set_trx_state+0x1ca>
     f26:	18 f4       	brcc	.+6      	; 0xf2e <set_trx_state+0x1ae>
     f28:	86 30       	cpi	r24, 0x06	; 6
     f2a:	c9 f0       	breq	.+50     	; 0xf5e <set_trx_state+0x1de>
     f2c:	c0 cf       	rjmp	.-128    	; 0xeae <set_trx_state+0x12e>
     f2e:	89 30       	cpi	r24, 0x09	; 9
     f30:	19 f0       	breq	.+6      	; 0xf38 <set_trx_state+0x1b8>
     f32:	89 31       	cpi	r24, 0x19	; 25
		case RX_AACK_ON:
			break;

		case TX_ARET_ON:
		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
     f34:	09 f0       	breq	.+2      	; 0xf38 <set_trx_state+0x1b8>
     f36:	bb cf       	rjmp	.-138    	; 0xeae <set_trx_state+0x12e>
     f38:	86 e1       	ldi	r24, 0x16	; 22
			PAL_WAIT_1_US();
     f3a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
     f3e:	62 e0       	ldi	r22, 0x02	; 2
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	80 e0       	ldi	r24, 0x00	; 0
			break;
     f44:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
     f46:	f1 de       	rcall	.-542    	; 0xd2a <__portable_avr_delay_cycles>
     f48:	b2 cf       	rjmp	.-156    	; 0xeae <set_trx_state+0x12e>
			                  * RX_AACK_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
     f4a:	fa de       	rcall	.-524    	; 0xd40 <switch_pll_on>
     f4c:	86 e1       	ldi	r24, 0x16	; 22
     f4e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     f52:	62 e0       	ldi	r22, 0x02	; 2
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
			break;
     f5a:	e7 de       	rcall	.-562    	; 0xd2a <__portable_avr_delay_cycles>

		case RX_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
     f5c:	a8 cf       	rjmp	.-176    	; 0xeae <set_trx_state+0x12e>
     f5e:	89 e0       	ldi	r24, 0x09	; 9
     f60:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     f64:	62 e0       	ldi	r22, 0x02	; 2
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	de de       	rcall	.-580    	; 0xd2a <__portable_avr_delay_cycles>
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
     f6e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
     f72:	8f 71       	andi	r24, 0x1F	; 31
     f74:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <tal_trx_status>
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
     f78:	89 30       	cpi	r24, 0x09	; 9
     f7a:	09 f0       	breq	.+2      	; 0xf7e <set_trx_state+0x1fe>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
     f7c:	47 c0       	rjmp	.+142    	; 0x100c <set_trx_state+0x28c>
     f7e:	86 e1       	ldi	r24, 0x16	; 22
     f80:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     f84:	62 e0       	ldi	r22, 0x02	; 2
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	ce de       	rcall	.-612    	; 0xd2a <__portable_avr_delay_cycles>
			break;
     f8e:	8f cf       	rjmp	.-226    	; 0xeae <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_TX_ARET_ON:
		switch (tal_trx_status) {
     f90:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <tal_trx_status>
     f94:	88 30       	cpi	r24, 0x08	; 8
     f96:	51 f1       	breq	.+84     	; 0xfec <set_trx_state+0x26c>
     f98:	18 f4       	brcc	.+6      	; 0xfa0 <set_trx_state+0x220>
     f9a:	86 30       	cpi	r24, 0x06	; 6
     f9c:	79 f0       	breq	.+30     	; 0xfbc <set_trx_state+0x23c>
     f9e:	87 cf       	rjmp	.-242    	; 0xeae <set_trx_state+0x12e>
     fa0:	89 30       	cpi	r24, 0x09	; 9
     fa2:	19 f0       	breq	.+6      	; 0xfaa <set_trx_state+0x22a>
     fa4:	86 31       	cpi	r24, 0x16	; 22
     fa6:	51 f0       	breq	.+20     	; 0xfbc <set_trx_state+0x23c>
		case TX_ARET_ON:
			break;

		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
     fa8:	82 cf       	rjmp	.-252    	; 0xeae <set_trx_state+0x12e>
     faa:	89 e1       	ldi	r24, 0x19	; 25
			PAL_WAIT_1_US();
     fac:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
     fb0:	62 e0       	ldi	r22, 0x02	; 2
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
			break;
     fb8:	b8 de       	rcall	.-656    	; 0xd2a <__portable_avr_delay_cycles>

		case RX_ON:
		case RX_AACK_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
     fba:	79 cf       	rjmp	.-270    	; 0xeae <set_trx_state+0x12e>
     fbc:	89 e0       	ldi	r24, 0x09	; 9
     fbe:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     fc2:	62 e0       	ldi	r22, 0x02	; 2
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	80 e0       	ldi	r24, 0x00	; 0
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	af de       	rcall	.-674    	; 0xd2a <__portable_avr_delay_cycles>
     fcc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
     fd0:	8f 71       	andi	r24, 0x1F	; 31
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
     fd2:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <tal_trx_status>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
     fd6:	89 30       	cpi	r24, 0x09	; 9
     fd8:	c9 f4       	brne	.+50     	; 0x100c <set_trx_state+0x28c>
			PAL_WAIT_1_US();
     fda:	89 e1       	ldi	r24, 0x19	; 25
     fdc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
     fe0:	62 e0       	ldi	r22, 0x02	; 2
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	80 e0       	ldi	r24, 0x00	; 0
			break;
     fe6:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
     fe8:	a0 de       	rcall	.-704    	; 0xd2a <__portable_avr_delay_cycles>
     fea:	61 cf       	rjmp	.-318    	; 0xeae <set_trx_state+0x12e>
			                  * TX_ARET_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
     fec:	a9 de       	rcall	.-686    	; 0xd40 <switch_pll_on>
     fee:	89 e1       	ldi	r24, 0x19	; 25
     ff0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     ff4:	62 e0       	ldi	r22, 0x02	; 2
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	96 de       	rcall	.-724    	; 0xd2a <__portable_avr_delay_cycles>
			break;
     ffe:	57 cf       	rjmp	.-338    	; 0xeae <set_trx_state+0x12e>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1000:	80 81       	ld	r24, Z
    1002:	8f 71       	andi	r24, 0x1F	; 31
    1004:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <tal_trx_status>
				SR_TRX_STATUS);
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
    1008:	8f 31       	cpi	r24, 0x1F	; 31
    100a:	d1 f3       	breq	.-12     	; 0x1000 <set_trx_state+0x280>

	return tal_trx_status;
} /* set_trx_state() */
    100c:	0f 90       	pop	r0
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	08 95       	ret

00001016 <tal_task>:
 * - Checks and allocates the receive buffer.
 * - Processes the TAL incoming frame queue.
 * - Implements the TAL state machine.
 */
void tal_task(void)
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
	/* Check if the receiver needs to be switched on. */
	if (tal_rx_on_required && (tal_state == TAL_IDLE)) {
    101a:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <tal_rx_on_required>
    101e:	88 23       	and	r24, r24
    1020:	19 f1       	breq	.+70     	; 0x1068 <tal_task+0x52>
    1022:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <tal_state>
    1026:	81 11       	cpse	r24, r1
    1028:	1f c0       	rjmp	.+62     	; 0x1068 <tal_task+0x52>
		/* Check if a receive buffer has not been available before. */
		if (tal_rx_buffer == NULL) {
    102a:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <tal_rx_buffer>
    102e:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <tal_rx_buffer+0x1>
    1032:	89 2b       	or	r24, r25
    1034:	41 f4       	brne	.+16     	; 0x1046 <tal_task+0x30>
			tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1036:	8b e8       	ldi	r24, 0x8B	; 139
    1038:	b7 dd       	rcall	.-1170   	; 0xba8 <bmm_buffer_alloc>
    103a:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <tal_rx_buffer+0x1>
    103e:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <tal_rx_buffer>
		}

		/* Check if buffer could be allocated */
		if (NULL != tal_rx_buffer) {
    1042:	89 2b       	or	r24, r25
    1044:	89 f0       	breq	.+34     	; 0x1068 <tal_task+0x52>
			/*
			 * Note:
			 * This flag needs to be reset BEFORE the received is
			 * switched on.
			 */
			tal_rx_on_required = false;
    1046:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <tal_rx_on_required>
			/*
			 * Release the protected buffer and set it again for
			 * further protection
			 * since the buffer is available now.
			 */
			trx_bit_write(SR_RX_SAFE_MODE,
    104a:	cc e4       	ldi	r28, 0x4C	; 76
    104c:	d1 e0       	ldi	r29, 0x01	; 1
    104e:	88 81       	ld	r24, Y
    1050:	8f 77       	andi	r24, 0x7F	; 127
    1052:	88 83       	st	Y, r24
			                                                *
			                                                *
			                                                *protection
			                                                * mode
			                                                **/
			pal_timer_delay(2); /* Allow pin change to get effective
    1054:	63 e0       	ldi	r22, 0x03	; 3
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	66 de       	rcall	.-820    	; 0xd2a <__portable_avr_delay_cycles>
			                    **/
			trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    105e:	88 81       	ld	r24, Y
    1060:	80 68       	ori	r24, 0x80	; 128
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    1062:	88 83       	st	Y, r24
    1064:	86 e1       	ldi	r24, 0x16	; 22
    1066:	8c de       	rcall	.-744    	; 0xd80 <set_trx_state>

	/*
	 * If the transceiver has received a frame and it has been placed
	 * into the queue of the TAL, the frame needs to be processed further.
	 */
	if (tal_incoming_frame_queue.size > 0) {
    1068:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <tal_incoming_frame_queue+0x4>
    106c:	88 23       	and	r24, r24
    106e:	41 f0       	breq	.+16     	; 0x1080 <tal_task+0x6a>
		buffer_t *rx_frame;

		/* Check if there are any pending data in the
		 * incoming_frame_queue. */
		rx_frame = qmm_queue_remove(&tal_incoming_frame_queue, NULL);
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	81 e6       	ldi	r24, 0x61	; 97
    1076:	95 e0       	ldi	r25, 0x05	; 5
		if (NULL != rx_frame) {
    1078:	54 de       	rcall	.-856    	; 0xd22 <qmm_queue_remove>
    107a:	00 97       	sbiw	r24, 0x00	; 0
			process_incoming_frame(rx_frame);
    107c:	09 f0       	breq	.+2      	; 0x1080 <tal_task+0x6a>
		}
	}

	/* Handle the TAL state machines */
	switch (tal_state) {
    107e:	24 d5       	rcall	.+2632   	; 0x1ac8 <process_incoming_frame>
    1080:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <tal_state>
    1084:	82 30       	cpi	r24, 0x02	; 2
		/* Wait until state is changed to TAL_TX_DONE inside tx end ISR
		**/
		break;

	case TAL_TX_DONE:
		tx_done_handling(); /* see tal_tx.c */
    1086:	09 f4       	brne	.+2      	; 0x108a <tal_task+0x74>
    1088:	85 d5       	rcall	.+2826   	; 0x1b94 <tx_done_handling>
#endif /* (MAC_SCAN_ED_REQUEST_CONFIRM == 1) */
	default:
		Assert("tal_state is not handled" == 0);
		break;
	}
} /* tal_task() */
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1090:	04 c0       	rjmp	.+8      	; 0x109a <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1092:	61 50       	subi	r22, 0x01	; 1
    1094:	71 09       	sbc	r23, r1
    1096:	81 09       	sbc	r24, r1
    1098:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    109a:	61 15       	cp	r22, r1
    109c:	71 05       	cpc	r23, r1
    109e:	81 05       	cpc	r24, r1
    10a0:	91 05       	cpc	r25, r1
    10a2:	b9 f7       	brne	.-18     	; 0x1092 <__portable_avr_delay_cycles+0x2>
    10a4:	08 95       	ret

000010a6 <tal_generate_rand_seed>:
 * value and restoring this state after finishing the sequence.
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
	uint8_t cur_random_val = 0;

	/* Ensure that PLL has locked and receive mode is reached. */
	tal_trx_status_t trx_state;
	do {
		trx_state = set_trx_state(CMD_RX_ON);
    10b0:	86 e0       	ldi	r24, 0x06	; 6
    10b2:	66 de       	rcall	.-820    	; 0xd80 <set_trx_state>
	} while (trx_state != RX_ON);
    10b4:	86 30       	cpi	r24, 0x06	; 6
    10b6:	e1 f7       	brne	.-8      	; 0x10b0 <tal_generate_rand_seed+0xa>

	/* Ensure that register bit RX_PDT_DIS is set to 0. */
	trx_bit_write(SR_RX_PDT_DIS, RX_ENABLE);
    10b8:	e5 e5       	ldi	r30, 0x55	; 85
    10ba:	f1 e0       	ldi	r31, 0x01	; 1
    10bc:	80 81       	ld	r24, Z
    10be:	8f 77       	andi	r24, 0x7F	; 127
    10c0:	80 83       	st	Z, r24

	/*
	 * We need to disable TRX IRQs while generating random values in RX_ON,
	 * we do not want to receive frames at this point of time at all.
	 */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_NONE);
    10c2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
    10c6:	68 94       	set
    10c8:	ff 24       	eor	r15, r15
    10ca:	f3 f8       	bld	r15, 3
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
	uint16_t seed = 0;
    10cc:	c0 e0       	ldi	r28, 0x00	; 0
    10ce:	d0 e0       	ldi	r29, 0x00	; 0
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
		/* Now we can safely read the 2-bit random number. */
		cur_random_val = trx_bit_read(SR_RND_VALUE);
    10d0:	06 e4       	ldi	r16, 0x46	; 70
    10d2:	11 e0       	ldi	r17, 0x01	; 1
    10d4:	f8 01       	movw	r30, r16
    10d6:	90 81       	ld	r25, Z
		seed = seed << 2;
    10d8:	cc 0f       	add	r28, r28
    10da:	dd 1f       	adc	r29, r29
    10dc:	cc 0f       	add	r28, r28
    10de:	dd 1f       	adc	r29, r29
		seed |= cur_random_val;
    10e0:	90 76       	andi	r25, 0x60	; 96
    10e2:	29 2f       	mov	r18, r25
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	36 95       	lsr	r19
    10e8:	27 95       	ror	r18
    10ea:	32 95       	swap	r19
    10ec:	22 95       	swap	r18
    10ee:	2f 70       	andi	r18, 0x0F	; 15
    10f0:	23 27       	eor	r18, r19
    10f2:	3f 70       	andi	r19, 0x0F	; 15
    10f4:	23 27       	eor	r18, r19
    10f6:	c2 2b       	or	r28, r18
    10f8:	d3 2b       	or	r29, r19
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
    10fa:	62 e0       	ldi	r22, 0x02	; 2
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	c6 df       	rcall	.-116    	; 0x1090 <__portable_avr_delay_cycles>
    1104:	fa 94       	dec	r15

	/*
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
    1106:	f1 10       	cpse	r15, r1
		seed = seed << 2;
		seed |= cur_random_val;
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
	}

	set_trx_state(CMD_FORCE_TRX_OFF);
    1108:	e5 cf       	rjmp	.-54     	; 0x10d4 <tal_generate_rand_seed+0x2e>
    110a:	83 e0       	ldi	r24, 0x03	; 3
    110c:	39 de       	rcall	.-910    	; 0xd80 <set_trx_state>

	/*
	 * Now we need to clear potential pending TRX IRQs and
	 * enable the TRX IRQs again.
	 */
	trx_reg_write(RG_IRQ_STATUS, 0xFF);
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1114:	88 e4       	ldi	r24, 0x48	; 72
    1116:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

	/* Set the seed for the random number generator. */
	srand(seed);
    111a:	ce 01       	movw	r24, r28
    111c:	0e 94 99 14 	call	0x2932	; 0x2932 <srand>
}
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	08 95       	ret

0000112c <internal_tal_reset>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	f8 2e       	mov	r15, r24
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	/* trx might sleep, so wake it up */
	TRX_SLP_TR_LOW();
    1138:	c9 e3       	ldi	r28, 0x39	; 57
    113a:	d1 e0       	ldi	r29, 0x01	; 1
    113c:	88 81       	ld	r24, Y
    113e:	8d 7f       	andi	r24, 0xFD	; 253
    1140:	88 83       	st	Y, r24
	pal_timer_delay(SLEEP_TO_TRX_OFF_TYP_US);
    1142:	61 e4       	ldi	r22, 0x41	; 65
    1144:	71 e0       	ldi	r23, 0x01	; 1
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a2 df       	rcall	.-188    	; 0x1090 <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    114c:	88 81       	ld	r24, Y
    114e:	8e 7f       	andi	r24, 0xFE	; 254
    1150:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    1152:	62 e0       	ldi	r22, 0x02	; 2
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	9a df       	rcall	.-204    	; 0x1090 <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    115c:	88 81       	ld	r24, Y
    115e:	81 60       	ori	r24, 0x01	; 1
    1160:	88 83       	st	Y, r24

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1162:	66 e8       	ldi	r22, 0x86	; 134
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	92 df       	rcall	.-220    	; 0x1090 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    116c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1170:	8f 71       	andi	r24, 0x1F	; 31
    1172:	ca e0       	ldi	r28, 0x0A	; 10
    1174:	01 e4       	ldi	r16, 0x41	; 65
    1176:	11 e0       	ldi	r17, 0x01	; 1
    1178:	0a c0       	rjmp	.+20     	; 0x118e <internal_tal_reset+0x62>
	TRX_RST_HIGH();

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    117a:	66 e8       	ldi	r22, 0x86	; 134
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	86 df       	rcall	.-244    	; 0x1090 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1184:	f8 01       	movw	r30, r16
    1186:	80 81       	ld	r24, Z
    1188:	8f 71       	andi	r24, 0x1F	; 31
    118a:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
    118c:	c9 f1       	breq	.+114    	; 0x1200 <internal_tal_reset+0xd4>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    118e:	88 30       	cpi	r24, 0x08	; 8

	tal_trx_status = TRX_OFF;
    1190:	a1 f7       	brne	.-24     	; 0x117a <internal_tal_reset+0x4e>
    1192:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <tal_trx_status>

	/*
	 * Generate a seed for the random number generator in function rand().
	 * This is required (for example) as seed for the CSMA-CA algorithm.
	 */
	tal_generate_rand_seed();
    1196:	87 df       	rcall	.-242    	; 0x10a6 <tal_generate_rand_seed>
	 */

	/*
	 * Init the SEED value of the CSMA backoff algorithm.
	 */
	uint16_t rand_value = (uint16_t)rand();
    1198:	0e 94 96 14 	call	0x292c	; 0x292c <rand>
	trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    119c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
	trx_bit_write(SR_CSMA_SEED_1, (uint8_t)(rand_value >> 8));
    11a0:	ee e6       	ldi	r30, 0x6E	; 110
    11a2:	f1 e0       	ldi	r31, 0x01	; 1
    11a4:	80 81       	ld	r24, Z
    11a6:	97 70       	andi	r25, 0x07	; 7
    11a8:	88 7f       	andi	r24, 0xF8	; 248
    11aa:	89 2b       	or	r24, r25
    11ac:	80 83       	st	Z, r24

	trx_bit_write(SR_AACK_SET_PD, PD_ACK_BIT_SET_ENABLE); /* ACKs for
    11ae:	80 81       	ld	r24, Z
    11b0:	80 62       	ori	r24, 0x20	; 32
    11b2:	80 83       	st	Z, r24
	                                                       * data
	                                                       * requests,
	                                                       * indicate
	                                                       * pending data
	                                                       **/
	trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /* Enable
    11b4:	ec e4       	ldi	r30, 0x4C	; 76
    11b6:	f1 e0       	ldi	r31, 0x01	; 1
    11b8:	80 81       	ld	r24, Z
    11ba:	80 68       	ori	r24, 0x80	; 128
    11bc:	80 83       	st	Z, r24
	                                                     * buffer
	                                                     * protection
	                                                     * mode */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    11be:	88 e4       	ldi	r24, 0x48	; 72
    11c0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	/* The TX start timestamp is taken by the respective PAL layer */
	trx_reg_write(RG_IRQ_MASK1, (1 << TX_START_EN));
#endif
	trx_reg_write(0x156, 0xFF); /* RPC feature configuration. */
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>

#if (ANTENNA_DIVERSITY == 1)
	/* Use antenna diversity */
	trx_bit_write(SR_ANT_CTRL, ANTENNA_DEFAULT);
    11ca:	ed e4       	ldi	r30, 0x4D	; 77
    11cc:	f1 e0       	ldi	r31, 0x01	; 1
    11ce:	80 81       	ld	r24, Z
    11d0:	8c 7f       	andi	r24, 0xFC	; 252
    11d2:	82 60       	ori	r24, 0x02	; 2
    11d4:	80 83       	st	Z, r24
	trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    11d6:	aa e4       	ldi	r26, 0x4A	; 74
    11d8:	b1 e0       	ldi	r27, 0x01	; 1
    11da:	8c 91       	ld	r24, X
    11dc:	80 7f       	andi	r24, 0xF0	; 240
    11de:	83 60       	ori	r24, 0x03	; 3
    11e0:	8c 93       	st	X, r24
	trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    11e2:	80 81       	ld	r24, Z
    11e4:	88 60       	ori	r24, 0x08	; 8
	trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    11e6:	80 83       	st	Z, r24
    11e8:	80 81       	ld	r24, Z
	tal_generate_rand_seed();

	/* Configure the transceiver register values. */
	trx_config();

	if (set_default_pib) {
    11ea:	84 60       	ori	r24, 0x04	; 4
		/* Set the default PIB values */
		init_tal_pib(); /* implementation can be found in 'tal_pib.c' */
    11ec:	80 83       	st	Z, r24
    11ee:	f1 10       	cpse	r15, r1

	/*
	 * Write all PIB values to the transceiver
	 * that are needed by the transceiver itself.
	 */
	write_all_tal_pib_to_trx(); /* implementation can be found in
    11f0:	30 d2       	rcall	.+1120   	; 0x1652 <init_tal_pib>
    11f2:	7d d2       	rcall	.+1274   	; 0x16ee <write_all_tal_pib_to_trx>
	                             *'tal_pib.c' */

	/* Reset TAL variables. */
	tal_state = TAL_IDLE;
    11f4:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <tal_state>

#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	tal_beacon_transmission = false;
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;
    11f8:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <tal_rx_on_required>

	return MAC_SUCCESS;
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <internal_tal_reset+0xd6>
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
	if (trx_reset() != MAC_SUCCESS) {
		return FAILURE;
    1200:	85 e8       	ldi	r24, 0x85	; 133
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;

	return MAC_SUCCESS;
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	08 95       	ret

0000120e <tal_init>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
retval_t tal_init(void)
{
    120e:	cf 92       	push	r12
    1210:	df 92       	push	r13
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
	MCUSR = 0;
    121e:	14 be       	out	0x34, r1	; 52

	/* Enable SRAM Data Retention */
	DRTRAM0 = _BV(ENDRT);
    1220:	80 e1       	ldi	r24, 0x10	; 16
    1222:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	DRTRAM1 = _BV(ENDRT);
    1226:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	DRTRAM2 = _BV(ENDRT);
    122a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <__TEXT_REGION_LENGTH__+0x7c0133>
	DRTRAM3 = _BV(ENDRT);
    122e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
    1232:	92 dc       	rcall	.-1756   	; 0xb58 <pal_init>
    1234:	81 11       	cpse	r24, r1
    1236:	6d c0       	rjmp	.+218    	; 0x1312 <tal_init+0x104>
	} else if (module == &TCCR4A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
	} else if (module == &TRX_CTRL_0) {
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    1238:	60 e4       	ldi	r22, 0x40	; 64
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	ad da       	rcall	.-2726   	; 0x798 <sysclk_enable_module>
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	sysclk_enable_peripheral_clock(&TRX_CTRL_0);
	TRX_RST_HIGH();
    123e:	c9 e3       	ldi	r28, 0x39	; 57
    1240:	d1 e0       	ldi	r29, 0x01	; 1
    1242:	88 81       	ld	r24, Y
    1244:	81 60       	ori	r24, 0x01	; 1
    1246:	88 83       	st	Y, r24
	TRX_SLP_TR_LOW();
    1248:	88 81       	ld	r24, Y
    124a:	8d 7f       	andi	r24, 0xFD	; 253
    124c:	88 83       	st	Y, r24

	pal_timer_delay(P_ON_TO_CLKM_AVAILABLE_TYP_US);
    124e:	6b ef       	ldi	r22, 0xFB	; 251
    1250:	71 e0       	ldi	r23, 0x01	; 1
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	1c df       	rcall	.-456    	; 0x1090 <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    1258:	88 81       	ld	r24, Y
    125a:	8e 7f       	andi	r24, 0xFE	; 254
    125c:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    125e:	62 e0       	ldi	r22, 0x02	; 2
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	14 df       	rcall	.-472    	; 0x1090 <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    1268:	88 81       	ld	r24, Y
    126a:	81 60       	ori	r24, 0x01	; 1
    126c:	88 83       	st	Y, r24

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    126e:	66 e8       	ldi	r22, 0x86	; 134
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0c df       	rcall	.-488    	; 0x1090 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1278:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    127c:	8f 71       	andi	r24, 0x1F	; 31
    127e:	ca e0       	ldi	r28, 0x0A	; 10
    1280:	01 e4       	ldi	r16, 0x41	; 65
    1282:	11 e0       	ldi	r17, 0x01	; 1

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1284:	0b c0       	rjmp	.+22     	; 0x129c <tal_init+0x8e>
    1286:	66 e8       	ldi	r22, 0x86	; 134
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	00 df       	rcall	.-512    	; 0x1090 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1290:	f8 01       	movw	r30, r16
    1292:	80 81       	ld	r24, Z
    1294:	8f 71       	andi	r24, 0x1F	; 31
    1296:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == RESET_TO_TRX_OFF_ATTEMPTS) {
    1298:	09 f4       	brne	.+2      	; 0x129c <tal_init+0x8e>
    129a:	51 c0       	rjmp	.+162    	; 0x133e <tal_init+0x130>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    129c:	88 30       	cpi	r24, 0x08	; 8
    129e:	99 f7       	brne	.-26     	; 0x1286 <tal_init+0x78>

	tal_trx_status = TRX_OFF;
    12a0:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <tal_trx_status>

#if !defined(FPGA_EMULATION)
	/* Check if actually running on an ATmegaRFR2 device. */
	if (ATMEGARFR2_PART_NUM != trx_reg_read(RG_PART_NUM)) {
    12a4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7c015c>
    12a8:	84 39       	cpi	r24, 0x94	; 148
    12aa:	09 f0       	breq	.+2      	; 0x12ae <tal_init+0xa0>
    12ac:	48 c0       	rjmp	.+144    	; 0x133e <tal_init+0x130>
    12ae:	35 c0       	rjmp	.+106    	; 0x131a <tal_init+0x10c>
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
			*ptr_pib++ = (uint8_t)rand();
    12b0:	0e 94 96 14 	call	0x292c	; 0x292c <rand>
    12b4:	f8 01       	movw	r30, r16
    12b6:	81 93       	st	Z+, r24
    12b8:	8f 01       	movw	r16, r30
		 * generated
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
    12ba:	ec 15       	cp	r30, r12
    12bc:	fd 05       	cpc	r31, r13
    12be:	c1 f7       	brne	.-16     	; 0x12b0 <tal_init+0xa2>
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    12c0:	f7 01       	movw	r30, r14
    12c2:	20 81       	ld	r18, Z
    12c4:	31 81       	ldd	r19, Z+1	; 0x01
    12c6:	42 81       	ldd	r20, Z+2	; 0x02
    12c8:	53 81       	ldd	r21, Z+3	; 0x03
    12ca:	64 81       	ldd	r22, Z+4	; 0x04
    12cc:	75 81       	ldd	r23, Z+5	; 0x05
    12ce:	86 81       	ldd	r24, Z+6	; 0x06
    12d0:	97 81       	ldd	r25, Z+7	; 0x07
    12d2:	af ef       	ldi	r26, 0xFF	; 255
    12d4:	0e 94 37 14 	call	0x286e	; 0x286e <__adddi3_s8>
    12d8:	ad ef       	ldi	r26, 0xFD	; 253
    12da:	0e 94 43 14 	call	0x2886	; 0x2886 <__cmpdi2_s8>
    12de:	21 f0       	breq	.+8      	; 0x12e8 <tal_init+0xda>
    12e0:	18 f0       	brcs	.+6      	; 0x12e8 <tal_init+0xda>
    12e2:	08 e6       	ldi	r16, 0x68	; 104
    12e4:	15 e0       	ldi	r17, 0x05	; 5

	/*
	 * Configure interrupt handling.
	 * Install handlers for the transceiver interrupts.
	 */
	pal_trx_irq_init_rx_end((FUNC_PTR)trx_rx_end_handler_cb);
    12e6:	e4 cf       	rjmp	.-56     	; 0x12b0 <tal_init+0xa2>
    12e8:	83 ed       	ldi	r24, 0xD3	; 211
    12ea:	9a e0       	ldi	r25, 0x0A	; 10
	pal_trx_irq_init_tx_end((FUNC_PTR)trx_tx_end_handler_cb);
    12ec:	38 d0       	rcall	.+112    	; 0x135e <pal_trx_irq_init_rx_end>
    12ee:	84 ee       	ldi	r24, 0xE4	; 228
    12f0:	9a e0       	ldi	r25, 0x0A	; 10
	pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    12f2:	30 d0       	rcall	.+96     	; 0x1354 <pal_trx_irq_init_tx_end>
    12f4:	85 ef       	ldi	r24, 0xF5	; 245
    12f6:	9a e0       	ldi	r25, 0x0A	; 10
    12f8:	37 d0       	rcall	.+110    	; 0x1368 <pal_trx_irq_init_awake>
	pal_trx_irq_init_tstamp((FUNC_PTR)trx_irq_timestamp_handler_cb);
#endif /* (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Initialize the buffer management module and get a buffer to store
	 * reveived frames. */
	bmm_buffer_init();
    12fa:	32 dc       	rcall	.-1948   	; 0xb60 <bmm_buffer_init>
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    12fc:	8b e8       	ldi	r24, 0x8B	; 139
    12fe:	54 dc       	rcall	.-1880   	; 0xba8 <bmm_buffer_alloc>
    1300:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <tal_rx_buffer+0x1>
    1304:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <tal_rx_buffer>
	/* Init incoming frame queue */
#ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&tal_incoming_frame_queue,
			TAL_INCOMING_FRAME_QUEUE_CAPACITY);
#else
	qmm_queue_init(&tal_incoming_frame_queue);
    1308:	81 e6       	ldi	r24, 0x61	; 97
    130a:	95 e0       	ldi	r25, 0x05	; 5
    130c:	de dc       	rcall	.-1604   	; 0xcca <qmm_queue_init>
    130e:	cb d5       	rcall	.+2966   	; 0x1ea6 <tfa_init>
#endif  /* ENABLE_QUEUE_CAPACITY */

#ifdef ENABLE_TFA
	tfa_init();
    1310:	17 c0       	rjmp	.+46     	; 0x1340 <tal_init+0x132>
    1312:	c5 e8       	ldi	r28, 0x85	; 133
#endif

	return MAC_SUCCESS;
    1314:	15 c0       	rjmp	.+42     	; 0x1340 <tal_init+0x132>
	DRTRAM2 = _BV(ENDRT);
	DRTRAM3 = _BV(ENDRT);

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
    1316:	c5 e8       	ldi	r28, 0x85	; 133
    1318:	13 c0       	rjmp	.+38     	; 0x1340 <tal_init+0x132>
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
		return FAILURE;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	07 df       	rcall	.-498    	; 0x112c <internal_tal_reset>
	/*
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
    131e:	c8 2f       	mov	r28, r24
    1320:	81 11       	cpse	r24, r1
    1322:	f9 cf       	rjmp	.-14     	; 0x1316 <tal_init+0x108>
    1324:	0f 2e       	mov	r0, r31
    1326:	f8 e6       	ldi	r31, 0x68	; 104
    1328:	ef 2e       	mov	r14, r31
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    132a:	f5 e0       	ldi	r31, 0x05	; 5
    132c:	ff 2e       	mov	r15, r31
    132e:	f0 2d       	mov	r31, r0
    1330:	0f 2e       	mov	r0, r31
    1332:	f0 e7       	ldi	r31, 0x70	; 112
    1334:	cf 2e       	mov	r12, r31
    1336:	f5 e0       	ldi	r31, 0x05	; 5
    1338:	df 2e       	mov	r13, r31
    133a:	f0 2d       	mov	r31, r0
    133c:	c1 cf       	rjmp	.-126    	; 0x12c0 <tal_init+0xb2>
    133e:	c5 e8       	ldi	r28, 0x85	; 133
    1340:	8c 2f       	mov	r24, r28
    1342:	df 91       	pop	r29
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
	}

	if (trx_init() != MAC_SUCCESS) {
		return FAILURE;
    1344:	cf 91       	pop	r28
#ifdef ENABLE_TFA
	tfa_init();
#endif

	return MAC_SUCCESS;
} /* tal_init() */
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	08 95       	ret

00001354 <pal_trx_irq_init_tx_end>:
    1354:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <irq_hdl_trx_tx_end+0x1>
    1358:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <irq_hdl_trx_tx_end>
 *
 * \param trx_irq_cb Callback function for the transceiver CCA ED END interrupt
 */
void pal_trx_irq_init_cca_ed(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_cca_ed = (irq_handler_t)trx_irq_cb;
    135c:	08 95       	ret

0000135e <pal_trx_irq_init_rx_end>:
    135e:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <irq_hdl_trx_rx_end+0x1>
    1362:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <irq_hdl_trx_rx_end>
    1366:	08 95       	ret

00001368 <pal_trx_irq_init_awake>:
 *
 * \param trx_irq_cb Callback function for the transceiver AWAKE interrupt
 */
void pal_trx_irq_init_awake(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_awake = (irq_handler_t)trx_irq_cb;
    1368:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <irq_hdl_trx_awake+0x1>
    136c:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <irq_hdl_trx_awake>
    1370:	08 95       	ret

00001372 <__vector_63>:

/**
 * \brief ISR for transceiver's transmit end interrupt
 */
ISR(TRX24_TX_END_vect)
{
    1372:	1f 92       	push	r1
    1374:	0f 92       	push	r0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	0f 92       	push	r0
    137a:	11 24       	eor	r1, r1
    137c:	0b b6       	in	r0, 0x3b	; 59
    137e:	0f 92       	push	r0
    1380:	2f 93       	push	r18
    1382:	3f 93       	push	r19
    1384:	4f 93       	push	r20
    1386:	5f 93       	push	r21
    1388:	6f 93       	push	r22
    138a:	7f 93       	push	r23
    138c:	8f 93       	push	r24
    138e:	9f 93       	push	r25
    1390:	af 93       	push	r26
    1392:	bf 93       	push	r27
    1394:	ef 93       	push	r30
    1396:	ff 93       	push	r31
	irq_hdl_trx_tx_end();
    1398:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <irq_hdl_trx_tx_end>
    139c:	f0 91 90 04 	lds	r31, 0x0490	; 0x800490 <irq_hdl_trx_tx_end+0x1>
    13a0:	19 95       	eicall
}
    13a2:	ff 91       	pop	r31
    13a4:	ef 91       	pop	r30
    13a6:	bf 91       	pop	r27
    13a8:	af 91       	pop	r26
    13aa:	9f 91       	pop	r25
    13ac:	8f 91       	pop	r24
    13ae:	7f 91       	pop	r23
    13b0:	6f 91       	pop	r22
    13b2:	5f 91       	pop	r21
    13b4:	4f 91       	pop	r20
    13b6:	3f 91       	pop	r19
    13b8:	2f 91       	pop	r18
    13ba:	0f 90       	pop	r0
    13bc:	0b be       	out	0x3b, r0	; 59
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <__vector_60>:

/**
 * \brief ISR for transceiver's receive end interrupt
 */
ISR(TRX24_RX_END_vect)
{
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	0b b6       	in	r0, 0x3b	; 59
    13d4:	0f 92       	push	r0
    13d6:	2f 93       	push	r18
    13d8:	3f 93       	push	r19
    13da:	4f 93       	push	r20
    13dc:	5f 93       	push	r21
    13de:	6f 93       	push	r22
    13e0:	7f 93       	push	r23
    13e2:	8f 93       	push	r24
    13e4:	9f 93       	push	r25
    13e6:	af 93       	push	r26
    13e8:	bf 93       	push	r27
    13ea:	ef 93       	push	r30
    13ec:	ff 93       	push	r31
	irq_hdl_trx_rx_end();
    13ee:	e0 91 8d 04 	lds	r30, 0x048D	; 0x80048d <irq_hdl_trx_rx_end>
    13f2:	f0 91 8e 04 	lds	r31, 0x048E	; 0x80048e <irq_hdl_trx_rx_end+0x1>
    13f6:	19 95       	eicall
}
    13f8:	ff 91       	pop	r31
    13fa:	ef 91       	pop	r30
    13fc:	bf 91       	pop	r27
    13fe:	af 91       	pop	r26
    1400:	9f 91       	pop	r25
    1402:	8f 91       	pop	r24
    1404:	7f 91       	pop	r23
    1406:	6f 91       	pop	r22
    1408:	5f 91       	pop	r21
    140a:	4f 91       	pop	r20
    140c:	3f 91       	pop	r19
    140e:	2f 91       	pop	r18
    1410:	0f 90       	pop	r0
    1412:	0b be       	out	0x3b, r0	; 59
    1414:	0f 90       	pop	r0
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	0f 90       	pop	r0
    141a:	1f 90       	pop	r1
    141c:	18 95       	reti

0000141e <__vector_61>:

/**
 * \brief ISR for transceiver's CCA/ED measurement done interrupt
 */
ISR(TRX24_CCA_ED_DONE_vect)
{
    141e:	1f 92       	push	r1
    1420:	0f 92       	push	r0
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	0f 92       	push	r0
    1426:	11 24       	eor	r1, r1
    1428:	0b b6       	in	r0, 0x3b	; 59
    142a:	0f 92       	push	r0
    142c:	2f 93       	push	r18
    142e:	3f 93       	push	r19
    1430:	4f 93       	push	r20
    1432:	5f 93       	push	r21
    1434:	6f 93       	push	r22
    1436:	7f 93       	push	r23
    1438:	8f 93       	push	r24
    143a:	9f 93       	push	r25
    143c:	af 93       	push	r26
    143e:	bf 93       	push	r27
    1440:	ef 93       	push	r30
    1442:	ff 93       	push	r31
	irq_hdl_trx_cca_ed();
    1444:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <irq_hdl_trx_cca_ed>
    1448:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <irq_hdl_trx_cca_ed+0x1>
    144c:	19 95       	eicall
}
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	bf 91       	pop	r27
    1454:	af 91       	pop	r26
    1456:	9f 91       	pop	r25
    1458:	8f 91       	pop	r24
    145a:	7f 91       	pop	r23
    145c:	6f 91       	pop	r22
    145e:	5f 91       	pop	r21
    1460:	4f 91       	pop	r20
    1462:	3f 91       	pop	r19
    1464:	2f 91       	pop	r18
    1466:	0f 90       	pop	r0
    1468:	0b be       	out	0x3b, r0	; 59
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	0f 90       	pop	r0
    1470:	1f 90       	pop	r1
    1472:	18 95       	reti

00001474 <__vector_64>:

/**
 * \brief ISR for transceiver's Awake interrupt
 */
ISR(TRX24_AWAKE_vect)
{
    1474:	1f 92       	push	r1
    1476:	0f 92       	push	r0
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	0f 92       	push	r0
    147c:	11 24       	eor	r1, r1
    147e:	0b b6       	in	r0, 0x3b	; 59
    1480:	0f 92       	push	r0
    1482:	2f 93       	push	r18
    1484:	3f 93       	push	r19
    1486:	4f 93       	push	r20
    1488:	5f 93       	push	r21
    148a:	6f 93       	push	r22
    148c:	7f 93       	push	r23
    148e:	8f 93       	push	r24
    1490:	9f 93       	push	r25
    1492:	af 93       	push	r26
    1494:	bf 93       	push	r27
    1496:	ef 93       	push	r30
    1498:	ff 93       	push	r31
	irq_hdl_trx_awake();
    149a:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <irq_hdl_trx_awake>
    149e:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <irq_hdl_trx_awake+0x1>
    14a2:	19 95       	eicall
}
    14a4:	ff 91       	pop	r31
    14a6:	ef 91       	pop	r30
    14a8:	bf 91       	pop	r27
    14aa:	af 91       	pop	r26
    14ac:	9f 91       	pop	r25
    14ae:	8f 91       	pop	r24
    14b0:	7f 91       	pop	r23
    14b2:	6f 91       	pop	r22
    14b4:	5f 91       	pop	r21
    14b6:	4f 91       	pop	r20
    14b8:	3f 91       	pop	r19
    14ba:	2f 91       	pop	r18
    14bc:	0f 90       	pop	r0
    14be:	0b be       	out	0x3b, r0	; 59
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	0f 90       	pop	r0
    14c6:	1f 90       	pop	r1
    14c8:	18 95       	reti

000014ca <__vector_59>:
 *
 * By the time the SFD is detected, the hardware timestamps the
 * current frame in the SCTSR register.
 */
ISR(TRX24_RX_START_vect)
{
    14ca:	1f 92       	push	r1
    14cc:	0f 92       	push	r0
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	0f 92       	push	r0
    14d2:	11 24       	eor	r1, r1
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	irq_hdl_trx_tstamp();
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */
}
    14d4:	0f 90       	pop	r0
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	0f 90       	pop	r0
    14da:	1f 90       	pop	r1
    14dc:	18 95       	reti

000014de <__vector_57>:

/**
 * \brief ISR for transceiver's PLL lock interrupt
 */
ISR(TRX24_PLL_LOCK_vect)
{
    14de:	1f 92       	push	r1
    14e0:	0f 92       	push	r0
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	0f 92       	push	r0
    14e6:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_lock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    14e8:	0f 90       	pop	r0
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	0f 90       	pop	r0
    14ee:	1f 90       	pop	r1
    14f0:	18 95       	reti

000014f2 <__vector_58>:

/**
 * \brief ISR for transceiver's PLL unlock interrupt
 */
ISR(TRX24_PLL_UNLOCK_vect)
{
    14f2:	1f 92       	push	r1
    14f4:	0f 92       	push	r0
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	0f 92       	push	r0
    14fa:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_unlock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <__vector_62>:

/**
 * \brief ISR for transceiver's address match interrupt
 */
ISR(TRX24_XAH_AMI_vect)
{
    1506:	1f 92       	push	r1
    1508:	0f 92       	push	r0
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	0f 92       	push	r0
    150e:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti

0000151a <__vector_71>:

/**
 * \brief ISR for transceiver's battery low interrupt
 */
ISR(BAT_LOW_vect)
{
    151a:	1f 92       	push	r1
    151c:	0f 92       	push	r0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	0f 92       	push	r0
    1522:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_batmon();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	0f 90       	pop	r0
    152a:	1f 90       	pop	r1
    152c:	18 95       	reti

0000152e <__vector_70>:

/**
 * \brief ISR for transceiver's AES interrupt
 */
ISR(AES_READY_vect)
{
    152e:	1f 92       	push	r1
    1530:	0f 92       	push	r0
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	0f 92       	push	r0
    1536:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_aes_ready();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <__vector_72>:

/**
 * \brief ISR for transceiver's TX_START interrupt
 */
ISR(TRX24_TX_START_vect)
{
    1542:	1f 92       	push	r1
    1544:	0f 92       	push	r0
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	0f 92       	push	r0
    154a:	11 24       	eor	r1, r1
	pal_tx_timestamp = PAL_US_PER_SYMBOLS * SC_READ32(SCCNT);
#endif
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_tx_start();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <__vector_73>:

/**
 * \brief ISR for transceiver's AMI0 interrupt
 */
ISR(TRX24_AMI0_vect)
{
    1556:	1f 92       	push	r1
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	0f 92       	push	r0
    155e:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami0();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1560:	0f 90       	pop	r0
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	0f 90       	pop	r0
    1566:	1f 90       	pop	r1
    1568:	18 95       	reti

0000156a <__vector_74>:

/**
 * \brief ISR for transceiver's AMI1 interrupt
 */
ISR(TRX24_AMI1_vect)
{
    156a:	1f 92       	push	r1
    156c:	0f 92       	push	r0
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	0f 92       	push	r0
    1572:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami1();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_75>:

/**
 * \brief ISR for transceiver's AMI2 interrupt
 */
ISR(TRX24_AMI2_vect)
{
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami2();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1588:	0f 90       	pop	r0
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	0f 90       	pop	r0
    158e:	1f 90       	pop	r1
    1590:	18 95       	reti

00001592 <__vector_76>:

/**
 * \brief ISR for transceiver's AMI3 interrupt
 */
ISR(TRX24_AMI3_vect)
{
    1592:	1f 92       	push	r1
    1594:	0f 92       	push	r0
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	0f 92       	push	r0
    159a:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami3();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <trx_rx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for RX end.
 */
void trx_rx_end_handler_cb(void)
{
    15a6:	1f 93       	push	r17
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	1f 92       	push	r1
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15b2:	8f b7       	in	r24, 0x3f	; 63
    15b4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    15b6:	f8 94       	cli
	return flags;
    15b8:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Handle rx interrupt. */
	handle_received_frame_irq(); /* see tal_rx.c */
    15ba:	19 d2       	rcall	.+1074   	; 0x19ee <handle_received_frame_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15bc:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_rx_end_handler_cb() */
    15be:	0f 90       	pop	r0
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	08 95       	ret

000015c8 <trx_tx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for TX end.
 */
void trx_tx_end_handler_cb(void)
{
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	1f 92       	push	r1
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15d4:	8f b7       	in	r24, 0x3f	; 63
    15d6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    15d8:	f8 94       	cli
	return flags;
    15da:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Get the result and push it to the queue. */
	handle_tx_end_irq();        /* see tal_tx.c */
    15dc:	a6 d3       	rcall	.+1868   	; 0x1d2a <handle_tx_end_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15de:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_tx_end_handler_cb() */
    15e0:	0f 90       	pop	r0
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	08 95       	ret

000015ea <trx_awake_handler_cb>:
 * This function handles the transceiver awake end interrupt.
 */
void trx_awake_handler_cb(void)
{
	/* Set the wake-up flag. */
	tal_awake_end_flag = true;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <tal_awake_end_flag>
    15f0:	08 95       	ret

000015f2 <limit_tx_pwr>:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
} /* tal_pib_get() */
    15f2:	85 fd       	sbrc	r24, 5
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <limit_tx_pwr+0xa>
    15f6:	98 2f       	mov	r25, r24
    15f8:	9f 73       	andi	r25, 0x3F	; 63
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <limit_tx_pwr+0x12>
    15fc:	98 2f       	mov	r25, r24
    15fe:	91 95       	neg	r25
    1600:	9f 71       	andi	r25, 0x1F	; 31
    1602:	91 95       	neg	r25
    1604:	e2 e6       	ldi	r30, 0x62	; 98
    1606:	f1 e0       	ldi	r31, 0x01	; 1
    1608:	24 91       	lpm	r18, Z
    160a:	29 17       	cp	r18, r25
    160c:	54 f4       	brge	.+20     	; 0x1622 <limit_tx_pwr+0x30>
    160e:	84 91       	lpm	r24, Z
    1610:	80 3e       	cpi	r24, 0xE0	; 224
    1612:	b4 f0       	brlt	.+44     	; 0x1640 <limit_tx_pwr+0x4e>
    1614:	80 32       	cpi	r24, 0x20	; 32
    1616:	b4 f4       	brge	.+44     	; 0x1644 <limit_tx_pwr+0x52>
    1618:	88 23       	and	r24, r24
    161a:	cc f4       	brge	.+50     	; 0x164e <limit_tx_pwr+0x5c>
    161c:	8f 71       	andi	r24, 0x1F	; 31
    161e:	80 62       	ori	r24, 0x20	; 32
    1620:	16 c0       	rjmp	.+44     	; 0x164e <limit_tx_pwr+0x5c>
    1622:	e1 e7       	ldi	r30, 0x71	; 113
    1624:	f1 e0       	ldi	r31, 0x01	; 1
    1626:	24 91       	lpm	r18, Z
    1628:	92 17       	cp	r25, r18
    162a:	8c f4       	brge	.+34     	; 0x164e <limit_tx_pwr+0x5c>
    162c:	84 91       	lpm	r24, Z
    162e:	80 3e       	cpi	r24, 0xE0	; 224
    1630:	5c f0       	brlt	.+22     	; 0x1648 <limit_tx_pwr+0x56>
    1632:	80 32       	cpi	r24, 0x20	; 32
    1634:	5c f4       	brge	.+22     	; 0x164c <limit_tx_pwr+0x5a>
    1636:	88 23       	and	r24, r24
    1638:	54 f4       	brge	.+20     	; 0x164e <limit_tx_pwr+0x5c>
    163a:	8f 71       	andi	r24, 0x1F	; 31
    163c:	80 62       	ori	r24, 0x20	; 32
    163e:	07 c0       	rjmp	.+14     	; 0x164e <limit_tx_pwr+0x5c>
    1640:	80 e2       	ldi	r24, 0x20	; 32
    1642:	05 c0       	rjmp	.+10     	; 0x164e <limit_tx_pwr+0x5c>
    1644:	8f e1       	ldi	r24, 0x1F	; 31
    1646:	03 c0       	rjmp	.+6      	; 0x164e <limit_tx_pwr+0x5c>
    1648:	80 e2       	ldi	r24, 0x20	; 32
    164a:	01 c0       	rjmp	.+2      	; 0x164e <limit_tx_pwr+0x5c>
    164c:	8f e1       	ldi	r24, 0x1F	; 31
    164e:	80 68       	ori	r24, 0x80	; 128
    1650:	08 95       	ret

00001652 <init_tal_pib>:
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	c8 e6       	ldi	r28, 0x68	; 104
    1658:	d5 e0       	ldi	r29, 0x05	; 5
    165a:	84 e0       	ldi	r24, 0x04	; 4
    165c:	8c 8b       	std	Y+20, r24	; 0x14
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	8d 8b       	std	Y+21, r24	; 0x15
    1662:	2f ef       	ldi	r18, 0xFF	; 255
    1664:	3f ef       	ldi	r19, 0xFF	; 255
    1666:	3f 87       	std	Y+15, r19	; 0x0f
    1668:	2e 87       	std	Y+14, r18	; 0x0e
    166a:	3d 87       	std	Y+13, r19	; 0x0d
    166c:	2c 87       	std	Y+12, r18	; 0x0c
    166e:	9b e0       	ldi	r25, 0x0B	; 11
    1670:	9b 8b       	std	Y+19, r25	; 0x13
    1672:	18 8e       	std	Y+24, r1	; 0x18
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	58 ef       	ldi	r21, 0xF8	; 248
    1678:	6f ef       	ldi	r22, 0xFF	; 255
    167a:	77 e0       	ldi	r23, 0x07	; 7
    167c:	48 87       	std	Y+8, r20	; 0x08
    167e:	59 87       	std	Y+9, r21	; 0x09
    1680:	6a 87       	std	Y+10, r22	; 0x0a
    1682:	7b 87       	std	Y+11, r23	; 0x0b
    1684:	2a e0       	ldi	r18, 0x0A	; 10
    1686:	31 e0       	ldi	r19, 0x01	; 1
    1688:	39 8b       	std	Y+17, r19	; 0x11
    168a:	28 8b       	std	Y+16, r18	; 0x10
    168c:	9a e0       	ldi	r25, 0x0A	; 10
    168e:	99 8f       	std	Y+25, r25	; 0x19
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	9a 8f       	std	Y+26, r25	; 0x1a
    1694:	95 e0       	ldi	r25, 0x05	; 5
    1696:	9b 8f       	std	Y+27, r25	; 0x1b
    1698:	8c 8f       	std	Y+28, r24	; 0x1c
    169a:	84 e8       	ldi	r24, 0x84	; 132
    169c:	aa df       	rcall	.-172    	; 0x15f2 <limit_tx_pwr>
    169e:	8f 8b       	std	Y+23, r24	; 0x17
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	8a 8b       	std	Y+18, r24	; 0x12
    16a4:	1e 8a       	std	Y+22, r1	; 0x16
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	08 95       	ret

000016ac <convert_phyTransmitPower_to_reg_value>:
{
	int8_t dbm_value;
	uint8_t i;
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);
    16ac:	85 fd       	sbrc	r24, 5
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <convert_phyTransmitPower_to_reg_value+0x8>
    16b0:	8f 73       	andi	r24, 0x3F	; 63
    16b2:	03 c0       	rjmp	.+6      	; 0x16ba <convert_phyTransmitPower_to_reg_value+0xe>
    16b4:	81 95       	neg	r24
    16b6:	8f 71       	andi	r24, 0x1F	; 31
    16b8:	81 95       	neg	r24

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    16ba:	e2 e6       	ldi	r30, 0x62	; 98
    16bc:	f1 e0       	ldi	r31, 0x01	; 1
    16be:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    16c0:	89 17       	cp	r24, r25
    16c2:	3c f4       	brge	.+14     	; 0x16d2 <convert_phyTransmitPower_to_reg_value+0x26>
    16c4:	e3 e6       	ldi	r30, 0x63	; 99
    16c6:	f1 e0       	ldi	r31, 0x01	; 1
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    16c8:	21 e0       	ldi	r18, 0x01	; 1
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    16ca:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    16cc:	89 17       	cp	r24, r25
    16ce:	3c f0       	brlt	.+14     	; 0x16de <convert_phyTransmitPower_to_reg_value+0x32>
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <convert_phyTransmitPower_to_reg_value+0x28>
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    16d2:	20 e0       	ldi	r18, 0x00	; 0
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
		if (trx_tx_level <= dbm_value) {
			if (trx_tx_level < dbm_value) {
    16d4:	98 17       	cp	r25, r24
    16d6:	4c f4       	brge	.+18     	; 0x16ea <convert_phyTransmitPower_to_reg_value+0x3e>
				return (i - 1);
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	82 0f       	add	r24, r18
    16dc:	08 95       	ret
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    16de:	2f 5f       	subi	r18, 0xFF	; 255
    16e0:	31 96       	adiw	r30, 0x01	; 1
    16e2:	20 31       	cpi	r18, 0x10	; 16
    16e4:	91 f7       	brne	.-28     	; 0x16ca <convert_phyTransmitPower_to_reg_value+0x1e>
			return i;
		}
	}

	/* This code should never be reached. */
	return 0;
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	08 95       	ret
    16ea:	82 2f       	mov	r24, r18
}
    16ec:	08 95       	ret

000016ee <write_all_tal_pib_to_trx>:
 *
 * This function writes all shadow PIB variables to the transceiver.
 * It is assumed that the radio does not sleep.
 */
void write_all_tal_pib_to_trx(void)
{
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
	uint8_t *ptr_to_reg;

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    16f2:	e8 e6       	ldi	r30, 0x68	; 104
    16f4:	f5 e0       	ldi	r31, 0x05	; 5
    16f6:	86 85       	ldd	r24, Z+14	; 0x0e
    16f8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));
    16fc:	87 85       	ldd	r24, Z+15	; 0x0f
    16fe:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    1702:	e4 e6       	ldi	r30, 0x64	; 100
    1704:	f1 e0       	ldi	r31, 0x01	; 1

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
    1706:	a8 e6       	ldi	r26, 0x68	; 104
    1708:	b5 e0       	ldi	r27, 0x05	; 5
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    170a:	8d 91       	ld	r24, X+
    170c:	81 93       	st	Z+, r24

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
	for (uint8_t i = 0; i < 8; i++) {
    170e:	ec 36       	cpi	r30, 0x6C	; 108
    1710:	31 e0       	ldi	r19, 0x01	; 1
    1712:	f3 07       	cpc	r31, r19
    1714:	d1 f7       	brne	.-12     	; 0x170a <write_all_tal_pib_to_trx+0x1c>
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
		ptr_to_reg++;
	}

	trx_reg_write(RG_SHORT_ADDR_0, (uint8_t)tal_pib.ShortAddress);
    1716:	e8 e6       	ldi	r30, 0x68	; 104
    1718:	f5 e0       	ldi	r31, 0x05	; 5
    171a:	84 85       	ldd	r24, Z+12	; 0x0c
    171c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
	trx_reg_write(RG_SHORT_ADDR_1,
    1720:	85 85       	ldd	r24, Z+13	; 0x0d
    1722:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			(uint8_t)(tal_pib.ShortAddress >> 8));

	/* configure TX_ARET; CSMA and CCA */
	trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    1726:	48 e4       	ldi	r20, 0x48	; 72
    1728:	51 e0       	ldi	r21, 0x01	; 1
    172a:	da 01       	movw	r26, r20
    172c:	8c 91       	ld	r24, X
    172e:	22 89       	ldd	r18, Z+18	; 0x12
    1730:	b0 e2       	ldi	r27, 0x20	; 32
    1732:	2b 9f       	mul	r18, r27
    1734:	90 01       	movw	r18, r0
    1736:	11 24       	eor	r1, r1
    1738:	20 76       	andi	r18, 0x60	; 96
    173a:	8f 79       	andi	r24, 0x9F	; 159
    173c:	82 2b       	or	r24, r18
    173e:	da 01       	movw	r26, r20
    1740:	8c 93       	st	X, r24
	trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    1742:	cf e6       	ldi	r28, 0x6F	; 111
    1744:	d1 e0       	ldi	r29, 0x01	; 1
    1746:	88 81       	ld	r24, Y
    1748:	95 89       	ldd	r25, Z+21	; 0x15
    174a:	9f 70       	andi	r25, 0x0F	; 15
    174c:	80 7f       	andi	r24, 0xF0	; 240
    174e:	89 2b       	or	r24, r25
    1750:	88 83       	st	Y, r24

	trx_bit_write(SR_AACK_I_AM_COORD, tal_pib.PrivatePanCoordinator);
    1752:	2e e6       	ldi	r18, 0x6E	; 110
    1754:	31 e0       	ldi	r19, 0x01	; 1
    1756:	d9 01       	movw	r26, r18
    1758:	8c 91       	ld	r24, X
    175a:	96 89       	ldd	r25, Z+22	; 0x16
    175c:	99 0f       	add	r25, r25
    175e:	99 0f       	add	r25, r25
    1760:	99 0f       	add	r25, r25
    1762:	98 70       	andi	r25, 0x08	; 8
    1764:	87 7f       	andi	r24, 0xF7	; 247
    1766:	89 2b       	or	r24, r25
    1768:	8c 93       	st	X, r24

	/* set phy parameter */
	trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    176a:	28 81       	ld	r18, Y
    176c:	93 8d       	ldd	r25, Z+27	; 0x1b
    176e:	b0 e1       	ldi	r27, 0x10	; 16
    1770:	9b 9f       	mul	r25, r27
    1772:	c0 01       	movw	r24, r0
    1774:	11 24       	eor	r1, r1
    1776:	92 2f       	mov	r25, r18
    1778:	9f 70       	andi	r25, 0x0F	; 15
    177a:	89 2b       	or	r24, r25
    177c:	88 83       	st	Y, r24

#ifdef HIGH_DATA_RATE_SUPPORT
	apply_channel_page_configuration(tal_pib.CurrentPage);
#endif

	trx_bit_write(SR_CHANNEL, tal_pib.CurrentChannel);
    177e:	da 01       	movw	r26, r20
    1780:	8c 91       	ld	r24, X
    1782:	93 89       	ldd	r25, Z+19	; 0x13
    1784:	9f 71       	andi	r25, 0x1F	; 31
    1786:	80 7e       	andi	r24, 0xE0	; 224
    1788:	89 2b       	or	r24, r25
    178a:	8c 93       	st	X, r24
	{
		uint8_t reg_value;

		reg_value = convert_phyTransmitPower_to_reg_value(
    178c:	87 89       	ldd	r24, Z+23	; 0x17
    178e:	8e df       	rcall	.-228    	; 0x16ac <convert_phyTransmitPower_to_reg_value>
				tal_pib.TransmitPower);
		trx_bit_write(SR_TX_PWR, reg_value);
    1790:	e5 e4       	ldi	r30, 0x45	; 69
    1792:	f1 e0       	ldi	r31, 0x01	; 1
    1794:	90 81       	ld	r25, Z
    1796:	90 7f       	andi	r25, 0xF0	; 240
    1798:	8f 70       	andi	r24, 0x0F	; 15
    179a:	89 2b       	or	r24, r25
    179c:	80 83       	st	Z, r24
#ifdef PROMISCUOUS_MODE
	if (tal_pib.PromiscuousMode) {
		set_trx_state(CMD_RX_ON);
	}
#endif
}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <tal_pib_set>:
 *         in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 *         TAL_TRX_ASLEEP if trx is in SLEEP mode and access to trx is required
 */
retval_t tal_pib_set(uint8_t attribute, pib_value_t *value)
{
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
	 * and those that are simple variable udpates.
	 * Ensure that the transceiver is not in SLEEP.
	 * If it is in SLEEP, change it to TRX_OFF.
	 */

	switch (attribute) {
    17a8:	8e 34       	cpi	r24, 0x4E	; 78
    17aa:	41 f0       	breq	.+16     	; 0x17bc <tal_pib_set+0x18>
    17ac:	89 35       	cpi	r24, 0x59	; 89
    17ae:	61 f4       	brne	.+24     	; 0x17c8 <tal_pib_set+0x24>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
    17b0:	fb 01       	movw	r30, r22
    17b2:	80 81       	ld	r24, Z
    17b4:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <tal_pib+0x1c>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    17b8:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
		break;
    17ba:	0b c1       	rjmp	.+534    	; 0x19d2 <tal_pib_set+0x22e>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
    17bc:	fb 01       	movw	r30, r22
    17be:	80 81       	ld	r24, Z
    17c0:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <tal_pib+0x14>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    17c4:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
		break;
    17c6:	05 c1       	rjmp	.+522    	; 0x19d2 <tal_pib_set+0x22e>
		/*
		 * Following PIBs require access to trx.
		 * Therefore trx must be at least in TRX_OFF.
		 */

		if (tal_trx_status == TRX_SLEEP) {
    17c8:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <tal_trx_status>
    17cc:	9f 30       	cpi	r25, 0x0F	; 15
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <tal_pib_set+0x2e>
    17d0:	dc c0       	rjmp	.+440    	; 0x198a <tal_pib_set+0x1e6>
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
		}

		switch (attribute) {
    17d2:	8b 30       	cpi	r24, 0x0B	; 11
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <tal_pib_set+0x34>
    17d6:	c9 c0       	rjmp	.+402    	; 0x196a <tal_pib_set+0x1c6>
    17d8:	80 f4       	brcc	.+32     	; 0x17fa <tal_pib_set+0x56>
    17da:	eb 01       	movw	r28, r22
    17dc:	82 30       	cpi	r24, 0x02	; 2
    17de:	09 f4       	brne	.+2      	; 0x17e2 <tal_pib_set+0x3e>
    17e0:	84 c0       	rjmp	.+264    	; 0x18ea <tal_pib_set+0x146>
    17e2:	20 f4       	brcc	.+8      	; 0x17ec <tal_pib_set+0x48>
    17e4:	88 23       	and	r24, r24
    17e6:	09 f4       	brne	.+2      	; 0x17ea <tal_pib_set+0x46>
    17e8:	46 c0       	rjmp	.+140    	; 0x1876 <tal_pib_set+0xd2>
    17ea:	d1 c0       	rjmp	.+418    	; 0x198e <tal_pib_set+0x1ea>
    17ec:	83 30       	cpi	r24, 0x03	; 3
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <tal_pib_set+0x4e>
    17f0:	8c c0       	rjmp	.+280    	; 0x190a <tal_pib_set+0x166>
    17f2:	84 30       	cpi	r24, 0x04	; 4
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <tal_pib_set+0x54>
    17f6:	5a c0       	rjmp	.+180    	; 0x18ac <tal_pib_set+0x108>
    17f8:	ca c0       	rjmp	.+404    	; 0x198e <tal_pib_set+0x1ea>
    17fa:	83 35       	cpi	r24, 0x53	; 83
    17fc:	79 f1       	breq	.+94     	; 0x185c <tal_pib_set+0xb8>
    17fe:	28 f4       	brcc	.+10     	; 0x180a <tal_pib_set+0x66>
    1800:	8f 34       	cpi	r24, 0x4F	; 79
    1802:	51 f0       	breq	.+20     	; 0x1818 <tal_pib_set+0x74>
    1804:	80 35       	cpi	r24, 0x50	; 80
    1806:	e9 f0       	breq	.+58     	; 0x1842 <tal_pib_set+0x9e>
    1808:	c2 c0       	rjmp	.+388    	; 0x198e <tal_pib_set+0x1ea>
    180a:	87 35       	cpi	r24, 0x57	; 87
    180c:	09 f4       	brne	.+2      	; 0x1810 <tal_pib_set+0x6c>
    180e:	56 c0       	rjmp	.+172    	; 0x18bc <tal_pib_set+0x118>
    1810:	80 3f       	cpi	r24, 0xF0	; 240
    1812:	09 f4       	brne	.+2      	; 0x1816 <tal_pib_set+0x72>
    1814:	8b c0       	rjmp	.+278    	; 0x192c <tal_pib_set+0x188>
    1816:	bb c0       	rjmp	.+374    	; 0x198e <tal_pib_set+0x1ea>
		case macMinBE:
			tal_pib.MinBE = value->pib_value_8bit;
    1818:	fb 01       	movw	r30, r22
    181a:	80 81       	ld	r24, Z
    181c:	e8 e6       	ldi	r30, 0x68	; 104
    181e:	f5 e0       	ldi	r31, 0x05	; 5
    1820:	85 8b       	std	Z+21, r24	; 0x15
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MinBE > tal_pib.MaxBE) {
    1822:	93 8d       	ldd	r25, Z+27	; 0x1b
    1824:	98 17       	cp	r25, r24
    1826:	10 f4       	brcc	.+4      	; 0x182c <tal_pib_set+0x88>
				tal_pib.MinBE = tal_pib.MaxBE;
    1828:	90 93 7d 05 	sts	0x057D, r25	; 0x80057d <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    182c:	ef e6       	ldi	r30, 0x6F	; 111
    182e:	f1 e0       	ldi	r31, 0x01	; 1
    1830:	80 81       	ld	r24, Z
    1832:	90 91 7d 05 	lds	r25, 0x057D	; 0x80057d <tal_pib+0x15>
    1836:	9f 70       	andi	r25, 0x0F	; 15
    1838:	80 7f       	andi	r24, 0xF0	; 240
    183a:	89 2b       	or	r24, r25
    183c:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    183e:	80 e0       	ldi	r24, 0x00	; 0
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
			break;
    1840:	c8 c0       	rjmp	.+400    	; 0x19d2 <tal_pib_set+0x22e>

		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
    1842:	fb 01       	movw	r30, r22
    1844:	90 81       	ld	r25, Z
    1846:	81 81       	ldd	r24, Z+1	; 0x01
    1848:	e8 e6       	ldi	r30, 0x68	; 104
    184a:	f5 e0       	ldi	r31, 0x05	; 5
    184c:	96 87       	std	Z+14, r25	; 0x0e
    184e:	87 87       	std	Z+15, r24	; 0x0f
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    1850:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
			trx_reg_write(RG_PAN_ID_1,
    1854:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1858:	80 e0       	ldi	r24, 0x00	; 0
		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
			trx_reg_write(RG_PAN_ID_1,
					(uint8_t)(tal_pib.PANId >> 8));
			break;
    185a:	bb c0       	rjmp	.+374    	; 0x19d2 <tal_pib_set+0x22e>

		case macShortAddress:
			tal_pib.ShortAddress = value->pib_value_16bit;
    185c:	fb 01       	movw	r30, r22
    185e:	90 81       	ld	r25, Z
    1860:	81 81       	ldd	r24, Z+1	; 0x01
    1862:	e8 e6       	ldi	r30, 0x68	; 104
    1864:	f5 e0       	ldi	r31, 0x05	; 5
    1866:	94 87       	std	Z+12, r25	; 0x0c
    1868:	85 87       	std	Z+13, r24	; 0x0d
			trx_reg_write(RG_SHORT_ADDR_0,
    186a:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
    186e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1872:	80 e0       	ldi	r24, 0x00	; 0
			tal_pib.ShortAddress = value->pib_value_16bit;
			trx_reg_write(RG_SHORT_ADDR_0,
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;
    1874:	ae c0       	rjmp	.+348    	; 0x19d2 <tal_pib_set+0x22e>

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
    1876:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <tal_state>
    187a:	81 11       	cpse	r24, r1
    187c:	8a c0       	rjmp	.+276    	; 0x1992 <tal_pib_set+0x1ee>
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
					((uint32_t)0x01 <<
					value->pib_value_8bit)) {
    187e:	88 81       	ld	r24, Y
		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	58 ef       	ldi	r21, 0xF8	; 248
    1884:	6f ef       	ldi	r22, 0xFF	; 255
    1886:	77 e0       	ldi	r23, 0x07	; 7
    1888:	08 2e       	mov	r0, r24
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <tal_pib_set+0xf0>
    188c:	76 95       	lsr	r23
    188e:	67 95       	ror	r22
    1890:	57 95       	ror	r21
    1892:	47 95       	ror	r20
    1894:	0a 94       	dec	r0
    1896:	d2 f7       	brpl	.-12     	; 0x188c <tal_pib_set+0xe8>
    1898:	40 ff       	sbrs	r20, 0
    189a:	7d c0       	rjmp	.+250    	; 0x1996 <tal_pib_set+0x1f2>

				/*
				 * Set trx to "soft" off avoiding that ongoing
				 * transaction (e.g. ACK) are interrupted.
				 */
				if (tal_trx_status != TRX_OFF) {
    189c:	98 30       	cpi	r25, 0x08	; 8
    189e:	09 f4       	brne	.+2      	; 0x18a2 <tal_pib_set+0xfe>
    18a0:	80 c0       	rjmp	.+256    	; 0x19a2 <tal_pib_set+0x1fe>
					                                   **/
					do {
						/* set TRX_OFF until it could be
						 * set;
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
    18a2:	88 e0       	ldi	r24, 0x08	; 8
    18a4:	6d da       	rcall	.-2854   	; 0xd80 <set_trx_state>
							TRX_OFF);
    18a6:	88 30       	cpi	r24, 0x08	; 8
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <tal_pib_set+0xfe>
    18aa:	86 c0       	rjmp	.+268    	; 0x19b8 <tal_pib_set+0x214>
					return MAC_INVALID_PARAMETER;
				}
			}

#else
			if (tal_state != TAL_IDLE) {
    18ac:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <tal_state>
    18b0:	81 11       	cpse	r24, r1
    18b2:	73 c0       	rjmp	.+230    	; 0x199a <tal_pib_set+0x1f6>
				return TAL_BUSY;
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
    18b4:	88 81       	ld	r24, Y
    18b6:	81 11       	cpse	r24, r1
    18b8:	72 c0       	rjmp	.+228    	; 0x199e <tal_pib_set+0x1fa>
    18ba:	8b c0       	rjmp	.+278    	; 0x19d2 <tal_pib_set+0x22e>
			}
#endif  /* #ifdef HIGH_DATA_RATE_SUPPORT */
			break;

		case macMaxBE:
			tal_pib.MaxBE = value->pib_value_8bit;
    18bc:	fb 01       	movw	r30, r22
    18be:	90 81       	ld	r25, Z
    18c0:	e8 e6       	ldi	r30, 0x68	; 104
    18c2:	f5 e0       	ldi	r31, 0x05	; 5
    18c4:	93 8f       	std	Z+27, r25	; 0x1b
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MaxBE < tal_pib.MinBE) {
    18c6:	85 89       	ldd	r24, Z+21	; 0x15
    18c8:	98 17       	cp	r25, r24
    18ca:	10 f4       	brcc	.+4      	; 0x18d0 <tal_pib_set+0x12c>
				tal_pib.MinBE = tal_pib.MaxBE;
    18cc:	90 93 7d 05 	sts	0x057D, r25	; 0x80057d <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    18d0:	ef e6       	ldi	r30, 0x6F	; 111
    18d2:	f1 e0       	ldi	r31, 0x01	; 1
    18d4:	80 81       	ld	r24, Z
    18d6:	28 2f       	mov	r18, r24
    18d8:	2f 70       	andi	r18, 0x0F	; 15
    18da:	30 e1       	ldi	r19, 0x10	; 16
    18dc:	93 9f       	mul	r25, r19
    18de:	c0 01       	movw	r24, r0
    18e0:	11 24       	eor	r1, r1
    18e2:	82 2b       	or	r24, r18
    18e4:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    18e6:	80 e0       	ldi	r24, 0x00	; 0
			if (tal_pib.MaxBE < tal_pib.MinBE) {
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
			break;
    18e8:	74 c0       	rjmp	.+232    	; 0x19d2 <tal_pib_set+0x22e>

		case phyTransmitPower:
		{
			uint8_t reg_value;

			tal_pib.TransmitPower = value->pib_value_8bit;
    18ea:	88 81       	ld	r24, Y
    18ec:	c8 e6       	ldi	r28, 0x68	; 104
    18ee:	d5 e0       	ldi	r29, 0x05	; 5

			/* Limit tal_pib.TransmitPower to max/min trx values */
			tal_pib.TransmitPower = limit_tx_pwr(
    18f0:	8f 8b       	std	Y+23, r24	; 0x17
    18f2:	7f de       	rcall	.-770    	; 0x15f2 <limit_tx_pwr>
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
    18f4:	8f 8b       	std	Y+23, r24	; 0x17
    18f6:	da de       	rcall	.-588    	; 0x16ac <convert_phyTransmitPower_to_reg_value>
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
    18f8:	e5 e4       	ldi	r30, 0x45	; 69
    18fa:	f1 e0       	ldi	r31, 0x01	; 1
    18fc:	90 81       	ld	r25, Z
    18fe:	90 7f       	andi	r25, 0xF0	; 240
    1900:	8f 70       	andi	r24, 0x0F	; 15
    1902:	89 2b       	or	r24, r25
    1904:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1906:	80 e0       	ldi	r24, 0x00	; 0
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
		}
		break;
    1908:	64 c0       	rjmp	.+200    	; 0x19d2 <tal_pib_set+0x22e>

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
    190a:	88 81       	ld	r24, Y
    190c:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <tal_pib+0x12>
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    1910:	e8 e4       	ldi	r30, 0x48	; 72
    1912:	f1 e0       	ldi	r31, 0x01	; 1
    1914:	20 81       	ld	r18, Z
    1916:	30 e2       	ldi	r19, 0x20	; 32
    1918:	83 9f       	mul	r24, r19
    191a:	c0 01       	movw	r24, r0
    191c:	11 24       	eor	r1, r1
    191e:	80 76       	andi	r24, 0x60	; 96
    1920:	92 2f       	mov	r25, r18
    1922:	9f 79       	andi	r25, 0x9F	; 159
    1924:	89 2b       	or	r24, r25
    1926:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1928:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
			break;
    192a:	53 c0       	rjmp	.+166    	; 0x19d2 <tal_pib_set+0x22e>

		case macIeeeAddress:
		{
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
    192c:	fb 01       	movw	r30, r22
    192e:	b0 81       	ld	r27, Z
    1930:	a1 81       	ldd	r26, Z+1	; 0x01
    1932:	52 81       	ldd	r21, Z+2	; 0x02
    1934:	43 81       	ldd	r20, Z+3	; 0x03
    1936:	34 81       	ldd	r19, Z+4	; 0x04
    1938:	25 81       	ldd	r18, Z+5	; 0x05
    193a:	96 81       	ldd	r25, Z+6	; 0x06
    193c:	87 81       	ldd	r24, Z+7	; 0x07
    193e:	e8 e6       	ldi	r30, 0x68	; 104
    1940:	f5 e0       	ldi	r31, 0x05	; 5
    1942:	b0 83       	st	Z, r27
    1944:	a1 83       	std	Z+1, r26	; 0x01
    1946:	52 83       	std	Z+2, r21	; 0x02
    1948:	43 83       	std	Z+3, r20	; 0x03
    194a:	34 83       	std	Z+4, r19	; 0x04
    194c:	25 83       	std	Z+5, r18	; 0x05
    194e:	96 83       	std	Z+6, r25	; 0x06
    1950:	87 83       	std	Z+7, r24	; 0x07
    1952:	e4 e6       	ldi	r30, 0x64	; 100
    1954:	f1 e0       	ldi	r31, 0x01	; 1
			ptr = (uint8_t *)&tal_pib.IeeeAddress;
    1956:	a8 e6       	ldi	r26, 0x68	; 104
    1958:	b5 e0       	ldi	r27, 0x05	; 5

			for (uint8_t i = 0; i < 8; i++) {
				trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr);
    195a:	8d 91       	ld	r24, X+
    195c:	81 93       	st	Z+, r24
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
			ptr = (uint8_t *)&tal_pib.IeeeAddress;

			for (uint8_t i = 0; i < 8; i++) {
    195e:	ec 36       	cpi	r30, 0x6C	; 108
    1960:	31 e0       	ldi	r19, 0x01	; 1
    1962:	f3 07       	cpc	r31, r19
    1964:	d1 f7       	brne	.-12     	; 0x195a <tal_pib_set+0x1b6>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	34 c0       	rjmp	.+104    	; 0x19d2 <tal_pib_set+0x22e>
			}
		}
		break;

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
    196a:	fb 01       	movw	r30, r22
    196c:	80 81       	ld	r24, Z
    196e:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <tal_pib+0x16>
			trx_bit_write(SR_AACK_I_AM_COORD,
    1972:	ee e6       	ldi	r30, 0x6E	; 110
    1974:	f1 e0       	ldi	r31, 0x01	; 1
    1976:	90 81       	ld	r25, Z
    1978:	88 0f       	add	r24, r24
    197a:	88 0f       	add	r24, r24
    197c:	88 0f       	add	r24, r24
    197e:	88 70       	andi	r24, 0x08	; 8
    1980:	97 7f       	andi	r25, 0xF7	; 247
    1982:	89 2b       	or	r24, r25
    1984:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1986:	80 e0       	ldi	r24, 0x00	; 0

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
			trx_bit_write(SR_AACK_I_AM_COORD,
					tal_pib.PrivatePanCoordinator);
			break;
    1988:	24 c0       	rjmp	.+72     	; 0x19d2 <tal_pib_set+0x22e>
		 */

		if (tal_trx_status == TRX_SLEEP) {
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
    198a:	81 e8       	ldi	r24, 0x81	; 129
    198c:	22 c0       	rjmp	.+68     	; 0x19d2 <tal_pib_set+0x22e>
			 * w.r.t.
			 * compliance operation.
			 * The ACK timing can be reduced to 2 symbols using TFA
			 * function.
			 */
			return MAC_UNSUPPORTED_ATTRIBUTE;
    198e:	84 ef       	ldi	r24, 0xF4	; 244
    1990:	20 c0       	rjmp	.+64     	; 0x19d2 <tal_pib_set+0x22e>
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    1992:	86 e8       	ldi	r24, 0x86	; 134
    1994:	1e c0       	rjmp	.+60     	; 0x19d2 <tal_pib_set+0x22e>
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
				}
			} else {
				return MAC_INVALID_PARAMETER;
    1996:	88 ee       	ldi	r24, 0xE8	; 232
    1998:	1c c0       	rjmp	.+56     	; 0x19d2 <tal_pib_set+0x22e>
				}
			}

#else
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    199a:	86 e8       	ldi	r24, 0x86	; 134
    199c:	1a c0       	rjmp	.+52     	; 0x19d2 <tal_pib_set+0x22e>
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
					return MAC_INVALID_PARAMETER;
    199e:	88 ee       	ldi	r24, 0xE8	; 232
    19a0:	18 c0       	rjmp	.+48     	; 0x19d2 <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    19a2:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    19a6:	e8 e4       	ldi	r30, 0x48	; 72
    19a8:	f1 e0       	ldi	r31, 0x01	; 1
    19aa:	90 81       	ld	r25, Z
    19ac:	90 7e       	andi	r25, 0xE0	; 224
    19ae:	8f 71       	andi	r24, 0x1F	; 31
    19b0:	89 2b       	or	r24, r25
    19b2:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	0d c0       	rjmp	.+26     	; 0x19d2 <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    19b8:	88 81       	ld	r24, Y
    19ba:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    19be:	e8 e4       	ldi	r30, 0x48	; 72
    19c0:	f1 e0       	ldi	r31, 0x01	; 1
    19c2:	90 81       	ld	r25, Z
    19c4:	90 7e       	andi	r25, 0xE0	; 224
    19c6:	8f 71       	andi	r24, 0x1F	; 31
    19c8:	89 2b       	or	r24, r25
						tal_pib.CurrentChannel);
				/* Re-store previous trx state */
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
    19ca:	80 83       	st	Z, r24
    19cc:	86 e1       	ldi	r24, 0x16	; 22
    19ce:	d8 d9       	rcall	.-3152   	; 0xd80 <set_trx_state>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    19d0:	80 e0       	ldi	r24, 0x00	; 0
} /* tal_pib_set() */
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    19d8:	04 c0       	rjmp	.+8      	; 0x19e2 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    19da:	61 50       	subi	r22, 0x01	; 1
    19dc:	71 09       	sbc	r23, r1
    19de:	81 09       	sbc	r24, r1
    19e0:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    19e2:	61 15       	cp	r22, r1
    19e4:	71 05       	cpc	r23, r1
    19e6:	81 05       	cpc	r24, r1
    19e8:	91 05       	cpc	r25, r1
    19ea:	b9 f7       	brne	.-18     	; 0x19da <__portable_avr_delay_cycles+0x2>
    19ec:	08 95       	ret

000019ee <handle_received_frame_irq>:
 *
 * This function handles transceiver interrupts for received frames and
 * uploads the frames from the trx.
 */
void handle_received_frame_irq(void)
{
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
	/* Extended frame length appended by LQI and ED. */
	uint8_t ext_frame_length;
	frame_info_t *receive_frame;
	uint8_t *frame_ptr;

	if (tal_rx_buffer == NULL) {
    19fe:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <tal_rx_buffer>
    1a02:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <tal_rx_buffer+0x1>
    1a06:	30 97       	sbiw	r30, 0x00	; 0
    1a08:	71 f4       	brne	.+28     	; 0x1a26 <handle_received_frame_irq+0x38>
		 * Although the buffer protection mode is enabled and the
		 * receiver has
		 * been switched to PLL_ON, the next incoming frame was faster.
		 * It cannot be handled and is discarded.
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    1a0a:	cc e4       	ldi	r28, 0x4C	; 76
    1a0c:	d1 e0       	ldi	r29, 0x01	; 1
    1a0e:	88 81       	ld	r24, Y
    1a10:	8f 77       	andi	r24, 0x7F	; 127
    1a12:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    1a14:	63 e0       	ldi	r22, 0x03	; 3
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	dd df       	rcall	.-70     	; 0x19d8 <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    1a1e:	88 81       	ld	r24, Y
    1a20:	80 68       	ori	r24, 0x80	; 128
    1a22:	88 83       	st	Y, r24
		                                                      *
		                                                      *
		                                                      *protection
		                                                      * mode
		                                                      **/
		return;
    1a24:	48 c0       	rjmp	.+144    	; 0x1ab6 <handle_received_frame_irq+0xc8>
		}
	}
#endif

	/* Get ED value; needed to normalize LQI. */
	ed_value = trx_reg_read(RG_PHY_ED_LEVEL);
    1a26:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>

	/* Get frame length from transceiver. */
	phy_frame_len = ext_frame_length = trx_reg_read(RG_TST_RX_LENGTH);
    1a2a:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

	/* Check for valid frame length. */
	if (phy_frame_len > 127) {
    1a2e:	11 23       	and	r17, r17
    1a30:	0c f4       	brge	.+2      	; 0x1a34 <handle_received_frame_irq+0x46>
    1a32:	41 c0       	rjmp	.+130    	; 0x1ab6 <handle_received_frame_irq+0xc8>
		                                                      * mode
		                                                      **/
		return;
	}

	receive_frame = (frame_info_t *)BMM_BUFFER_POINTER(tal_rx_buffer);
    1a34:	e0 80       	ld	r14, Z
    1a36:	f1 80       	ldd	r15, Z+1	; 0x01
	 * In addition to that, the LQI and ED value are uploaded, too.
	 */
	ext_frame_length += LQI_LEN + ED_VAL_LEN;

	/* Update payload pointer to store received frame. */
	frame_ptr = (uint8_t *)receive_frame + LARGE_BUFFER_SIZE -
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	81 0f       	add	r24, r17
    1a3c:	eb e8       	ldi	r30, 0x8B	; 139
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	e8 1b       	sub	r30, r24
    1a42:	f1 09       	sbc	r31, r1
    1a44:	e7 01       	movw	r28, r14
    1a46:	ce 0f       	add	r28, r30
    1a48:	df 1f       	adc	r29, r31
	 * Note: The following code is different from other non-single chip
	 * transceivers, where reading the frame via SPI contains the length
	 * field
	 * in the first octet.
	 */
	trx_frame_read(frame_ptr, phy_frame_len + LQI_LEN);
    1a4a:	c1 2e       	mov	r12, r17
    1a4c:	d1 2c       	mov	r13, r1
    1a4e:	a6 01       	movw	r20, r12
    1a50:	4f 5f       	subi	r20, 0xFF	; 255
    1a52:	5f 4f       	sbci	r21, 0xFF	; 255
    1a54:	60 e8       	ldi	r22, 0x80	; 128
    1a56:	71 e0       	ldi	r23, 0x01	; 1
    1a58:	ce 01       	movw	r24, r28
    1a5a:	76 d7       	rcall	.+3820   	; 0x2948 <memcpy>
	frame_ptr--;
    1a5c:	fe 01       	movw	r30, r28
	*frame_ptr = phy_frame_len;
    1a5e:	12 93       	st	-Z, r17
	receive_frame->mpdu = frame_ptr;
    1a60:	d7 01       	movw	r26, r14
    1a62:	18 96       	adiw	r26, 0x08	; 8
    1a64:	fc 93       	st	X, r31
    1a66:	ee 93       	st	-X, r30
    1a68:	17 97       	sbiw	r26, 0x07	; 7
	/* Add ED value at the end of the frame buffer. */
	receive_frame->mpdu[phy_frame_len + LQI_LEN + ED_VAL_LEN] = ed_value;
    1a6a:	ec 0d       	add	r30, r12
    1a6c:	fd 1d       	adc	r31, r13
    1a6e:	02 83       	std	Z+2, r16	; 0x02
	receive_frame->time_stamp = tal_rx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Append received frame to incoming_frame_queue and get new rx buffer.
	**/
	qmm_queue_append(&tal_incoming_frame_queue, tal_rx_buffer);
    1a70:	60 91 87 04 	lds	r22, 0x0487	; 0x800487 <tal_rx_buffer>
    1a74:	70 91 88 04 	lds	r23, 0x0488	; 0x800488 <tal_rx_buffer+0x1>
    1a78:	81 e6       	ldi	r24, 0x61	; 97
    1a7a:	95 e0       	ldi	r25, 0x05	; 5

	/* The previous buffer is eaten up and a new buffer is not assigned yet.
	**/
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1a7c:	2d d9       	rcall	.-3494   	; 0xcd8 <qmm_queue_append>
    1a7e:	8b e8       	ldi	r24, 0x8B	; 139
    1a80:	93 d8       	rcall	.-3802   	; 0xba8 <bmm_buffer_alloc>
    1a82:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <tal_rx_buffer+0x1>
    1a86:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <tal_rx_buffer>

	/* Check if receive buffer is available */
	if (NULL == tal_rx_buffer) {
    1a8a:	89 2b       	or	r24, r25
    1a8c:	21 f4       	brne	.+8      	; 0x1a96 <handle_received_frame_irq+0xa8>
		 * re-enabled yet.
		 * Buffer protection will be re-enabled after buffer becomes
		 * available
		 */
		/* set_trx_state(CMD_PLL_ON); */
		tal_rx_on_required = true;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <tal_rx_on_required>
    1a94:	0d c0       	rjmp	.+26     	; 0x1ab0 <handle_received_frame_irq+0xc2>
		/*
		 * Release the protected buffer and set it again for further
		 * protection since
		 * the buffer is available
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    1a96:	cc e4       	ldi	r28, 0x4C	; 76
    1a98:	d1 e0       	ldi	r29, 0x01	; 1
    1a9a:	88 81       	ld	r24, Y
    1a9c:	8f 77       	andi	r24, 0x7F	; 127
    1a9e:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    1aa0:	63 e0       	ldi	r22, 0x03	; 3
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	97 df       	rcall	.-210    	; 0x19d8 <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    1aaa:	88 81       	ld	r24, Y
    1aac:	80 68       	ori	r24, 0x80	; 128
    1aae:	88 83       	st	Y, r24
	 * transmission
	 * end of an automatically sent ACK frame. This implementation does not
	 * use
	 * this feature.
	 */
	pal_trx_irq_flag_clr_tx_end();
    1ab0:	80 e4       	ldi	r24, 0x40	; 64
    1ab2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
}
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	cf 90       	pop	r12
    1ac6:	08 95       	ret

00001ac8 <process_incoming_frame>:
 * structure to be sent to the MAC as a parameter of tal_rx_frame_cb().
 *
 * \param buf Pointer to the buffer containing the received frame
 */
void process_incoming_frame(buffer_t *buf_ptr)
{
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	ac 01       	movw	r20, r24
	uint8_t *frame_ptr;
	uint8_t ed_level;
	uint8_t lqi;
#endif

	frame_info_t *receive_frame
    1ace:	fc 01       	movw	r30, r24
    1ad0:	c0 81       	ld	r28, Z
    1ad2:	d1 81       	ldd	r29, Z+1	; 0x01

	/*
	 * Store the last frame length for IFS handling.
	 * Substract LQI and length fields.
	 */
	frame_len = last_frame_length = receive_frame->mpdu[0];
    1ad4:	af 81       	ldd	r26, Y+7	; 0x07
    1ad6:	b8 85       	ldd	r27, Y+8	; 0x08
    1ad8:	8c 91       	ld	r24, X
    1ada:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <last_frame_length>

	/*
	 * The LQI is stored after the FCS.
	 * The ED value is stored after the LQI.
	 */
	frame_ptr = &(receive_frame->mpdu[frame_len + LQI_LEN]);
    1ade:	e8 2f       	mov	r30, r24
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	31 96       	adiw	r30, 0x01	; 1
    1ae4:	ea 0f       	add	r30, r26
    1ae6:	fb 1f       	adc	r31, r27
	lqi = *frame_ptr++;
    1ae8:	80 81       	ld	r24, Z
	ed_level = *frame_ptr;
    1aea:	31 81       	ldd	r19, Z+1	; 0x01
	uint8_t lqi_star;

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
    1aec:	3d 33       	cpi	r19, 0x3D	; 61
    1aee:	20 f4       	brcc	.+8      	; 0x1af8 <process_incoming_frame+0x30>
		ed_value = ED_MAX_VAL;
	} else if (ed_value == 0) {
    1af0:	31 11       	cpse	r19, r1
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <process_incoming_frame+0x32>
		ed_value = 1;
    1af4:	31 e0       	ldi	r19, 0x01	; 1
    1af6:	01 c0       	rjmp	.+2      	; 0x1afa <process_incoming_frame+0x32>

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
		ed_value = ED_MAX_VAL;
    1af8:	3c e3       	ldi	r19, 0x3C	; 60
	} else if (ed_value == 0) {
		ed_value = 1;
	}

	lqi_star = lqi >> 6;
	link_quality = (uint16_t)lqi_star * (uint16_t)ed_value * 255 /
    1afa:	82 95       	swap	r24
    1afc:	86 95       	lsr	r24
    1afe:	86 95       	lsr	r24
    1b00:	83 70       	andi	r24, 0x03	; 3
    1b02:	2f ef       	ldi	r18, 0xFF	; 255
    1b04:	82 9f       	mul	r24, r18
    1b06:	c0 01       	movw	r24, r0
    1b08:	11 24       	eor	r1, r1
    1b0a:	38 9f       	mul	r19, r24
    1b0c:	b0 01       	movw	r22, r0
    1b0e:	39 9f       	mul	r19, r25
    1b10:	70 0d       	add	r23, r0
    1b12:	11 24       	eor	r1, r1
    1b14:	9b 01       	movw	r18, r22
    1b16:	a3 e8       	ldi	r26, 0x83	; 131
    1b18:	bd e2       	ldi	r27, 0x2D	; 45
    1b1a:	8a d6       	rcall	.+3348   	; 0x2830 <__umulhisi3>
    1b1c:	96 95       	lsr	r25
    1b1e:	87 95       	ror	r24
    1b20:	92 95       	swap	r25
    1b22:	82 95       	swap	r24
    1b24:	8f 70       	andi	r24, 0x0F	; 15
    1b26:	89 27       	eor	r24, r25
    1b28:	9f 70       	andi	r25, 0x0F	; 15
    1b2a:	89 27       	eor	r24, r25
			(ED_MAX_VAL * LQI_MAX);

	if (link_quality > 255) {
    1b2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b2e:	91 05       	cpc	r25, r1
    1b30:	11 f0       	breq	.+4      	; 0x1b36 <process_incoming_frame+0x6e>
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <process_incoming_frame+0x6e>
		return 255;
    1b34:	8f ef       	ldi	r24, 0xFF	; 255
	lqi = normalize_lqi(lqi, ed_level);
#endif

	/* Store normalized LQI value again. */
	frame_ptr--;
	*frame_ptr = lqi;
    1b36:	80 83       	st	Z, r24
#endif  /* #ifndef TRX_REG_RAW_VALUE */

	receive_frame->buffer_header = buf_ptr;
    1b38:	5a 83       	std	Y+2, r21	; 0x02
    1b3a:	49 83       	std	Y+1, r20	; 0x01
#ifdef ENABLE_RTB
	/* The callback function implemented by RTB is invoked. */
	rtb_rx_frame_cb(receive_frame);
#else
	/* The callback function implemented by MAC is invoked. */
	tal_rx_frame_cb(receive_frame);
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	2e d6       	rcall	.+3164   	; 0x279c <tal_rx_frame_cb>
#endif
} /* process_incoming_frame() */
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	08 95       	ret

00001b46 <tal_rx_enable>:
{
	/*
	 * Trx can only be enabled if TAL is not busy;
	 * i.e. if TAL is IDLE.
	 */
	if (TAL_IDLE != tal_state) {
    1b46:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <tal_state>
    1b4a:	91 11       	cpse	r25, r1
    1b4c:	16 c0       	rjmp	.+44     	; 0x1b7a <tal_rx_enable+0x34>
#else
		return TAL_BUSY;
#endif
	}

	if (state == PHY_TRX_OFF) {
    1b4e:	88 30       	cpi	r24, 0x08	; 8
    1b50:	29 f4       	brne	.+10     	; 0x1b5c <tal_rx_enable+0x16>
		 * that is currently being received.
		 * This must not be a Forced TRX_OFF (CMD_FORCED_TRX_OFF) since
		 * this could
		 * corrupt an already outoing ACK frame.
		 */
		set_trx_state(CMD_TRX_OFF);
    1b52:	16 d9       	rcall	.-3540   	; 0xd80 <set_trx_state>
		tal_rx_on_required = false;
    1b54:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <tal_rx_on_required>
		return TRX_OFF;
    1b58:	88 e0       	ldi	r24, 0x08	; 8
    1b5a:	08 95       	ret
	} else {
#ifdef SNIFFER
		set_trx_state(CMD_RX_ON);
#else   /* #ifndef SNIFFER */
		if (NULL != tal_rx_buffer) {
    1b5c:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <tal_rx_buffer>
    1b60:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <tal_rx_buffer+0x1>
    1b64:	89 2b       	or	r24, r25
    1b66:	21 f0       	breq	.+8      	; 0x1b70 <tal_rx_enable+0x2a>
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    1b68:	86 e1       	ldi	r24, 0x16	; 22
    1b6a:	0a d9       	rcall	.-3564   	; 0xd80 <set_trx_state>
			 * receiver.
			 */
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    1b6c:	86 e0       	ldi	r24, 0x06	; 6
    1b6e:	08 95       	ret
			 * the TAL returns MAC_SUCCESS. The TAL will try to
			 * allocate a receive
			 * buffer as soon as possible and will switch on the
			 * receiver.
			 */
			tal_rx_on_required = true;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <tal_rx_on_required>
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    1b76:	86 e0       	ldi	r24, 0x06	; 6
    1b78:	08 95       	ret
		if (tal_state != TAL_SLOTTED_CSMA) {
			return TAL_BUSY;
		}

#else
		return TAL_BUSY;
    1b7a:	86 e8       	ldi	r24, 0x86	; 134
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
	}
}
    1b7c:	08 95       	ret

00001b7e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1b80:	61 50       	subi	r22, 0x01	; 1
    1b82:	71 09       	sbc	r23, r1
    1b84:	81 09       	sbc	r24, r1
    1b86:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1b88:	61 15       	cp	r22, r1
    1b8a:	71 05       	cpc	r23, r1
    1b8c:	81 05       	cpc	r24, r1
    1b8e:	91 05       	cpc	r25, r1
    1b90:	b9 f7       	brne	.-18     	; 0x1b80 <__portable_avr_delay_cycles+0x2>
    1b92:	08 95       	ret

00001b94 <tx_done_handling>:
 *
 * This function handles the callback for the transmission end.
 */
void tx_done_handling(void)
{
	tal_state = TAL_IDLE;
    1b94:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <tal_state>
	mac_frame_ptr->time_stamp = pal_tx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	retval_t status;

	switch (trx_trac_status) {
    1b98:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <trx_trac_status>
    1b9c:	83 30       	cpi	r24, 0x03	; 3
    1b9e:	69 f0       	breq	.+26     	; 0x1bba <tx_done_handling+0x26>
    1ba0:	28 f4       	brcc	.+10     	; 0x1bac <tx_done_handling+0x18>
    1ba2:	88 23       	and	r24, r24
    1ba4:	91 f0       	breq	.+36     	; 0x1bca <tx_done_handling+0x36>
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	31 f0       	breq	.+12     	; 0x1bb6 <tx_done_handling+0x22>
    1baa:	0d c0       	rjmp	.+26     	; 0x1bc6 <tx_done_handling+0x32>
    1bac:	85 30       	cpi	r24, 0x05	; 5
    1bae:	39 f0       	breq	.+14     	; 0x1bbe <tx_done_handling+0x2a>
    1bb0:	87 30       	cpi	r24, 0x07	; 7
    1bb2:	39 f0       	breq	.+14     	; 0x1bc2 <tx_done_handling+0x2e>
    1bb4:	08 c0       	rjmp	.+16     	; 0x1bc6 <tx_done_handling+0x32>
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
		break;

	case TRAC_SUCCESS_DATA_PENDING:
		status = TAL_FRAME_PENDING;
    1bb6:	87 e8       	ldi	r24, 0x87	; 135
    1bb8:	09 c0       	rjmp	.+18     	; 0x1bcc <tx_done_handling+0x38>
		break;

	case TRAC_CHANNEL_ACCESS_FAILURE:
		status = MAC_CHANNEL_ACCESS_FAILURE;
    1bba:	81 ee       	ldi	r24, 0xE1	; 225
		break;
    1bbc:	07 c0       	rjmp	.+14     	; 0x1bcc <tx_done_handling+0x38>

	case TRAC_NO_ACK:
		status = MAC_NO_ACK;
    1bbe:	89 ee       	ldi	r24, 0xE9	; 233
		break;
    1bc0:	05 c0       	rjmp	.+10     	; 0x1bcc <tx_done_handling+0x38>

	case TRAC_INVALID:
		status = FAILURE;
    1bc2:	85 e8       	ldi	r24, 0x85	; 133
		break;
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <tx_done_handling+0x38>

	default:
		Assert("Unexpected tal_tx_state" == 0);
		status = FAILURE;
    1bc6:	85 e8       	ldi	r24, 0x85	; 133
		break;
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <tx_done_handling+0x38>

	retval_t status;

	switch (trx_trac_status) {
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
    1bca:	80 e0       	ldi	r24, 0x00	; 0

#ifdef ENABLE_RTB
	rtb_tx_frame_done_cb(status, mac_frame_ptr);
#else
	/* Regular handling without RTB */
	tal_tx_frame_done_cb(status, mac_frame_ptr);
    1bcc:	60 91 66 05 	lds	r22, 0x0566	; 0x800566 <mac_frame_ptr>
    1bd0:	70 91 67 05 	lds	r23, 0x0567	; 0x800567 <mac_frame_ptr+0x1>
    1bd4:	e0 c5       	rjmp	.+3008   	; 0x2796 <tal_tx_frame_done_cb>
    1bd6:	08 95       	ret

00001bd8 <send_frame>:
 * \param use_csma Flag indicating if CSMA is requested
 * \param tx_retries Flag indicating if transmission retries are requested
 *                   by the MAC layer
 */
void send_frame(csma_mode_t csma_mode, bool tx_retries)
{
    1bd8:	1f 93       	push	r17
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	1f 92       	push	r1
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	18 2f       	mov	r17, r24
	tal_trx_status_t trx_status;

	/* Configure tx according to tx_retries */
	if (tx_retries) {
    1be6:	66 23       	and	r22, r22
    1be8:	81 f0       	breq	.+32     	; 0x1c0a <send_frame+0x32>
		trx_bit_write(SR_MAX_FRAME_RETRIES,
    1bea:	ec e6       	ldi	r30, 0x6C	; 108
    1bec:	f1 e0       	ldi	r31, 0x01	; 1
    1bee:	20 81       	ld	r18, Z
    1bf0:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <tal_pib+0x1c>
    1bf4:	30 e1       	ldi	r19, 0x10	; 16
    1bf6:	93 9f       	mul	r25, r19
    1bf8:	c0 01       	movw	r24, r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	92 2f       	mov	r25, r18
    1bfe:	9f 70       	andi	r25, 0x0F	; 15
    1c00:	89 2b       	or	r24, r25
    1c02:	80 83       	st	Z, r24
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    1c04:	12 30       	cpi	r17, 0x02	; 2
    1c06:	e0 f4       	brcc	.+56     	; 0x1c40 <send_frame+0x68>
    1c08:	08 c0       	rjmp	.+16     	; 0x1c1a <send_frame+0x42>
	/* Configure tx according to tx_retries */
	if (tx_retries) {
		trx_bit_write(SR_MAX_FRAME_RETRIES,
				tal_pib.MaxFrameRetries);
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
    1c0a:	ec e6       	ldi	r30, 0x6C	; 108
    1c0c:	f1 e0       	ldi	r31, 0x01	; 1
    1c0e:	80 81       	ld	r24, Z
    1c10:	8f 70       	andi	r24, 0x0F	; 15
    1c12:	80 83       	st	Z, r24
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    1c14:	12 30       	cpi	r17, 0x02	; 2
    1c16:	a0 f4       	brcc	.+40     	; 0x1c40 <send_frame+0x68>
    1c18:	0d c0       	rjmp	.+26     	; 0x1c34 <send_frame+0x5c>
		if (tx_retries) {
			trx_bit_write(SR_MAX_CSMA_RETRIES,
    1c1a:	ec e6       	ldi	r30, 0x6C	; 108
    1c1c:	f1 e0       	ldi	r31, 0x01	; 1
    1c1e:	80 81       	ld	r24, Z
    1c20:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <tal_pib+0x14>
    1c24:	99 0f       	add	r25, r25
    1c26:	9e 70       	andi	r25, 0x0E	; 14
    1c28:	81 7f       	andi	r24, 0xF1	; 241
    1c2a:	89 2b       	or	r24, r25
    1c2c:	80 83       	st	Z, r24
					tal_pib.MaxCSMABackoffs);
			trx_reg_write(RG_CSMA_BE, 0x00);
    1c2e:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <__TEXT_REGION_LENGTH__+0x7c016f>
    1c32:	1a c0       	rjmp	.+52     	; 0x1c68 <send_frame+0x90>
		} else {
			trx_bit_write(SR_MAX_CSMA_RETRIES, 7);
    1c34:	ec e6       	ldi	r30, 0x6C	; 108
    1c36:	f1 e0       	ldi	r31, 0x01	; 1
    1c38:	80 81       	ld	r24, Z
    1c3a:	8e 60       	ori	r24, 0x0E	; 14
    1c3c:	80 83       	st	Z, r24
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <send_frame+0x90>
		}
	} else {
		trx_reg_write(RG_CSMA_BE,
    1c40:	e8 e6       	ldi	r30, 0x68	; 104
    1c42:	f5 e0       	ldi	r31, 0x05	; 5
    1c44:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c46:	20 e1       	ldi	r18, 0x10	; 16
    1c48:	82 9f       	mul	r24, r18
    1c4a:	c0 01       	movw	r24, r0
    1c4c:	11 24       	eor	r1, r1
    1c4e:	95 89       	ldd	r25, Z+21	; 0x15
    1c50:	89 2b       	or	r24, r25
    1c52:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <__TEXT_REGION_LENGTH__+0x7c016f>
				((tal_pib.MaxBE << 4) | tal_pib.MinBE));
		trx_bit_write(SR_MAX_CSMA_RETRIES, tal_pib.MaxCSMABackoffs);
    1c56:	ac e6       	ldi	r26, 0x6C	; 108
    1c58:	b1 e0       	ldi	r27, 0x01	; 1
    1c5a:	8c 91       	ld	r24, X
    1c5c:	94 89       	ldd	r25, Z+20	; 0x14
    1c5e:	99 0f       	add	r25, r25
    1c60:	9e 70       	andi	r25, 0x0E	; 14
    1c62:	81 7f       	andi	r24, 0xF1	; 241
    1c64:	89 2b       	or	r24, r25
    1c66:	8c 93       	st	X, r24
	}

	do {
		trx_status = set_trx_state(CMD_TX_ARET_ON);
    1c68:	89 e1       	ldi	r24, 0x19	; 25
    1c6a:	8a d8       	rcall	.-3820   	; 0xd80 <set_trx_state>
	} while (trx_status != TX_ARET_ON);
    1c6c:	89 31       	cpi	r24, 0x19	; 25
    1c6e:	e1 f7       	brne	.-8      	; 0x1c68 <send_frame+0x90>

	/* Handle interframe spacing */
	if (csma_mode == NO_CSMA_WITH_IFS) {
    1c70:	11 30       	cpi	r17, 0x01	; 1
    1c72:	a1 f4       	brne	.+40     	; 0x1c9c <send_frame+0xc4>
		if (last_frame_length > aMaxSIFSFrameSize) {
    1c74:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <last_frame_length>
    1c78:	83 31       	cpi	r24, 0x13	; 19
    1c7a:	40 f0       	brcs	.+16     	; 0x1c8c <send_frame+0xb4>
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    1c7c:	61 e0       	ldi	r22, 0x01	; 1
    1c7e:	73 e0       	ldi	r23, 0x03	; 3
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	7c df       	rcall	.-264    	; 0x1b7e <__portable_avr_delay_cycles>
					macMinLIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    1c86:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <last_frame_length>
    1c8a:	0d c0       	rjmp	.+26     	; 0x1ca6 <send_frame+0xce>
		} else {
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    1c8c:	6b ea       	ldi	r22, 0xAB	; 171
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	74 df       	rcall	.-280    	; 0x1b7e <__portable_avr_delay_cycles>
					macMinSIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    1c96:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <last_frame_length>
    1c9a:	05 c0       	rjmp	.+10     	; 0x1ca6 <send_frame+0xce>
		 * If no delay is applied after switching to TX_ARET_ON,
		 * a short delay is required that allows that a pending TX_END
		 * IRQ for
		 * ACK transmission gets served.
		 */
		pal_timer_delay(TRX_IRQ_DELAY_US);
    1c9c:	6c e0       	ldi	r22, 0x0C	; 12
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	6c df       	rcall	.-296    	; 0x1b7e <__portable_avr_delay_cycles>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ca6:	8f b7       	in	r24, 0x3f	; 63
    1ca8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1caa:	f8 94       	cli
	return flags;
    1cac:	19 81       	ldd	r17, Y+1	; 0x01
	}

	ENTER_CRITICAL_REGION(); /* prevent from buffer underrun */

	/* Toggle the SLP_TR pin triggering transmission. */
	TRX_SLP_TR_HIGH();
    1cae:	e9 e3       	ldi	r30, 0x39	; 57
    1cb0:	f1 e0       	ldi	r31, 0x01	; 1
    1cb2:	80 81       	ld	r24, Z
    1cb4:	82 60       	ori	r24, 0x02	; 2
    1cb6:	80 83       	st	Z, r24
	PAL_WAIT_65_NS();
    1cb8:	00 00       	nop
    1cba:	00 00       	nop
	TRX_SLP_TR_LOW();
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8d 7f       	andi	r24, 0xFD	; 253
    1cc0:	80 83       	st	Z, r24
	 * is
	 * 1 octet frame length octet
	 * + n octets frame (i.e. value of frame_tx[0])
	 * - 2 octets FCS
	 */
	trx_frame_write(tal_frame_to_tx, tal_frame_to_tx[0] - 1);
    1cc2:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <tal_frame_to_tx>
    1cc6:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <tal_frame_to_tx+0x1>
    1cca:	fb 01       	movw	r30, r22
    1ccc:	40 81       	ld	r20, Z
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	41 50       	subi	r20, 0x01	; 1
    1cd2:	51 09       	sbc	r21, r1
    1cd4:	80 e8       	ldi	r24, 0x80	; 128
    1cd6:	91 e0       	ldi	r25, 0x01	; 1
    1cd8:	37 d6       	rcall	.+3182   	; 0x2948 <memcpy>

	tal_state = TAL_TX_AUTO;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <tal_state>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ce0:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
}
    1ce2:	0f 90       	pop	r0
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	08 95       	ret

00001cec <tal_tx_frame>:
 *                 transmission
 *         TAL_BUSY if the TAL is busy servicing the previous MAC request
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
    1cec:	fc 01       	movw	r30, r24
	if (tal_state != TAL_IDLE) {
    1cee:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <tal_state>
    1cf2:	91 11       	cpse	r25, r1
    1cf4:	16 c0       	rjmp	.+44     	; 0x1d22 <tal_tx_frame+0x36>

	/*
	 * Store the pointer to the provided frame structure.
	 * This is needed for the callback function.
	 */
	mac_frame_ptr = tx_frame;
    1cf6:	f0 93 67 05 	sts	0x0567, r31	; 0x800567 <mac_frame_ptr+0x1>
    1cfa:	e0 93 66 05 	sts	0x0566, r30	; 0x800566 <mac_frame_ptr>

	/* Set pointer to actual mpdu to be downloaded to the transceiver. */
	tal_frame_to_tx = tx_frame->mpdu;
    1cfe:	07 80       	ldd	r0, Z+7	; 0x07
    1d00:	f0 85       	ldd	r31, Z+8	; 0x08
    1d02:	e0 2d       	mov	r30, r0
    1d04:	f0 93 8a 05 	sts	0x058A, r31	; 0x80058a <tal_frame_to_tx+0x1>
    1d08:	e0 93 89 05 	sts	0x0589, r30	; 0x800589 <tal_frame_to_tx>
	last_frame_length = tal_frame_to_tx[0] - 1;
    1d0c:	80 81       	ld	r24, Z
    1d0e:	81 50       	subi	r24, 0x01	; 1
    1d10:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <last_frame_length>

	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
    1d14:	ef 2b       	or	r30, r31
    1d16:	39 f0       	breq	.+14     	; 0x1d26 <tal_tx_frame+0x3a>
    1d18:	86 2f       	mov	r24, r22
#endif  /* #if (MAC_INDIRECT_DATA_FFD == 1) */
		send_frame(csma_mode, perform_frame_retry);
	}

#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
    1d1a:	64 2f       	mov	r22, r20
    1d1c:	5d df       	rcall	.-326    	; 0x1bd8 <send_frame>
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	08 95       	ret
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
	if (tal_state != TAL_IDLE) {
		return TAL_BUSY;
    1d22:	86 e8       	ldi	r24, 0x86	; 134
    1d24:	08 95       	ret
	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
		return MAC_INVALID_PARAMETER;
    1d26:	88 ee       	ldi	r24, 0xE8	; 232
#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
}
    1d28:	08 95       	ret

00001d2a <handle_tx_end_irq>:
	/* Check if TX_END interrupt, is issued due to automatic ACK
	 * transmission. */
#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	if ((tal_state != TAL_TX_AUTO) && (!tal_beacon_transmission))
#else
	if (tal_state != TAL_TX_AUTO)
    1d2a:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <tal_state>
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	c1 f4       	brne	.+48     	; 0x1d62 <handle_tx_end_irq+0x38>
		}
	} else
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */
	{
		/* Read trac status before enabling RX_AACK_ON. */
		trx_trac_status = (trx_trac_status_t)trx_bit_read(
    1d32:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1d36:	82 95       	swap	r24
    1d38:	86 95       	lsr	r24
    1d3a:	87 70       	andi	r24, 0x07	; 7
    1d3c:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <trx_trac_status>
			PIN_ACK_WAITING_END();
		} else
#endif  /* BEACON_SUPPORT */
		/* Trx has handled the entire transmission incl. CSMA */
		{
			tal_state = TAL_TX_DONE; /* Further handling is done by
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <tal_state>

	/*
	 * After transmission has finished, switch receiver on again.
	 * Check if receive buffer is available.
	 */
	if (NULL == tal_rx_buffer) {
    1d46:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <tal_rx_buffer>
    1d4a:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <tal_rx_buffer+0x1>
    1d4e:	89 2b       	or	r24, r25
    1d50:	31 f4       	brne	.+12     	; 0x1d5e <handle_tx_end_irq+0x34>
		set_trx_state(CMD_PLL_ON);
    1d52:	89 e0       	ldi	r24, 0x09	; 9
    1d54:	15 d8       	rcall	.-4054   	; 0xd80 <set_trx_state>
		tal_rx_on_required = true;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <tal_rx_on_required>
    1d5c:	08 95       	ret
	} else {
		set_trx_state(CMD_RX_AACK_ON);
    1d5e:	86 e1       	ldi	r24, 0x16	; 22
    1d60:	0f c8       	rjmp	.-4066   	; 0xd80 <set_trx_state>
    1d62:	08 95       	ret

00001d64 <tal_ant_div_config>:
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
	if (true == div_ctrl) {
    1d64:	88 23       	and	r24, r24
    1d66:	29 f1       	breq	.+74     	; 0x1db2 <tal_ant_div_config+0x4e>
		/* do the configurations if diversity has to be enabled */
		trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    1d68:	ed e4       	ldi	r30, 0x4D	; 77
    1d6a:	f1 e0       	ldi	r31, 0x01	; 1
    1d6c:	80 81       	ld	r24, Z
    1d6e:	8c 7f       	andi	r24, 0xFC	; 252
    1d70:	80 83       	st	Z, r24
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    1d72:	80 81       	ld	r24, Z
    1d74:	88 60       	ori	r24, 0x08	; 8
    1d76:	80 83       	st	Z, r24

#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    1d78:	aa e4       	ldi	r26, 0x4A	; 74
    1d7a:	b1 e0       	ldi	r27, 0x01	; 1
    1d7c:	8c 91       	ld	r24, X
    1d7e:	80 7f       	andi	r24, 0xF0	; 240
    1d80:	83 60       	ori	r24, 0x03	; 3
    1d82:	8c 93       	st	X, r24
#endif /* End of ((TAL_TYPE != AT86RF212) && (TAL_TYPE!= AT86RF212B)) */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    1d84:	80 81       	ld	r24, Z
    1d86:	84 60       	ori	r24, 0x04	; 4
    1d88:	80 83       	st	Z, r24
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    1d8a:	80 81       	ld	r24, Z
    1d8c:	83 70       	andi	r24, 0x03	; 3
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <tal_ant_div_config+0x2e>
    1d90:	54 c0       	rjmp	.+168    	; 0x1e3a <tal_ant_div_config+0xd6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    1d92:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    1d96:	83 ff       	sbrs	r24, 3
    1d98:	52 c0       	rjmp	.+164    	; 0x1e3e <tal_ant_div_config+0xda>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    1d9a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
    1d9e:	82 ff       	sbrs	r24, 2
    1da0:	50 c0       	rjmp	.+160    	; 0x1e42 <tal_ant_div_config+0xde>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_ENABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    1da2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x7c014a>
    1da6:	8f 70       	andi	r24, 0x0F	; 15
    1da8:	83 30       	cpi	r24, 0x03	; 3
    1daa:	09 f0       	breq	.+2      	; 0x1dae <tal_ant_div_config+0x4a>
    1dac:	4c c0       	rjmp	.+152    	; 0x1e46 <tal_ant_div_config+0xe2>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	08 95       	ret
		} else {
			return_var = FAILURE;
		}
	} else {
		/* do the configurations if diversity has to be disabled */
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_DISABLE);
    1db2:	ed e4       	ldi	r30, 0x4D	; 77
    1db4:	f1 e0       	ldi	r31, 0x01	; 1
    1db6:	80 81       	ld	r24, Z
    1db8:	87 7f       	andi	r24, 0xF7	; 247
    1dba:	80 83       	st	Z, r24
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_DISABLE);
    1dbc:	aa e4       	ldi	r26, 0x4A	; 74
    1dbe:	b1 e0       	ldi	r27, 0x01	; 1
    1dc0:	8c 91       	ld	r24, X
    1dc2:	80 7f       	andi	r24, 0xF0	; 240
    1dc4:	87 60       	ori	r24, 0x07	; 7
    1dc6:	8c 93       	st	X, r24
#endif

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    1dc8:	80 81       	ld	r24, Z
    1dca:	84 60       	ori	r24, 0x04	; 4
    1dcc:	80 83       	st	Z, r24
		if (ant_ctrl == ANT_CTRL_1) {
    1dce:	61 30       	cpi	r22, 0x01	; 1
    1dd0:	31 f4       	brne	.+12     	; 0x1dde <tal_ant_div_config+0x7a>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8c 7f       	andi	r24, 0xFC	; 252
    1dd6:	81 60       	ori	r24, 0x01	; 1
    1dd8:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    1dda:	85 e8       	ldi	r24, 0x85	; 133
    1ddc:	17 c0       	rjmp	.+46     	; 0x1e0c <tal_ant_div_config+0xa8>

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
		if (ant_ctrl == ANT_CTRL_1) {
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
    1dde:	62 30       	cpi	r22, 0x02	; 2
    1de0:	41 f4       	brne	.+16     	; 0x1df2 <tal_ant_div_config+0x8e>
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
    1de2:	ed e4       	ldi	r30, 0x4D	; 77
    1de4:	f1 e0       	ldi	r31, 0x01	; 1
    1de6:	80 81       	ld	r24, Z
    1de8:	8c 7f       	andi	r24, 0xFC	; 252
    1dea:	82 60       	ori	r24, 0x02	; 2
    1dec:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    1dee:	85 e8       	ldi	r24, 0x85	; 133
    1df0:	0d c0       	rjmp	.+26     	; 0x1e0c <tal_ant_div_config+0xa8>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
    1df2:	66 23       	and	r22, r22
    1df4:	11 f0       	breq	.+4      	; 0x1dfa <tal_ant_div_config+0x96>
    1df6:	63 30       	cpi	r22, 0x03	; 3
    1df8:	41 f4       	brne	.+16     	; 0x1e0a <tal_ant_div_config+0xa6>
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    1dfa:	ed e4       	ldi	r30, 0x4D	; 77
    1dfc:	f1 e0       	ldi	r31, 0x01	; 1
    1dfe:	80 81       	ld	r24, Z
    1e00:	8c 7f       	andi	r24, 0xFC	; 252
    1e02:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    1e04:	85 e8       	ldi	r24, 0x85	; 133
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
			ant_ctrl = 0;
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <tal_ant_div_config+0xa8>
		} else {
			return_var = MAC_INVALID_PARAMETER;
    1e0a:	88 ee       	ldi	r24, 0xE8	; 232

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    1e0c:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
    1e10:	23 70       	andi	r18, 0x03	; 3
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	26 17       	cp	r18, r22
    1e18:	37 07       	cpc	r19, r23
    1e1a:	b9 f4       	brne	.+46     	; 0x1e4a <tal_ant_div_config+0xe6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    1e1c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    1e20:	93 fd       	sbrc	r25, 3
    1e22:	15 c0       	rjmp	.+42     	; 0x1e4e <tal_ant_div_config+0xea>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    1e24:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
    1e28:	92 fd       	sbrc	r25, 2
    1e2a:	13 c0       	rjmp	.+38     	; 0x1e52 <tal_ant_div_config+0xee>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_DISABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    1e2c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x7c014a>
    1e30:	9f 70       	andi	r25, 0x0F	; 15
    1e32:	93 30       	cpi	r25, 0x03	; 3
    1e34:	79 f4       	brne	.+30     	; 0x1e54 <tal_ant_div_config+0xf0>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    1e3a:	85 e8       	ldi	r24, 0x85	; 133
    1e3c:	08 95       	ret
    1e3e:	85 e8       	ldi	r24, 0x85	; 133
    1e40:	08 95       	ret
    1e42:	85 e8       	ldi	r24, 0x85	; 133
    1e44:	08 95       	ret
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    1e46:	85 e8       	ldi	r24, 0x85	; 133
    1e48:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    1e4a:	85 e8       	ldi	r24, 0x85	; 133
    1e4c:	08 95       	ret
    1e4e:	85 e8       	ldi	r24, 0x85	; 133
    1e50:	08 95       	ret
    1e52:	85 e8       	ldi	r24, 0x85	; 133
		}
	}

	return return_var;
}
    1e54:	08 95       	ret

00001e56 <tfa_pib_set>:
 *         TAL_BUSY if the TAL is not in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 */
retval_t tfa_pib_set(tfa_pib_t tfa_pib_attribute, void *value)
{
	switch (tfa_pib_attribute) {
    1e56:	81 11       	cpse	r24, r1
    1e58:	24 c0       	rjmp	.+72     	; 0x1ea2 <tfa_pib_set+0x4c>
	case TFA_PIB_RX_SENS:
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
    1e5a:	fb 01       	movw	r30, r22
    1e5c:	80 81       	ld	r24, Z
		if (tfa_pib_rx_sens > -49) {
    1e5e:	80 3d       	cpi	r24, 0xD0	; 208
    1e60:	2c f0       	brlt	.+10     	; 0x1e6c <tfa_pib_set+0x16>
			reg_val = 0xF;
			tfa_pib_rx_sens = -49;
    1e62:	8f ec       	ldi	r24, 0xCF	; 207
    1e64:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <tfa_pib_rx_sens>
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
		if (tfa_pib_rx_sens > -49) {
			reg_val = 0xF;
    1e68:	6f e0       	ldi	r22, 0x0F	; 15
    1e6a:	12 c0       	rjmp	.+36     	; 0x1e90 <tfa_pib_set+0x3a>
			tfa_pib_rx_sens = -49;
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
    1e6c:	87 3a       	cpi	r24, 0xA7	; 167
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <tfa_pib_set+0x24>
			reg_val = 0x0;
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
    1e70:	86 ea       	ldi	r24, 0xA6	; 166
    1e72:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <tfa_pib_rx_sens>
		tfa_pib_rx_sens = *((int8_t *)value);
		if (tfa_pib_rx_sens > -49) {
			reg_val = 0xF;
			tfa_pib_rx_sens = -49;
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
			reg_val = 0x0;
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	0b c0       	rjmp	.+22     	; 0x1e90 <tfa_pib_set+0x3a>
	switch (tfa_pib_attribute) {
	case TFA_PIB_RX_SENS:
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
    1e7a:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <tfa_pib_rx_sens>
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
			reg_val = 0x0;
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
		} else {
			reg_val
				= ((tfa_pib_rx_sens -
    1e7e:	08 2e       	mov	r0, r24
    1e80:	00 0c       	add	r0, r0
    1e82:	99 0b       	sbc	r25, r25
    1e84:	86 5a       	subi	r24, 0xA6	; 166
    1e86:	9f 4f       	sbci	r25, 0xFF	; 255
    1e88:	63 e0       	ldi	r22, 0x03	; 3
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	b6 d4       	rcall	.+2412   	; 0x27fa <__divmodhi4>
    1e8e:	6f 5f       	subi	r22, 0xFF	; 255
					(RSSI_BASE_VAL_DBM)) / 3) + 1;
		}

		trx_bit_write(SR_RX_PDT_LEVEL, reg_val);
    1e90:	e5 e5       	ldi	r30, 0x55	; 85
    1e92:	f1 e0       	ldi	r31, 0x01	; 1
    1e94:	80 81       	ld	r24, Z
    1e96:	80 7f       	andi	r24, 0xF0	; 240
    1e98:	6f 70       	andi	r22, 0x0F	; 15
    1e9a:	68 2b       	or	r22, r24
    1e9c:	60 83       	st	Z, r22
	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	08 95       	ret
	}
	break;

	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
    1ea2:	84 ef       	ldi	r24, 0xF4	; 244
	}

	return MAC_SUCCESS;
}
    1ea4:	08 95       	ret

00001ea6 <tfa_init>:
 * to their default values.
 * \ingroup group_tfa
 */
static void init_tfa_pib(void)
{
	tfa_pib_rx_sens = TFA_PIB_RX_SENS_DEF;
    1ea6:	86 ea       	ldi	r24, 0xA6	; 166
    1ea8:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <tfa_pib_rx_sens>
 * It is assumed that the radio does not sleep.
 * \ingroup group_tfa
 */
static void write_all_tfa_pibs_to_trx(void)
{
	tfa_pib_set(TFA_PIB_RX_SENS, (void *)&tfa_pib_rx_sens);
    1eac:	62 e9       	ldi	r22, 0x92	; 146
    1eae:	74 e0       	ldi	r23, 0x04	; 4
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	d1 df       	rcall	.-94     	; 0x1e56 <tfa_pib_set>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    1ebc:	60 e1       	ldi	r22, 0x10	; 16
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
{
	init_tfa_pib();
	write_all_tfa_pibs_to_trx();
	sysclk_enable_peripheral_clock(&ADC);
	return MAC_SUCCESS;
}
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	08 95       	ret

00001ec8 <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    1ec8:	0c 94 9a 01 	jmp	0x334	; 0x334 <tmr_ovf_callback>
    1ecc:	08 95       	ret

00001ece <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    1ece:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <tmr_cca_callback>
    1ed2:	08 95       	ret

00001ed4 <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    1ed4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    1ed8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    1edc:	08 95       	ret

00001ede <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    1ede:	ef e6       	ldi	r30, 0x6F	; 111
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	8d 7f       	andi	r24, 0xFD	; 253
    1ee6:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    1ee8:	b1 9a       	sbi	0x16, 1	; 22
    1eea:	08 95       	ret

00001eec <tmr_enable_cc_interrupt>:
    1eec:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    1eee:	ef e6       	ldi	r30, 0x6F	; 111
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	82 60       	ori	r24, 0x02	; 2
    1ef6:	80 83       	st	Z, r24
    1ef8:	08 95       	ret

00001efa <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    1efa:	ef e6       	ldi	r30, 0x6F	; 111
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	81 60       	ori	r24, 0x01	; 1
    1f02:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    1f04:	b0 9a       	sbi	0x16, 0	; 22
    1f06:	08 95       	ret

00001f08 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    1f08:	80 e8       	ldi	r24, 0x80	; 128
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	82 c3       	rjmp	.+1796   	; 0x2612 <tc_disable>
    1f0e:	08 95       	ret

00001f10 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    1f10:	e9 e8       	ldi	r30, 0x89	; 137
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	20 81       	ld	r18, Z
    1f16:	92 2b       	or	r25, r18
    1f18:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    1f1a:	e8 e8       	ldi	r30, 0x88	; 136
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	90 81       	ld	r25, Z
    1f20:	89 2b       	or	r24, r25
    1f22:	80 83       	st	Z, r24
    1f24:	08 95       	ret

00001f26 <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	1f 92       	push	r1
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f30:	8f b7       	in	r24, 0x3f	; 63
    1f32:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1f34:	f8 94       	cli
	return flags;
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    1f38:	0f 90       	pop	r0
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	08 95       	ret

00001f40 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f40:	8f bf       	out	0x3f, r24	; 63
    1f42:	08 95       	ret

00001f44 <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    1f48:	80 e8       	ldi	r24, 0x80	; 128
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	eb d2       	rcall	.+1494   	; 0x2524 <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    1f4e:	64 e6       	ldi	r22, 0x64	; 100
    1f50:	7f e0       	ldi	r23, 0x0F	; 15
    1f52:	80 e8       	ldi	r24, 0x80	; 128
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	d4 d3       	rcall	.+1960   	; 0x2700 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    1f58:	cf e6       	ldi	r28, 0x6F	; 111
    1f5a:	d0 e0       	ldi	r29, 0x00	; 0
    1f5c:	88 81       	ld	r24, Y
    1f5e:	81 60       	ori	r24, 0x01	; 1
    1f60:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    1f62:	67 e6       	ldi	r22, 0x67	; 103
    1f64:	7f e0       	ldi	r23, 0x0F	; 15
    1f66:	80 e8       	ldi	r24, 0x80	; 128
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	ea d3       	rcall	.+2004   	; 0x2740 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    1f6c:	88 81       	ld	r24, Y
    1f6e:	8d 7f       	andi	r24, 0xFD	; 253
    1f70:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    1f72:	e1 e8       	ldi	r30, 0x81	; 129
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	81 60       	ori	r24, 0x01	; 1
    1f7a:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    1f7c:	88 e0       	ldi	r24, 0x08	; 8
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	08 95       	ret

00001f84 <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    1f84:	1f 92       	push	r1
    1f86:	0f 92       	push	r0
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	0f 92       	push	r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	0b b6       	in	r0, 0x3b	; 59
    1f90:	0f 92       	push	r0
    1f92:	2f 93       	push	r18
    1f94:	3f 93       	push	r19
    1f96:	4f 93       	push	r20
    1f98:	5f 93       	push	r21
    1f9a:	6f 93       	push	r22
    1f9c:	7f 93       	push	r23
    1f9e:	8f 93       	push	r24
    1fa0:	9f 93       	push	r25
    1fa2:	af 93       	push	r26
    1fa4:	bf 93       	push	r27
    1fa6:	ef 93       	push	r30
    1fa8:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    1faa:	e0 91 b1 04 	lds	r30, 0x04B1	; 0x8004b1 <tc_tccr1_ovf_callback>
    1fae:	f0 91 b2 04 	lds	r31, 0x04B2	; 0x8004b2 <tc_tccr1_ovf_callback+0x1>
    1fb2:	30 97       	sbiw	r30, 0x00	; 0
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    1fb6:	19 95       	eicall
	}
}
    1fb8:	ff 91       	pop	r31
    1fba:	ef 91       	pop	r30
    1fbc:	bf 91       	pop	r27
    1fbe:	af 91       	pop	r26
    1fc0:	9f 91       	pop	r25
    1fc2:	8f 91       	pop	r24
    1fc4:	7f 91       	pop	r23
    1fc6:	6f 91       	pop	r22
    1fc8:	5f 91       	pop	r21
    1fca:	4f 91       	pop	r20
    1fcc:	3f 91       	pop	r19
    1fce:	2f 91       	pop	r18
    1fd0:	0f 90       	pop	r0
    1fd2:	0b be       	out	0x3b, r0	; 59
    1fd4:	0f 90       	pop	r0
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	0f 90       	pop	r0
    1fda:	1f 90       	pop	r1
    1fdc:	18 95       	reti

00001fde <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    1fde:	1f 92       	push	r1
    1fe0:	0f 92       	push	r0
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	0f 92       	push	r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	0b b6       	in	r0, 0x3b	; 59
    1fea:	0f 92       	push	r0
    1fec:	2f 93       	push	r18
    1fee:	3f 93       	push	r19
    1ff0:	4f 93       	push	r20
    1ff2:	5f 93       	push	r21
    1ff4:	6f 93       	push	r22
    1ff6:	7f 93       	push	r23
    1ff8:	8f 93       	push	r24
    1ffa:	9f 93       	push	r25
    1ffc:	af 93       	push	r26
    1ffe:	bf 93       	push	r27
    2000:	ef 93       	push	r30
    2002:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    2004:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <tc_tccr1_compa_callback>
    2008:	f0 91 b0 04 	lds	r31, 0x04B0	; 0x8004b0 <tc_tccr1_compa_callback+0x1>
    200c:	30 97       	sbiw	r30, 0x00	; 0
    200e:	09 f0       	breq	.+2      	; 0x2012 <__EEPROM_REGION_LENGTH__+0x12>
		tc_tccr1_compa_callback();
    2010:	19 95       	eicall
	}
}
    2012:	ff 91       	pop	r31
    2014:	ef 91       	pop	r30
    2016:	bf 91       	pop	r27
    2018:	af 91       	pop	r26
    201a:	9f 91       	pop	r25
    201c:	8f 91       	pop	r24
    201e:	7f 91       	pop	r23
    2020:	6f 91       	pop	r22
    2022:	5f 91       	pop	r21
    2024:	4f 91       	pop	r20
    2026:	3f 91       	pop	r19
    2028:	2f 91       	pop	r18
    202a:	0f 90       	pop	r0
    202c:	0b be       	out	0x3b, r0	; 59
    202e:	0f 90       	pop	r0
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	0f 90       	pop	r0
    2034:	1f 90       	pop	r1
    2036:	18 95       	reti

00002038 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    2038:	1f 92       	push	r1
    203a:	0f 92       	push	r0
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	0f 92       	push	r0
    2040:	11 24       	eor	r1, r1
    2042:	0b b6       	in	r0, 0x3b	; 59
    2044:	0f 92       	push	r0
    2046:	2f 93       	push	r18
    2048:	3f 93       	push	r19
    204a:	4f 93       	push	r20
    204c:	5f 93       	push	r21
    204e:	6f 93       	push	r22
    2050:	7f 93       	push	r23
    2052:	8f 93       	push	r24
    2054:	9f 93       	push	r25
    2056:	af 93       	push	r26
    2058:	bf 93       	push	r27
    205a:	ef 93       	push	r30
    205c:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    205e:	e0 91 ad 04 	lds	r30, 0x04AD	; 0x8004ad <tc_tccr1_compb_callback>
    2062:	f0 91 ae 04 	lds	r31, 0x04AE	; 0x8004ae <tc_tccr1_compb_callback+0x1>
    2066:	30 97       	sbiw	r30, 0x00	; 0
    2068:	09 f0       	breq	.+2      	; 0x206c <__vector_18+0x34>
		tc_tccr1_compb_callback();
    206a:	19 95       	eicall
	}
}
    206c:	ff 91       	pop	r31
    206e:	ef 91       	pop	r30
    2070:	bf 91       	pop	r27
    2072:	af 91       	pop	r26
    2074:	9f 91       	pop	r25
    2076:	8f 91       	pop	r24
    2078:	7f 91       	pop	r23
    207a:	6f 91       	pop	r22
    207c:	5f 91       	pop	r21
    207e:	4f 91       	pop	r20
    2080:	3f 91       	pop	r19
    2082:	2f 91       	pop	r18
    2084:	0f 90       	pop	r0
    2086:	0b be       	out	0x3b, r0	; 59
    2088:	0f 90       	pop	r0
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	0f 90       	pop	r0
    208e:	1f 90       	pop	r1
    2090:	18 95       	reti

00002092 <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    2092:	1f 92       	push	r1
    2094:	0f 92       	push	r0
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	0f 92       	push	r0
    209a:	11 24       	eor	r1, r1
    209c:	0b b6       	in	r0, 0x3b	; 59
    209e:	0f 92       	push	r0
    20a0:	2f 93       	push	r18
    20a2:	3f 93       	push	r19
    20a4:	4f 93       	push	r20
    20a6:	5f 93       	push	r21
    20a8:	6f 93       	push	r22
    20aa:	7f 93       	push	r23
    20ac:	8f 93       	push	r24
    20ae:	9f 93       	push	r25
    20b0:	af 93       	push	r26
    20b2:	bf 93       	push	r27
    20b4:	ef 93       	push	r30
    20b6:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    20b8:	e0 91 ab 04 	lds	r30, 0x04AB	; 0x8004ab <tc_tccr1_compc_callback>
    20bc:	f0 91 ac 04 	lds	r31, 0x04AC	; 0x8004ac <tc_tccr1_compc_callback+0x1>
    20c0:	30 97       	sbiw	r30, 0x00	; 0
    20c2:	09 f0       	breq	.+2      	; 0x20c6 <__vector_19+0x34>
		tc_tccr1_compc_callback();
    20c4:	19 95       	eicall
	}
}
    20c6:	ff 91       	pop	r31
    20c8:	ef 91       	pop	r30
    20ca:	bf 91       	pop	r27
    20cc:	af 91       	pop	r26
    20ce:	9f 91       	pop	r25
    20d0:	8f 91       	pop	r24
    20d2:	7f 91       	pop	r23
    20d4:	6f 91       	pop	r22
    20d6:	5f 91       	pop	r21
    20d8:	4f 91       	pop	r20
    20da:	3f 91       	pop	r19
    20dc:	2f 91       	pop	r18
    20de:	0f 90       	pop	r0
    20e0:	0b be       	out	0x3b, r0	; 59
    20e2:	0f 90       	pop	r0
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	0f 90       	pop	r0
    20e8:	1f 90       	pop	r1
    20ea:	18 95       	reti

000020ec <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    20ec:	1f 92       	push	r1
    20ee:	0f 92       	push	r0
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	0f 92       	push	r0
    20f4:	11 24       	eor	r1, r1
    20f6:	0b b6       	in	r0, 0x3b	; 59
    20f8:	0f 92       	push	r0
    20fa:	2f 93       	push	r18
    20fc:	3f 93       	push	r19
    20fe:	4f 93       	push	r20
    2100:	5f 93       	push	r21
    2102:	6f 93       	push	r22
    2104:	7f 93       	push	r23
    2106:	8f 93       	push	r24
    2108:	9f 93       	push	r25
    210a:	af 93       	push	r26
    210c:	bf 93       	push	r27
    210e:	ef 93       	push	r30
    2110:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    2112:	e0 91 a9 04 	lds	r30, 0x04A9	; 0x8004a9 <tc_tccr3_ovf_callback>
    2116:	f0 91 aa 04 	lds	r31, 0x04AA	; 0x8004aa <tc_tccr3_ovf_callback+0x1>
    211a:	30 97       	sbiw	r30, 0x00	; 0
    211c:	09 f0       	breq	.+2      	; 0x2120 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    211e:	19 95       	eicall
	}
}
    2120:	ff 91       	pop	r31
    2122:	ef 91       	pop	r30
    2124:	bf 91       	pop	r27
    2126:	af 91       	pop	r26
    2128:	9f 91       	pop	r25
    212a:	8f 91       	pop	r24
    212c:	7f 91       	pop	r23
    212e:	6f 91       	pop	r22
    2130:	5f 91       	pop	r21
    2132:	4f 91       	pop	r20
    2134:	3f 91       	pop	r19
    2136:	2f 91       	pop	r18
    2138:	0f 90       	pop	r0
    213a:	0b be       	out	0x3b, r0	; 59
    213c:	0f 90       	pop	r0
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	0f 90       	pop	r0
    2142:	1f 90       	pop	r1
    2144:	18 95       	reti

00002146 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    2146:	1f 92       	push	r1
    2148:	0f 92       	push	r0
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	0f 92       	push	r0
    214e:	11 24       	eor	r1, r1
    2150:	0b b6       	in	r0, 0x3b	; 59
    2152:	0f 92       	push	r0
    2154:	2f 93       	push	r18
    2156:	3f 93       	push	r19
    2158:	4f 93       	push	r20
    215a:	5f 93       	push	r21
    215c:	6f 93       	push	r22
    215e:	7f 93       	push	r23
    2160:	8f 93       	push	r24
    2162:	9f 93       	push	r25
    2164:	af 93       	push	r26
    2166:	bf 93       	push	r27
    2168:	ef 93       	push	r30
    216a:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    216c:	e0 91 a7 04 	lds	r30, 0x04A7	; 0x8004a7 <tc_tccr3_compa_callback>
    2170:	f0 91 a8 04 	lds	r31, 0x04A8	; 0x8004a8 <tc_tccr3_compa_callback+0x1>
    2174:	30 97       	sbiw	r30, 0x00	; 0
    2176:	09 f0       	breq	.+2      	; 0x217a <__vector_32+0x34>
		tc_tccr3_compa_callback();
    2178:	19 95       	eicall
	}
}
    217a:	ff 91       	pop	r31
    217c:	ef 91       	pop	r30
    217e:	bf 91       	pop	r27
    2180:	af 91       	pop	r26
    2182:	9f 91       	pop	r25
    2184:	8f 91       	pop	r24
    2186:	7f 91       	pop	r23
    2188:	6f 91       	pop	r22
    218a:	5f 91       	pop	r21
    218c:	4f 91       	pop	r20
    218e:	3f 91       	pop	r19
    2190:	2f 91       	pop	r18
    2192:	0f 90       	pop	r0
    2194:	0b be       	out	0x3b, r0	; 59
    2196:	0f 90       	pop	r0
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	0f 90       	pop	r0
    219c:	1f 90       	pop	r1
    219e:	18 95       	reti

000021a0 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    21a0:	1f 92       	push	r1
    21a2:	0f 92       	push	r0
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	0f 92       	push	r0
    21a8:	11 24       	eor	r1, r1
    21aa:	0b b6       	in	r0, 0x3b	; 59
    21ac:	0f 92       	push	r0
    21ae:	2f 93       	push	r18
    21b0:	3f 93       	push	r19
    21b2:	4f 93       	push	r20
    21b4:	5f 93       	push	r21
    21b6:	6f 93       	push	r22
    21b8:	7f 93       	push	r23
    21ba:	8f 93       	push	r24
    21bc:	9f 93       	push	r25
    21be:	af 93       	push	r26
    21c0:	bf 93       	push	r27
    21c2:	ef 93       	push	r30
    21c4:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    21c6:	e0 91 a5 04 	lds	r30, 0x04A5	; 0x8004a5 <tc_tccr3_compb_callback>
    21ca:	f0 91 a6 04 	lds	r31, 0x04A6	; 0x8004a6 <tc_tccr3_compb_callback+0x1>
    21ce:	30 97       	sbiw	r30, 0x00	; 0
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <__vector_33+0x34>
		tc_tccr3_compb_callback();
    21d2:	19 95       	eicall
	}
}
    21d4:	ff 91       	pop	r31
    21d6:	ef 91       	pop	r30
    21d8:	bf 91       	pop	r27
    21da:	af 91       	pop	r26
    21dc:	9f 91       	pop	r25
    21de:	8f 91       	pop	r24
    21e0:	7f 91       	pop	r23
    21e2:	6f 91       	pop	r22
    21e4:	5f 91       	pop	r21
    21e6:	4f 91       	pop	r20
    21e8:	3f 91       	pop	r19
    21ea:	2f 91       	pop	r18
    21ec:	0f 90       	pop	r0
    21ee:	0b be       	out	0x3b, r0	; 59
    21f0:	0f 90       	pop	r0
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	0f 90       	pop	r0
    21f6:	1f 90       	pop	r1
    21f8:	18 95       	reti

000021fa <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    21fa:	1f 92       	push	r1
    21fc:	0f 92       	push	r0
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	0f 92       	push	r0
    2202:	11 24       	eor	r1, r1
    2204:	0b b6       	in	r0, 0x3b	; 59
    2206:	0f 92       	push	r0
    2208:	2f 93       	push	r18
    220a:	3f 93       	push	r19
    220c:	4f 93       	push	r20
    220e:	5f 93       	push	r21
    2210:	6f 93       	push	r22
    2212:	7f 93       	push	r23
    2214:	8f 93       	push	r24
    2216:	9f 93       	push	r25
    2218:	af 93       	push	r26
    221a:	bf 93       	push	r27
    221c:	ef 93       	push	r30
    221e:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    2220:	e0 91 a3 04 	lds	r30, 0x04A3	; 0x8004a3 <tc_tccr3_compc_callback>
    2224:	f0 91 a4 04 	lds	r31, 0x04A4	; 0x8004a4 <tc_tccr3_compc_callback+0x1>
    2228:	30 97       	sbiw	r30, 0x00	; 0
    222a:	09 f0       	breq	.+2      	; 0x222e <__vector_34+0x34>
		tc_tccr3_compc_callback();
    222c:	19 95       	eicall
	}
}
    222e:	ff 91       	pop	r31
    2230:	ef 91       	pop	r30
    2232:	bf 91       	pop	r27
    2234:	af 91       	pop	r26
    2236:	9f 91       	pop	r25
    2238:	8f 91       	pop	r24
    223a:	7f 91       	pop	r23
    223c:	6f 91       	pop	r22
    223e:	5f 91       	pop	r21
    2240:	4f 91       	pop	r20
    2242:	3f 91       	pop	r19
    2244:	2f 91       	pop	r18
    2246:	0f 90       	pop	r0
    2248:	0b be       	out	0x3b, r0	; 59
    224a:	0f 90       	pop	r0
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	0f 90       	pop	r0
    2250:	1f 90       	pop	r1
    2252:	18 95       	reti

00002254 <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    2254:	1f 92       	push	r1
    2256:	0f 92       	push	r0
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	0f 92       	push	r0
    225c:	11 24       	eor	r1, r1
    225e:	0b b6       	in	r0, 0x3b	; 59
    2260:	0f 92       	push	r0
    2262:	2f 93       	push	r18
    2264:	3f 93       	push	r19
    2266:	4f 93       	push	r20
    2268:	5f 93       	push	r21
    226a:	6f 93       	push	r22
    226c:	7f 93       	push	r23
    226e:	8f 93       	push	r24
    2270:	9f 93       	push	r25
    2272:	af 93       	push	r26
    2274:	bf 93       	push	r27
    2276:	ef 93       	push	r30
    2278:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    227a:	e0 91 a1 04 	lds	r30, 0x04A1	; 0x8004a1 <tc_tccr4_ovf_callback>
    227e:	f0 91 a2 04 	lds	r31, 0x04A2	; 0x8004a2 <tc_tccr4_ovf_callback+0x1>
    2282:	30 97       	sbiw	r30, 0x00	; 0
    2284:	09 f0       	breq	.+2      	; 0x2288 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    2286:	19 95       	eicall
	}
}
    2288:	ff 91       	pop	r31
    228a:	ef 91       	pop	r30
    228c:	bf 91       	pop	r27
    228e:	af 91       	pop	r26
    2290:	9f 91       	pop	r25
    2292:	8f 91       	pop	r24
    2294:	7f 91       	pop	r23
    2296:	6f 91       	pop	r22
    2298:	5f 91       	pop	r21
    229a:	4f 91       	pop	r20
    229c:	3f 91       	pop	r19
    229e:	2f 91       	pop	r18
    22a0:	0f 90       	pop	r0
    22a2:	0b be       	out	0x3b, r0	; 59
    22a4:	0f 90       	pop	r0
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	0f 90       	pop	r0
    22aa:	1f 90       	pop	r1
    22ac:	18 95       	reti

000022ae <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    22ae:	1f 92       	push	r1
    22b0:	0f 92       	push	r0
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	0f 92       	push	r0
    22b6:	11 24       	eor	r1, r1
    22b8:	0b b6       	in	r0, 0x3b	; 59
    22ba:	0f 92       	push	r0
    22bc:	2f 93       	push	r18
    22be:	3f 93       	push	r19
    22c0:	4f 93       	push	r20
    22c2:	5f 93       	push	r21
    22c4:	6f 93       	push	r22
    22c6:	7f 93       	push	r23
    22c8:	8f 93       	push	r24
    22ca:	9f 93       	push	r25
    22cc:	af 93       	push	r26
    22ce:	bf 93       	push	r27
    22d0:	ef 93       	push	r30
    22d2:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    22d4:	e0 91 9f 04 	lds	r30, 0x049F	; 0x80049f <tc_tccr4_compa_callback>
    22d8:	f0 91 a0 04 	lds	r31, 0x04A0	; 0x8004a0 <tc_tccr4_compa_callback+0x1>
    22dc:	30 97       	sbiw	r30, 0x00	; 0
    22de:	09 f0       	breq	.+2      	; 0x22e2 <__vector_42+0x34>
		tc_tccr4_compa_callback();
    22e0:	19 95       	eicall
	}
}
    22e2:	ff 91       	pop	r31
    22e4:	ef 91       	pop	r30
    22e6:	bf 91       	pop	r27
    22e8:	af 91       	pop	r26
    22ea:	9f 91       	pop	r25
    22ec:	8f 91       	pop	r24
    22ee:	7f 91       	pop	r23
    22f0:	6f 91       	pop	r22
    22f2:	5f 91       	pop	r21
    22f4:	4f 91       	pop	r20
    22f6:	3f 91       	pop	r19
    22f8:	2f 91       	pop	r18
    22fa:	0f 90       	pop	r0
    22fc:	0b be       	out	0x3b, r0	; 59
    22fe:	0f 90       	pop	r0
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	0f 90       	pop	r0
    2304:	1f 90       	pop	r1
    2306:	18 95       	reti

00002308 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    2308:	1f 92       	push	r1
    230a:	0f 92       	push	r0
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	0f 92       	push	r0
    2310:	11 24       	eor	r1, r1
    2312:	0b b6       	in	r0, 0x3b	; 59
    2314:	0f 92       	push	r0
    2316:	2f 93       	push	r18
    2318:	3f 93       	push	r19
    231a:	4f 93       	push	r20
    231c:	5f 93       	push	r21
    231e:	6f 93       	push	r22
    2320:	7f 93       	push	r23
    2322:	8f 93       	push	r24
    2324:	9f 93       	push	r25
    2326:	af 93       	push	r26
    2328:	bf 93       	push	r27
    232a:	ef 93       	push	r30
    232c:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    232e:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <tc_tccr4_compb_callback>
    2332:	f0 91 9e 04 	lds	r31, 0x049E	; 0x80049e <tc_tccr4_compb_callback+0x1>
    2336:	30 97       	sbiw	r30, 0x00	; 0
    2338:	09 f0       	breq	.+2      	; 0x233c <__vector_43+0x34>
		tc_tccr4_compb_callback();
    233a:	19 95       	eicall
	}
}
    233c:	ff 91       	pop	r31
    233e:	ef 91       	pop	r30
    2340:	bf 91       	pop	r27
    2342:	af 91       	pop	r26
    2344:	9f 91       	pop	r25
    2346:	8f 91       	pop	r24
    2348:	7f 91       	pop	r23
    234a:	6f 91       	pop	r22
    234c:	5f 91       	pop	r21
    234e:	4f 91       	pop	r20
    2350:	3f 91       	pop	r19
    2352:	2f 91       	pop	r18
    2354:	0f 90       	pop	r0
    2356:	0b be       	out	0x3b, r0	; 59
    2358:	0f 90       	pop	r0
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	0f 90       	pop	r0
    235e:	1f 90       	pop	r1
    2360:	18 95       	reti

00002362 <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    2362:	1f 92       	push	r1
    2364:	0f 92       	push	r0
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	0f 92       	push	r0
    236a:	11 24       	eor	r1, r1
    236c:	0b b6       	in	r0, 0x3b	; 59
    236e:	0f 92       	push	r0
    2370:	2f 93       	push	r18
    2372:	3f 93       	push	r19
    2374:	4f 93       	push	r20
    2376:	5f 93       	push	r21
    2378:	6f 93       	push	r22
    237a:	7f 93       	push	r23
    237c:	8f 93       	push	r24
    237e:	9f 93       	push	r25
    2380:	af 93       	push	r26
    2382:	bf 93       	push	r27
    2384:	ef 93       	push	r30
    2386:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    2388:	e0 91 9b 04 	lds	r30, 0x049B	; 0x80049b <tc_tccr4_compc_callback>
    238c:	f0 91 9c 04 	lds	r31, 0x049C	; 0x80049c <tc_tccr4_compc_callback+0x1>
    2390:	30 97       	sbiw	r30, 0x00	; 0
    2392:	09 f0       	breq	.+2      	; 0x2396 <__vector_44+0x34>
		tc_tccr4_compc_callback();
    2394:	19 95       	eicall
	}
}
    2396:	ff 91       	pop	r31
    2398:	ef 91       	pop	r30
    239a:	bf 91       	pop	r27
    239c:	af 91       	pop	r26
    239e:	9f 91       	pop	r25
    23a0:	8f 91       	pop	r24
    23a2:	7f 91       	pop	r23
    23a4:	6f 91       	pop	r22
    23a6:	5f 91       	pop	r21
    23a8:	4f 91       	pop	r20
    23aa:	3f 91       	pop	r19
    23ac:	2f 91       	pop	r18
    23ae:	0f 90       	pop	r0
    23b0:	0b be       	out	0x3b, r0	; 59
    23b2:	0f 90       	pop	r0
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	0f 90       	pop	r0
    23b8:	1f 90       	pop	r1
    23ba:	18 95       	reti

000023bc <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    23bc:	1f 92       	push	r1
    23be:	0f 92       	push	r0
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	0f 92       	push	r0
    23c4:	11 24       	eor	r1, r1
    23c6:	0b b6       	in	r0, 0x3b	; 59
    23c8:	0f 92       	push	r0
    23ca:	2f 93       	push	r18
    23cc:	3f 93       	push	r19
    23ce:	4f 93       	push	r20
    23d0:	5f 93       	push	r21
    23d2:	6f 93       	push	r22
    23d4:	7f 93       	push	r23
    23d6:	8f 93       	push	r24
    23d8:	9f 93       	push	r25
    23da:	af 93       	push	r26
    23dc:	bf 93       	push	r27
    23de:	ef 93       	push	r30
    23e0:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    23e2:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <tc_tccr5_ovf_callback>
    23e6:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <tc_tccr5_ovf_callback+0x1>
    23ea:	30 97       	sbiw	r30, 0x00	; 0
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <__vector_50+0x34>
		tc_tccr5_ovf_callback();
    23ee:	19 95       	eicall
	}
}
    23f0:	ff 91       	pop	r31
    23f2:	ef 91       	pop	r30
    23f4:	bf 91       	pop	r27
    23f6:	af 91       	pop	r26
    23f8:	9f 91       	pop	r25
    23fa:	8f 91       	pop	r24
    23fc:	7f 91       	pop	r23
    23fe:	6f 91       	pop	r22
    2400:	5f 91       	pop	r21
    2402:	4f 91       	pop	r20
    2404:	3f 91       	pop	r19
    2406:	2f 91       	pop	r18
    2408:	0f 90       	pop	r0
    240a:	0b be       	out	0x3b, r0	; 59
    240c:	0f 90       	pop	r0
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	0f 90       	pop	r0
    2412:	1f 90       	pop	r1
    2414:	18 95       	reti

00002416 <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    2416:	1f 92       	push	r1
    2418:	0f 92       	push	r0
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	0f 92       	push	r0
    241e:	11 24       	eor	r1, r1
    2420:	0b b6       	in	r0, 0x3b	; 59
    2422:	0f 92       	push	r0
    2424:	2f 93       	push	r18
    2426:	3f 93       	push	r19
    2428:	4f 93       	push	r20
    242a:	5f 93       	push	r21
    242c:	6f 93       	push	r22
    242e:	7f 93       	push	r23
    2430:	8f 93       	push	r24
    2432:	9f 93       	push	r25
    2434:	af 93       	push	r26
    2436:	bf 93       	push	r27
    2438:	ef 93       	push	r30
    243a:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    243c:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <tc_tccr5_compa_callback>
    2440:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <tc_tccr5_compa_callback+0x1>
    2444:	30 97       	sbiw	r30, 0x00	; 0
    2446:	09 f0       	breq	.+2      	; 0x244a <__vector_47+0x34>
		tc_tccr5_compa_callback();
    2448:	19 95       	eicall
	}
}
    244a:	ff 91       	pop	r31
    244c:	ef 91       	pop	r30
    244e:	bf 91       	pop	r27
    2450:	af 91       	pop	r26
    2452:	9f 91       	pop	r25
    2454:	8f 91       	pop	r24
    2456:	7f 91       	pop	r23
    2458:	6f 91       	pop	r22
    245a:	5f 91       	pop	r21
    245c:	4f 91       	pop	r20
    245e:	3f 91       	pop	r19
    2460:	2f 91       	pop	r18
    2462:	0f 90       	pop	r0
    2464:	0b be       	out	0x3b, r0	; 59
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	0f 90       	pop	r0
    246c:	1f 90       	pop	r1
    246e:	18 95       	reti

00002470 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    2470:	1f 92       	push	r1
    2472:	0f 92       	push	r0
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	0f 92       	push	r0
    2478:	11 24       	eor	r1, r1
    247a:	0b b6       	in	r0, 0x3b	; 59
    247c:	0f 92       	push	r0
    247e:	2f 93       	push	r18
    2480:	3f 93       	push	r19
    2482:	4f 93       	push	r20
    2484:	5f 93       	push	r21
    2486:	6f 93       	push	r22
    2488:	7f 93       	push	r23
    248a:	8f 93       	push	r24
    248c:	9f 93       	push	r25
    248e:	af 93       	push	r26
    2490:	bf 93       	push	r27
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    2496:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <tc_tccr5_compb_callback>
    249a:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <tc_tccr5_compb_callback+0x1>
    249e:	30 97       	sbiw	r30, 0x00	; 0
    24a0:	09 f0       	breq	.+2      	; 0x24a4 <__vector_48+0x34>
		tc_tccr5_compb_callback();
    24a2:	19 95       	eicall
	}
}
    24a4:	ff 91       	pop	r31
    24a6:	ef 91       	pop	r30
    24a8:	bf 91       	pop	r27
    24aa:	af 91       	pop	r26
    24ac:	9f 91       	pop	r25
    24ae:	8f 91       	pop	r24
    24b0:	7f 91       	pop	r23
    24b2:	6f 91       	pop	r22
    24b4:	5f 91       	pop	r21
    24b6:	4f 91       	pop	r20
    24b8:	3f 91       	pop	r19
    24ba:	2f 91       	pop	r18
    24bc:	0f 90       	pop	r0
    24be:	0b be       	out	0x3b, r0	; 59
    24c0:	0f 90       	pop	r0
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	0f 90       	pop	r0
    24c6:	1f 90       	pop	r1
    24c8:	18 95       	reti

000024ca <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    24ca:	1f 92       	push	r1
    24cc:	0f 92       	push	r0
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	0f 92       	push	r0
    24d2:	11 24       	eor	r1, r1
    24d4:	0b b6       	in	r0, 0x3b	; 59
    24d6:	0f 92       	push	r0
    24d8:	2f 93       	push	r18
    24da:	3f 93       	push	r19
    24dc:	4f 93       	push	r20
    24de:	5f 93       	push	r21
    24e0:	6f 93       	push	r22
    24e2:	7f 93       	push	r23
    24e4:	8f 93       	push	r24
    24e6:	9f 93       	push	r25
    24e8:	af 93       	push	r26
    24ea:	bf 93       	push	r27
    24ec:	ef 93       	push	r30
    24ee:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    24f0:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <tc_tccr5_compc_callback>
    24f4:	f0 91 94 04 	lds	r31, 0x0494	; 0x800494 <tc_tccr5_compc_callback+0x1>
    24f8:	30 97       	sbiw	r30, 0x00	; 0
    24fa:	09 f0       	breq	.+2      	; 0x24fe <__vector_49+0x34>
		tc_tccr5_compc_callback();
    24fc:	19 95       	eicall
	}
}
    24fe:	ff 91       	pop	r31
    2500:	ef 91       	pop	r30
    2502:	bf 91       	pop	r27
    2504:	af 91       	pop	r26
    2506:	9f 91       	pop	r25
    2508:	8f 91       	pop	r24
    250a:	7f 91       	pop	r23
    250c:	6f 91       	pop	r22
    250e:	5f 91       	pop	r21
    2510:	4f 91       	pop	r20
    2512:	3f 91       	pop	r19
    2514:	2f 91       	pop	r18
    2516:	0f 90       	pop	r0
    2518:	0b be       	out	0x3b, r0	; 59
    251a:	0f 90       	pop	r0
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	0f 90       	pop	r0
    2520:	1f 90       	pop	r1
    2522:	18 95       	reti

00002524 <tc_enable>:

void tc_enable(volatile void *tc)
{
    2524:	1f 93       	push	r17
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	1f 92       	push	r1
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2530:	2f b7       	in	r18, 0x3f	; 63
    2532:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2534:	f8 94       	cli
	return flags;
    2536:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	09 f4       	brne	.+2      	; 0x253e <tc_enable+0x1a>
    253c:	64 c0       	rjmp	.+200    	; 0x2606 <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    253e:	88 37       	cpi	r24, 0x78	; 120
    2540:	91 05       	cpc	r25, r1
    2542:	49 f4       	brne	.+18     	; 0x2556 <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    254c:	60 e1       	ldi	r22, 0x10	; 16
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
    2554:	58 c0       	rjmp	.+176    	; 0x2606 <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2556:	80 3c       	cpi	r24, 0xC0	; 192
    2558:	91 05       	cpc	r25, r1
    255a:	29 f4       	brne	.+10     	; 0x2566 <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    255c:	62 e0       	ldi	r22, 0x02	; 2
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
    2564:	50 c0       	rjmp	.+160    	; 0x2606 <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2566:	8c 34       	cpi	r24, 0x4C	; 76
    2568:	91 05       	cpc	r25, r1
    256a:	29 f4       	brne	.+10     	; 0x2576 <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    256c:	64 e0       	ldi	r22, 0x04	; 4
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
    2574:	48 c0       	rjmp	.+144    	; 0x2606 <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    2576:	80 38       	cpi	r24, 0x80	; 128
    2578:	91 05       	cpc	r25, r1
    257a:	29 f4       	brne	.+10     	; 0x2586 <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    257c:	68 e0       	ldi	r22, 0x08	; 8
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
    2584:	40 c0       	rjmp	.+128    	; 0x2606 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2586:	84 34       	cpi	r24, 0x44	; 68
    2588:	91 05       	cpc	r25, r1
    258a:	29 f4       	brne	.+10     	; 0x2596 <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    258c:	60 e2       	ldi	r22, 0x20	; 32
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
    2594:	38 c0       	rjmp	.+112    	; 0x2606 <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    2596:	80 3b       	cpi	r24, 0xB0	; 176
    2598:	91 05       	cpc	r25, r1
    259a:	29 f4       	brne	.+10     	; 0x25a6 <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    259c:	60 e4       	ldi	r22, 0x40	; 64
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
    25a4:	30 c0       	rjmp	.+96     	; 0x2606 <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    25a6:	88 3b       	cpi	r24, 0xB8	; 184
    25a8:	91 05       	cpc	r25, r1
    25aa:	29 f4       	brne	.+10     	; 0x25b6 <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    25ac:	60 e8       	ldi	r22, 0x80	; 128
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
    25b4:	28 c0       	rjmp	.+80     	; 0x2606 <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    25b6:	88 3c       	cpi	r24, 0xC8	; 200
    25b8:	91 05       	cpc	r25, r1
    25ba:	29 f4       	brne	.+10     	; 0x25c6 <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    25bc:	61 e0       	ldi	r22, 0x01	; 1
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
    25c4:	20 c0       	rjmp	.+64     	; 0x2606 <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    25c6:	80 39       	cpi	r24, 0x90	; 144
    25c8:	91 05       	cpc	r25, r1
    25ca:	29 f4       	brne	.+10     	; 0x25d6 <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    25cc:	68 e0       	ldi	r22, 0x08	; 8
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
    25d4:	18 c0       	rjmp	.+48     	; 0x2606 <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    25d6:	80 3a       	cpi	r24, 0xA0	; 160
    25d8:	91 05       	cpc	r25, r1
    25da:	29 f4       	brne	.+10     	; 0x25e6 <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    25dc:	60 e1       	ldi	r22, 0x10	; 16
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
    25e4:	10 c0       	rjmp	.+32     	; 0x2606 <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    25e6:	80 32       	cpi	r24, 0x20	; 32
    25e8:	21 e0       	ldi	r18, 0x01	; 1
    25ea:	92 07       	cpc	r25, r18
    25ec:	29 f4       	brne	.+10     	; 0x25f8 <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    25ee:	60 e2       	ldi	r22, 0x20	; 32
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
    25f6:	07 c0       	rjmp	.+14     	; 0x2606 <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    25f8:	83 34       	cpi	r24, 0x43	; 67
    25fa:	91 40       	sbci	r25, 0x01	; 1
    25fc:	21 f4       	brne	.+8      	; 0x2606 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    25fe:	60 e4       	ldi	r22, 0x40	; 64
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	0e 94 cc 03 	call	0x798	; 0x798 <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2606:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    2608:	0f 90       	pop	r0
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	1f 91       	pop	r17
    2610:	08 95       	ret

00002612 <tc_disable>:

void tc_disable(volatile void *tc)
{
    2612:	1f 93       	push	r17
    2614:	cf 93       	push	r28
    2616:	df 93       	push	r29
    2618:	1f 92       	push	r1
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    261e:	2f b7       	in	r18, 0x3f	; 63
    2620:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2622:	f8 94       	cli
	return flags;
    2624:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	09 f4       	brne	.+2      	; 0x262c <tc_disable+0x1a>
    262a:	64 c0       	rjmp	.+200    	; 0x26f4 <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    262c:	88 37       	cpi	r24, 0x78	; 120
    262e:	91 05       	cpc	r25, r1
    2630:	49 f4       	brne	.+18     	; 0x2644 <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    2632:	61 e0       	ldi	r22, 0x01	; 1
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    263a:	60 e1       	ldi	r22, 0x10	; 16
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
    2642:	58 c0       	rjmp	.+176    	; 0x26f4 <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2644:	80 3c       	cpi	r24, 0xC0	; 192
    2646:	91 05       	cpc	r25, r1
    2648:	29 f4       	brne	.+10     	; 0x2654 <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    264a:	62 e0       	ldi	r22, 0x02	; 2
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
    2652:	50 c0       	rjmp	.+160    	; 0x26f4 <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2654:	8c 34       	cpi	r24, 0x4C	; 76
    2656:	91 05       	cpc	r25, r1
    2658:	29 f4       	brne	.+10     	; 0x2664 <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    265a:	64 e0       	ldi	r22, 0x04	; 4
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
    2662:	48 c0       	rjmp	.+144    	; 0x26f4 <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    2664:	80 38       	cpi	r24, 0x80	; 128
    2666:	91 05       	cpc	r25, r1
    2668:	29 f4       	brne	.+10     	; 0x2674 <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    266a:	68 e0       	ldi	r22, 0x08	; 8
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
    2672:	40 c0       	rjmp	.+128    	; 0x26f4 <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2674:	84 34       	cpi	r24, 0x44	; 68
    2676:	91 05       	cpc	r25, r1
    2678:	29 f4       	brne	.+10     	; 0x2684 <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    267a:	60 e2       	ldi	r22, 0x20	; 32
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
    2682:	38 c0       	rjmp	.+112    	; 0x26f4 <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    2684:	80 3b       	cpi	r24, 0xB0	; 176
    2686:	91 05       	cpc	r25, r1
    2688:	29 f4       	brne	.+10     	; 0x2694 <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    268a:	60 e4       	ldi	r22, 0x40	; 64
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
    2692:	30 c0       	rjmp	.+96     	; 0x26f4 <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    2694:	88 3b       	cpi	r24, 0xB8	; 184
    2696:	91 05       	cpc	r25, r1
    2698:	29 f4       	brne	.+10     	; 0x26a4 <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    269a:	60 e8       	ldi	r22, 0x80	; 128
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
    26a2:	28 c0       	rjmp	.+80     	; 0x26f4 <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    26a4:	88 3c       	cpi	r24, 0xC8	; 200
    26a6:	91 05       	cpc	r25, r1
    26a8:	29 f4       	brne	.+10     	; 0x26b4 <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    26aa:	61 e0       	ldi	r22, 0x01	; 1
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
    26b2:	20 c0       	rjmp	.+64     	; 0x26f4 <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    26b4:	80 39       	cpi	r24, 0x90	; 144
    26b6:	91 05       	cpc	r25, r1
    26b8:	29 f4       	brne	.+10     	; 0x26c4 <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    26ba:	68 e0       	ldi	r22, 0x08	; 8
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
    26c2:	18 c0       	rjmp	.+48     	; 0x26f4 <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    26c4:	80 3a       	cpi	r24, 0xA0	; 160
    26c6:	91 05       	cpc	r25, r1
    26c8:	29 f4       	brne	.+10     	; 0x26d4 <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    26ca:	60 e1       	ldi	r22, 0x10	; 16
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
    26d2:	10 c0       	rjmp	.+32     	; 0x26f4 <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    26d4:	80 32       	cpi	r24, 0x20	; 32
    26d6:	21 e0       	ldi	r18, 0x01	; 1
    26d8:	92 07       	cpc	r25, r18
    26da:	29 f4       	brne	.+10     	; 0x26e6 <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    26dc:	60 e2       	ldi	r22, 0x20	; 32
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
    26e4:	07 c0       	rjmp	.+14     	; 0x26f4 <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    26e6:	83 34       	cpi	r24, 0x43	; 67
    26e8:	91 40       	sbci	r25, 0x01	; 1
    26ea:	21 f4       	brne	.+8      	; 0x26f4 <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    26ec:	60 e4       	ldi	r22, 0x40	; 64
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    26f4:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    26f6:	0f 90       	pop	r0
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	1f 91       	pop	r17
    26fe:	08 95       	ret

00002700 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    2700:	80 38       	cpi	r24, 0x80	; 128
    2702:	91 05       	cpc	r25, r1
    2704:	29 f4       	brne	.+10     	; 0x2710 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    2706:	70 93 b2 04 	sts	0x04B2, r23	; 0x8004b2 <tc_tccr1_ovf_callback+0x1>
    270a:	60 93 b1 04 	sts	0x04B1, r22	; 0x8004b1 <tc_tccr1_ovf_callback>
    270e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    2710:	80 39       	cpi	r24, 0x90	; 144
    2712:	91 05       	cpc	r25, r1
    2714:	29 f4       	brne	.+10     	; 0x2720 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    2716:	70 93 aa 04 	sts	0x04AA, r23	; 0x8004aa <tc_tccr3_ovf_callback+0x1>
    271a:	60 93 a9 04 	sts	0x04A9, r22	; 0x8004a9 <tc_tccr3_ovf_callback>
    271e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    2720:	80 3a       	cpi	r24, 0xA0	; 160
    2722:	91 05       	cpc	r25, r1
    2724:	29 f4       	brne	.+10     	; 0x2730 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    2726:	70 93 a2 04 	sts	0x04A2, r23	; 0x8004a2 <tc_tccr4_ovf_callback+0x1>
    272a:	60 93 a1 04 	sts	0x04A1, r22	; 0x8004a1 <tc_tccr4_ovf_callback>
    272e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    2730:	80 32       	cpi	r24, 0x20	; 32
    2732:	91 40       	sbci	r25, 0x01	; 1
    2734:	21 f4       	brne	.+8      	; 0x273e <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    2736:	70 93 9a 04 	sts	0x049A, r23	; 0x80049a <tc_tccr5_ovf_callback+0x1>
    273a:	60 93 99 04 	sts	0x0499, r22	; 0x800499 <tc_tccr5_ovf_callback>
    273e:	08 95       	ret

00002740 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    2740:	80 38       	cpi	r24, 0x80	; 128
    2742:	91 05       	cpc	r25, r1
    2744:	29 f4       	brne	.+10     	; 0x2750 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    2746:	70 93 b0 04 	sts	0x04B0, r23	; 0x8004b0 <tc_tccr1_compa_callback+0x1>
    274a:	60 93 af 04 	sts	0x04AF, r22	; 0x8004af <tc_tccr1_compa_callback>
    274e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    2750:	80 39       	cpi	r24, 0x90	; 144
    2752:	91 05       	cpc	r25, r1
    2754:	29 f4       	brne	.+10     	; 0x2760 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    2756:	70 93 a8 04 	sts	0x04A8, r23	; 0x8004a8 <tc_tccr3_compa_callback+0x1>
    275a:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <tc_tccr3_compa_callback>
    275e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    2760:	80 3a       	cpi	r24, 0xA0	; 160
    2762:	91 05       	cpc	r25, r1
    2764:	29 f4       	brne	.+10     	; 0x2770 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    2766:	70 93 a0 04 	sts	0x04A0, r23	; 0x8004a0 <tc_tccr4_compa_callback+0x1>
    276a:	60 93 9f 04 	sts	0x049F, r22	; 0x80049f <tc_tccr4_compa_callback>
    276e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    2770:	80 32       	cpi	r24, 0x20	; 32
    2772:	91 40       	sbci	r25, 0x01	; 1
    2774:	21 f4       	brne	.+8      	; 0x277e <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    2776:	70 93 98 04 	sts	0x0498, r23	; 0x800498 <tc_tccr5_compa_callback+0x1>
    277a:	60 93 97 04 	sts	0x0497, r22	; 0x800497 <tc_tccr5_compa_callback>
    277e:	08 95       	ret

00002780 <main>:
 * \brief Main function of the application
 */
int main(void)
{	
	/* Initialize the Wireless Module */
	wireless_init();    
    2780:	0e 94 6f 03 	call	0x6de	; 0x6de <wireless_init>
	
	/*The Modules selected in the wizard are initialized here */
	modules_init();
    2784:	0e 94 af 03 	call	0x75e	; 0x75e <modules_init>
 * \brief Tasks Handled By the Stack and application are Performed here,this function is handled in a loop to perform tasks continuously 
 */
void WirelessTask(void)
{
	/* These methods are called to perform the default tasks of the MAC Stack */
	pal_task();
    2788:	0e 94 ae 05 	call	0xb5c	; 0xb5c <pal_task>
	tal_task();
    278c:	0e 94 0b 08 	call	0x1016	; 0x1016 <tal_task>
/**
 * \brief Application task
 */
 void app_task(void)
{
	usr_wireless_app_task();
    2790:	0e 94 e6 01 	call	0x3cc	; 0x3cc <usr_wireless_app_task>
    2794:	f9 cf       	rjmp	.-14     	; 0x2788 <main+0x8>

00002796 <tal_tx_frame_done_cb>:
 * \param frame pointer to the transmitted frame
 */
void tal_tx_frame_done_cb(retval_t status, frame_info_t *frame)
{
	/*Perform application tasks when a frame is transmitted here*/
	usr_frame_transmitted_cb(status, frame);
    2796:	0c 94 8f 02 	jmp	0x51e	; 0x51e <usr_frame_transmitted_cb>
    279a:	08 95       	ret

0000279c <tal_rx_frame_cb>:
 * \brief This method (callback) is called when a frame is received by the transceiver
 * \param frame pointer to the received frame
 *
 */
void tal_rx_frame_cb(frame_info_t *frame)
{
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	ec 01       	movw	r28, r24
	/*Perform application tasks when a frame is received here*/
	usr_frame_received_cb(frame);
    27a2:	0e 94 08 02 	call	0x410	; 0x410 <usr_frame_received_cb>
	// Free-up the buffer which was used for reception once the frame is extracted.
	bmm_buffer_free(frame->buffer_header);
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	9a 81       	ldd	r25, Y+2	; 0x02
    27aa:	0e 94 da 05 	call	0xbb4	; 0xbb4 <bmm_buffer_free>
}
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	08 95       	ret

000027b4 <__mulsi3>:
    27b4:	db 01       	movw	r26, r22
    27b6:	8f 93       	push	r24
    27b8:	9f 93       	push	r25
    27ba:	49 d0       	rcall	.+146    	; 0x284e <__muluhisi3>
    27bc:	bf 91       	pop	r27
    27be:	af 91       	pop	r26
    27c0:	a2 9f       	mul	r26, r18
    27c2:	80 0d       	add	r24, r0
    27c4:	91 1d       	adc	r25, r1
    27c6:	a3 9f       	mul	r26, r19
    27c8:	90 0d       	add	r25, r0
    27ca:	b2 9f       	mul	r27, r18
    27cc:	90 0d       	add	r25, r0
    27ce:	11 24       	eor	r1, r1
    27d0:	08 95       	ret

000027d2 <__udivmodhi4>:
    27d2:	aa 1b       	sub	r26, r26
    27d4:	bb 1b       	sub	r27, r27
    27d6:	51 e1       	ldi	r21, 0x11	; 17
    27d8:	07 c0       	rjmp	.+14     	; 0x27e8 <__udivmodhi4_ep>

000027da <__udivmodhi4_loop>:
    27da:	aa 1f       	adc	r26, r26
    27dc:	bb 1f       	adc	r27, r27
    27de:	a6 17       	cp	r26, r22
    27e0:	b7 07       	cpc	r27, r23
    27e2:	10 f0       	brcs	.+4      	; 0x27e8 <__udivmodhi4_ep>
    27e4:	a6 1b       	sub	r26, r22
    27e6:	b7 0b       	sbc	r27, r23

000027e8 <__udivmodhi4_ep>:
    27e8:	88 1f       	adc	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	5a 95       	dec	r21
    27ee:	a9 f7       	brne	.-22     	; 0x27da <__udivmodhi4_loop>
    27f0:	80 95       	com	r24
    27f2:	90 95       	com	r25
    27f4:	bc 01       	movw	r22, r24
    27f6:	cd 01       	movw	r24, r26
    27f8:	08 95       	ret

000027fa <__divmodhi4>:
    27fa:	97 fb       	bst	r25, 7
    27fc:	07 2e       	mov	r0, r23
    27fe:	16 f4       	brtc	.+4      	; 0x2804 <__divmodhi4+0xa>
    2800:	00 94       	com	r0
    2802:	06 d0       	rcall	.+12     	; 0x2810 <__divmodhi4_neg1>
    2804:	77 fd       	sbrc	r23, 7
    2806:	08 d0       	rcall	.+16     	; 0x2818 <__divmodhi4_neg2>
    2808:	e4 df       	rcall	.-56     	; 0x27d2 <__udivmodhi4>
    280a:	07 fc       	sbrc	r0, 7
    280c:	05 d0       	rcall	.+10     	; 0x2818 <__divmodhi4_neg2>
    280e:	3e f4       	brtc	.+14     	; 0x281e <__divmodhi4_exit>

00002810 <__divmodhi4_neg1>:
    2810:	90 95       	com	r25
    2812:	81 95       	neg	r24
    2814:	9f 4f       	sbci	r25, 0xFF	; 255
    2816:	08 95       	ret

00002818 <__divmodhi4_neg2>:
    2818:	70 95       	com	r23
    281a:	61 95       	neg	r22
    281c:	7f 4f       	sbci	r23, 0xFF	; 255

0000281e <__divmodhi4_exit>:
    281e:	08 95       	ret

00002820 <__tablejump2__>:
    2820:	ee 0f       	add	r30, r30
    2822:	ff 1f       	adc	r31, r31
    2824:	88 1f       	adc	r24, r24
    2826:	8b bf       	out	0x3b, r24	; 59
    2828:	07 90       	elpm	r0, Z+
    282a:	f6 91       	elpm	r31, Z
    282c:	e0 2d       	mov	r30, r0
    282e:	19 94       	eijmp

00002830 <__umulhisi3>:
    2830:	a2 9f       	mul	r26, r18
    2832:	b0 01       	movw	r22, r0
    2834:	b3 9f       	mul	r27, r19
    2836:	c0 01       	movw	r24, r0
    2838:	a3 9f       	mul	r26, r19
    283a:	70 0d       	add	r23, r0
    283c:	81 1d       	adc	r24, r1
    283e:	11 24       	eor	r1, r1
    2840:	91 1d       	adc	r25, r1
    2842:	b2 9f       	mul	r27, r18
    2844:	70 0d       	add	r23, r0
    2846:	81 1d       	adc	r24, r1
    2848:	11 24       	eor	r1, r1
    284a:	91 1d       	adc	r25, r1
    284c:	08 95       	ret

0000284e <__muluhisi3>:
    284e:	f0 df       	rcall	.-32     	; 0x2830 <__umulhisi3>
    2850:	a5 9f       	mul	r26, r21
    2852:	90 0d       	add	r25, r0
    2854:	b4 9f       	mul	r27, r20
    2856:	90 0d       	add	r25, r0
    2858:	a4 9f       	mul	r26, r20
    285a:	80 0d       	add	r24, r0
    285c:	91 1d       	adc	r25, r1
    285e:	11 24       	eor	r1, r1
    2860:	08 95       	ret

00002862 <__mulshisi3>:
    2862:	b7 ff       	sbrs	r27, 7
    2864:	f4 cf       	rjmp	.-24     	; 0x284e <__muluhisi3>

00002866 <__mulohisi3>:
    2866:	f3 df       	rcall	.-26     	; 0x284e <__muluhisi3>
    2868:	82 1b       	sub	r24, r18
    286a:	93 0b       	sbc	r25, r19
    286c:	08 95       	ret

0000286e <__adddi3_s8>:
    286e:	00 24       	eor	r0, r0
    2870:	a7 fd       	sbrc	r26, 7
    2872:	00 94       	com	r0
    2874:	2a 0f       	add	r18, r26
    2876:	30 1d       	adc	r19, r0
    2878:	40 1d       	adc	r20, r0
    287a:	50 1d       	adc	r21, r0
    287c:	60 1d       	adc	r22, r0
    287e:	70 1d       	adc	r23, r0
    2880:	80 1d       	adc	r24, r0
    2882:	90 1d       	adc	r25, r0
    2884:	08 95       	ret

00002886 <__cmpdi2_s8>:
    2886:	00 24       	eor	r0, r0
    2888:	a7 fd       	sbrc	r26, 7
    288a:	00 94       	com	r0
    288c:	2a 17       	cp	r18, r26
    288e:	30 05       	cpc	r19, r0
    2890:	40 05       	cpc	r20, r0
    2892:	50 05       	cpc	r21, r0
    2894:	60 05       	cpc	r22, r0
    2896:	70 05       	cpc	r23, r0
    2898:	80 05       	cpc	r24, r0
    289a:	90 05       	cpc	r25, r0
    289c:	08 95       	ret

0000289e <do_rand>:
    289e:	8f 92       	push	r8
    28a0:	9f 92       	push	r9
    28a2:	af 92       	push	r10
    28a4:	bf 92       	push	r11
    28a6:	cf 92       	push	r12
    28a8:	df 92       	push	r13
    28aa:	ef 92       	push	r14
    28ac:	ff 92       	push	r15
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
    28b2:	ec 01       	movw	r28, r24
    28b4:	68 81       	ld	r22, Y
    28b6:	79 81       	ldd	r23, Y+1	; 0x01
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	9b 81       	ldd	r25, Y+3	; 0x03
    28bc:	61 15       	cp	r22, r1
    28be:	71 05       	cpc	r23, r1
    28c0:	81 05       	cpc	r24, r1
    28c2:	91 05       	cpc	r25, r1
    28c4:	21 f4       	brne	.+8      	; 0x28ce <do_rand+0x30>
    28c6:	64 e2       	ldi	r22, 0x24	; 36
    28c8:	79 ed       	ldi	r23, 0xD9	; 217
    28ca:	8b e5       	ldi	r24, 0x5B	; 91
    28cc:	97 e0       	ldi	r25, 0x07	; 7
    28ce:	2d e1       	ldi	r18, 0x1D	; 29
    28d0:	33 ef       	ldi	r19, 0xF3	; 243
    28d2:	41 e0       	ldi	r20, 0x01	; 1
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	4f d0       	rcall	.+158    	; 0x2976 <__divmodsi4>
    28d8:	49 01       	movw	r8, r18
    28da:	5a 01       	movw	r10, r20
    28dc:	9b 01       	movw	r18, r22
    28de:	ac 01       	movw	r20, r24
    28e0:	a7 ea       	ldi	r26, 0xA7	; 167
    28e2:	b1 e4       	ldi	r27, 0x41	; 65
    28e4:	b4 df       	rcall	.-152    	; 0x284e <__muluhisi3>
    28e6:	6b 01       	movw	r12, r22
    28e8:	7c 01       	movw	r14, r24
    28ea:	ac ee       	ldi	r26, 0xEC	; 236
    28ec:	b4 ef       	ldi	r27, 0xF4	; 244
    28ee:	a5 01       	movw	r20, r10
    28f0:	94 01       	movw	r18, r8
    28f2:	b9 df       	rcall	.-142    	; 0x2866 <__mulohisi3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	8c 0d       	add	r24, r12
    28fa:	9d 1d       	adc	r25, r13
    28fc:	ae 1d       	adc	r26, r14
    28fe:	bf 1d       	adc	r27, r15
    2900:	b7 ff       	sbrs	r27, 7
    2902:	03 c0       	rjmp	.+6      	; 0x290a <do_rand+0x6c>
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	a1 09       	sbc	r26, r1
    2908:	b0 48       	sbci	r27, 0x80	; 128
    290a:	88 83       	st	Y, r24
    290c:	99 83       	std	Y+1, r25	; 0x01
    290e:	aa 83       	std	Y+2, r26	; 0x02
    2910:	bb 83       	std	Y+3, r27	; 0x03
    2912:	9f 77       	andi	r25, 0x7F	; 127
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	ff 90       	pop	r15
    291a:	ef 90       	pop	r14
    291c:	df 90       	pop	r13
    291e:	cf 90       	pop	r12
    2920:	bf 90       	pop	r11
    2922:	af 90       	pop	r10
    2924:	9f 90       	pop	r9
    2926:	8f 90       	pop	r8
    2928:	08 95       	ret

0000292a <rand_r>:
    292a:	b9 cf       	rjmp	.-142    	; 0x289e <do_rand>

0000292c <rand>:
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	92 e0       	ldi	r25, 0x02	; 2
    2930:	b6 cf       	rjmp	.-148    	; 0x289e <do_rand>

00002932 <srand>:
    2932:	a0 e0       	ldi	r26, 0x00	; 0
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    293a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    293e:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    2942:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    2946:	08 95       	ret

00002948 <memcpy>:
    2948:	fb 01       	movw	r30, r22
    294a:	dc 01       	movw	r26, r24
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <memcpy+0xa>
    294e:	01 90       	ld	r0, Z+
    2950:	0d 92       	st	X+, r0
    2952:	41 50       	subi	r20, 0x01	; 1
    2954:	50 40       	sbci	r21, 0x00	; 0
    2956:	d8 f7       	brcc	.-10     	; 0x294e <memcpy+0x6>
    2958:	08 95       	ret

0000295a <strncmp>:
    295a:	fb 01       	movw	r30, r22
    295c:	dc 01       	movw	r26, r24
    295e:	41 50       	subi	r20, 0x01	; 1
    2960:	50 40       	sbci	r21, 0x00	; 0
    2962:	30 f0       	brcs	.+12     	; 0x2970 <strncmp+0x16>
    2964:	8d 91       	ld	r24, X+
    2966:	01 90       	ld	r0, Z+
    2968:	80 19       	sub	r24, r0
    296a:	19 f4       	brne	.+6      	; 0x2972 <strncmp+0x18>
    296c:	00 20       	and	r0, r0
    296e:	b9 f7       	brne	.-18     	; 0x295e <strncmp+0x4>
    2970:	88 1b       	sub	r24, r24
    2972:	99 0b       	sbc	r25, r25
    2974:	08 95       	ret

00002976 <__divmodsi4>:
    2976:	05 2e       	mov	r0, r21
    2978:	97 fb       	bst	r25, 7
    297a:	16 f4       	brtc	.+4      	; 0x2980 <__divmodsi4+0xa>
    297c:	00 94       	com	r0
    297e:	0f d0       	rcall	.+30     	; 0x299e <__negsi2>
    2980:	57 fd       	sbrc	r21, 7
    2982:	05 d0       	rcall	.+10     	; 0x298e <__divmodsi4_neg2>
    2984:	14 d0       	rcall	.+40     	; 0x29ae <__udivmodsi4>
    2986:	07 fc       	sbrc	r0, 7
    2988:	02 d0       	rcall	.+4      	; 0x298e <__divmodsi4_neg2>
    298a:	46 f4       	brtc	.+16     	; 0x299c <__divmodsi4_exit>
    298c:	08 c0       	rjmp	.+16     	; 0x299e <__negsi2>

0000298e <__divmodsi4_neg2>:
    298e:	50 95       	com	r21
    2990:	40 95       	com	r20
    2992:	30 95       	com	r19
    2994:	21 95       	neg	r18
    2996:	3f 4f       	sbci	r19, 0xFF	; 255
    2998:	4f 4f       	sbci	r20, 0xFF	; 255
    299a:	5f 4f       	sbci	r21, 0xFF	; 255

0000299c <__divmodsi4_exit>:
    299c:	08 95       	ret

0000299e <__negsi2>:
    299e:	90 95       	com	r25
    29a0:	80 95       	com	r24
    29a2:	70 95       	com	r23
    29a4:	61 95       	neg	r22
    29a6:	7f 4f       	sbci	r23, 0xFF	; 255
    29a8:	8f 4f       	sbci	r24, 0xFF	; 255
    29aa:	9f 4f       	sbci	r25, 0xFF	; 255
    29ac:	08 95       	ret

000029ae <__udivmodsi4>:
    29ae:	a1 e2       	ldi	r26, 0x21	; 33
    29b0:	1a 2e       	mov	r1, r26
    29b2:	aa 1b       	sub	r26, r26
    29b4:	bb 1b       	sub	r27, r27
    29b6:	fd 01       	movw	r30, r26
    29b8:	0d c0       	rjmp	.+26     	; 0x29d4 <__udivmodsi4_ep>

000029ba <__udivmodsi4_loop>:
    29ba:	aa 1f       	adc	r26, r26
    29bc:	bb 1f       	adc	r27, r27
    29be:	ee 1f       	adc	r30, r30
    29c0:	ff 1f       	adc	r31, r31
    29c2:	a2 17       	cp	r26, r18
    29c4:	b3 07       	cpc	r27, r19
    29c6:	e4 07       	cpc	r30, r20
    29c8:	f5 07       	cpc	r31, r21
    29ca:	20 f0       	brcs	.+8      	; 0x29d4 <__udivmodsi4_ep>
    29cc:	a2 1b       	sub	r26, r18
    29ce:	b3 0b       	sbc	r27, r19
    29d0:	e4 0b       	sbc	r30, r20
    29d2:	f5 0b       	sbc	r31, r21

000029d4 <__udivmodsi4_ep>:
    29d4:	66 1f       	adc	r22, r22
    29d6:	77 1f       	adc	r23, r23
    29d8:	88 1f       	adc	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	1a 94       	dec	r1
    29de:	69 f7       	brne	.-38     	; 0x29ba <__udivmodsi4_loop>
    29e0:	60 95       	com	r22
    29e2:	70 95       	com	r23
    29e4:	80 95       	com	r24
    29e6:	90 95       	com	r25
    29e8:	9b 01       	movw	r18, r22
    29ea:	ac 01       	movw	r20, r24
    29ec:	bd 01       	movw	r22, r26
    29ee:	cf 01       	movw	r24, r30
    29f0:	08 95       	ret

000029f2 <_exit>:
    29f2:	f8 94       	cli

000029f4 <__stop_program>:
    29f4:	ff cf       	rjmp	.-2      	; 0x29f4 <__stop_program>
